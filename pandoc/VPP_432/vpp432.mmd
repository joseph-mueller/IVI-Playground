> <img src="media/image1.wmf" style="width:4.21875in;height:2.21875in" />

**Systems Alliance**

**VPP-4.3.2: VISA Implementation Specification for Textual Languages**

**May 19, 2022**

**Revision 7.2**

> <img src="media/image1.wmf" style="width:4.21875in;height:2.21875in" />

**Systems Alliance**

**VPP-4.3.2 Revision History**

This section is an overview of the revision history of the VPP-4.3.2
specification.

**Revision 1.0, December 29, 1995**

> Original VISA document. Changes from VISA Transition Library include
> bindings for locking, asynchronous I/O, 32-bit register access, block
> moves, shared memory operations, and serial interface support.

**Revision 1.1, January 22, 1997**

> Added new attributes, error codes, events, and formatted I/O
> modifiers.

**Revision 2.0, December 5, 1997**

> Added error handling event, more formatted I/O operations, more serial
> attributes and extended searching capabilities. Changed ANSI C
> representation of attribute and event constants from ending in “L” to
> “UL” because they are all unsigned values.

**Revision 2.0.1, December 4, 1998**

> Added new types to visatype.h for instrument drivers. Added new modes
> to give more robust functionality to viGpibControlREN. Updated
> information regarding contacting the Alliance.

**Revision 2.2, November 19, 1999**

> Added new resource classes for GPIB (INTFC and SERVANT), VXI
> (BACKPLANE and SERVANT), and TCPIP (INSTR, SOCKET, and SERVANT).

**Revision 3.0 Draft, January 14, 2003**

> Added new resource class for USB (INSTR). Removed definitions for the
> obsolete WIN framework (Windows 3.x), but this does not preclude a
> vendor implementation of VISA 3.0 on that framework.

**Revision 3.0, January 15, 2004**

> Approved at IVI Board of Directors meeting.

**Revision 4.0 Draft, May 16, 2006**

> Added new resource class for PXI (INSTR) to incorporate PXISA
> extensions. Added 64-bit extensions for register-based operations.
> Added support for WIN64 framework.

**Revision 4.0, October 12, 2006**

> Approved at IVI Board of Directors meeting.

**Revision 4.1, February 14, 2008**

> Updated the introduction to reflect the IVI Foundation organization
> changes. Replaced Notice with text used by IVI Foundation
> specifications.

**Revision 4.1, April 14, 2008**

> Editorial change to update the IVI Foundation contact information in
> the Important Information section to remove obsolete address
> information and refer only to the IVI Foundation web site.

**Revision 5.0, June 9, 2010**

> Added support for new TCPIP INSTR attributes regarding HiSLIP devices.

**Revision 5.1, October 11, 2012**

> Added support extended VXIbus block transfer protocols and trigger
> capabilities according to VXI-1 4.0. Extensions for PXI.

**Revision 5.4, June 19, 2014**

> Added a new error code VI_ERROR_LINE_NRESERVED to facilitate better
> mapping of PXI-9 trigger error codes. Added support for LCC compiler.
> Changed the version to 5.4 to ensure that all VISA specs being voted
> on at the same time have the same version.

**Revision 5.7, February 26, 2016**

> Add PXI trigger lines TTL8-TTL11. Added support for MinGW and Clang
> compilers.

**Revision 5.8, October 17, 2017**

> Defined new const types and updated public entry points to use the
> correct const type for input parameters.

**Revision 7.0, October 19, 2018**

> Add the Linux Framework.

**Revision 7.1, November 20, 2020**

> Add support for HiSLIP 2.0. Add support for secure networked
> connections.

**Revision 7.2, May 19, 2022**

> Add additional attributes and errors for secure networked connections.

**NOTICE**

VPP-4.3.2: *VISA Implementation Specification for Textual Languages* is
authored by the IVI Foundation  
member companies. For a vendor membership roster list, please visit the
IVI Foundation web site at www.ivifoundation.org.

The IVI Foundation wants to receive your comments on this specification.
You can contact the Foundation through the web site at
www.ivifoundation.org.

**Warranty**

The IVI Foundation and its member companies make no warranty of any kind
with regard to this material, including, but not limited to, the implied
warranties of merchantability and fitness for a particular purpose. The
IVI Foundation and its member companies shall not be liable for errors
contained herein or for incidental or consequential damages in
connection with the furnishing, performance, or use of this material.

**Trademarks**

Product and company names listed are trademarks or trade names of their
respective companies.

No investigation has been made of common-law trademark rights in any
work.

**Table of Contents**

[Section 1 Introduction to the VXI*plug&play* Systems Alliance and the
IVI Foundation
[1](#introduction-to-the-vxiplugplay-systems-alliance-and-the-ivi-foundation)](#introduction-to-the-vxiplugplay-systems-alliance-and-the-ivi-foundation)

[Section 2 Overview of VISA Implementation Specification
[1](#overview-of-visa-implementation-specification)](#overview-of-visa-implementation-specification)

[2.1 Objectives of This Specification
[1](#objectives-of-this-specification)](#objectives-of-this-specification)

[2.2 Audience for This Specification
[1](#audience-for-this-specification)](#audience-for-this-specification)

[2.3 Scope and Organization of This Specification
[2](#scope-and-organization-of-this-specification)](#scope-and-organization-of-this-specification)

[2.4 Application of This Specification
[2](#application-of-this-specification)](#application-of-this-specification)

[2.5 References [2](#references)](#references)

[2.6 Definition of Terms and Acronyms
[3](#definition-of-terms-and-acronyms)](#definition-of-terms-and-acronyms)

[2.7 Conventions [6](#conventions)](#conventions)

[Section 3 VISA Textual Language Bindings
[1](#visa-textual-language-bindings)](#visa-textual-language-bindings)

[3.1 Type Assignments [1](#_Toc103857898)](#_Toc103857898)

[3.1.1 Type Assignments for WINNT Framework
[6](#type-assignments-for-winnt-framework)](#type-assignments-for-winnt-framework)

[3.1.2 Type Assignments for WIN64 Framework
[6](#type-assignments-for-win64-framework)](#type-assignments-for-win64-framework)

[3.1.3 Type Assignments for Linux Framework
[6](#type-assignments-for-linux-framework)](#type-assignments-for-linux-framework)

[3.2 Operation Prototypes
[7](#operation-prototypes)](#operation-prototypes)

[3.2.1 Operation Prototypes for WINNT Framework
[12](#operation-prototypes-for-winnt-framework)](#operation-prototypes-for-winnt-framework)

[3.2.2 Operation Prototypes for WIN64 Framework
[17](#operation-prototypes-for-win64-framework)](#operation-prototypes-for-win64-framework)

[3.2.3 Operation Prototypes for Linux Framework
[17](#operation-prototypes-for-linux-framework)](#operation-prototypes-for-linux-framework)

[3.3 Completion and Error Codes
[18](#completion-and-error-codes)](#completion-and-error-codes)

[3.4 Attribute Values [23](#attribute-values)](#attribute-values)

[3.5 Event Type Values [29](#event-type-values)](#event-type-values)

[3.6 Values and Ranges [30](#values-and-ranges)](#values-and-ranges)

[3.7 Library Requirements
[34](#library-requirements)](#library-requirements)

[3.7.1 Library Requirements for WINNT and WIN64 Frameworks
[34](#library-requirements-for-winnt-and-win64-frameworks)](#library-requirements-for-winnt-and-win64-frameworks)

[3.7.2 Library Requirements for the Linux Framework
[36](#library-requirements-for-the-linux-framework)](#library-requirements-for-the-linux-framework)

[3.8 Miscellaneous [37](#miscellaneous)](#miscellaneous)

[Appendix A Implementation Files
[1](#appendix-a-implementation-files)](#appendix-a-implementation-files)

[A.1 Contents of visatype.h File
[1](#a.1-contents-of-visatype.h-file)](#a.1-contents-of-visatype.h-file)

[A.2 Contents of visa.h File
[5](#a.2-contents-of-visa.h-file)](#a.2-contents-of-visa.h-file)

[A.3 Contents of visa32.bas File
[19](#a.3-contents-of-visa32.bas-file)](#a.3-contents-of-visa32.bas-file)

[A.4 Contents of visa32.def File
[29](#a.4-contents-of-visa32.def-file)](#a.4-contents-of-visa32.def-file)

[A.5 Contents of visa64.def File
[31](#a.5-contents-of-visa64.def-file)](#a.5-contents-of-visa64.def-file)

**  
**

**Tables**

[Table 3.1.1. Type Assignments for VISA and Instrument Drivers
3-[1](#_Toc135113888)](#_Toc135113888)

[Table 3.1.2. Type Assignments for VISA Only
3-[5](#_Toc135113889)](#_Toc135113889)

[Table 3.2.1. ANSI C Bindings for VISA Operations
3-[7](#_Toc135113890)](#_Toc135113890)

[Table 3.2.2. Visual Basic Bindings for VISA Operations for the WIN95
and WINNT Frameworks 3-[13](#_Toc135113891)](#_Toc135113891)

[Table 3.3.1. Completion and Error Codes
3-[18](#_Toc135113892)](#_Toc135113892)

[Table 3.4.1. Attribute Values 3-[23](#_Toc135113893)](#_Toc135113893)

[Table 3.5.1. Event Type Values 3-[29](#_Toc135113894)](#_Toc135113894)

[Table 3.6.1. Values and Ranges 3-[30](#_Toc135113895)](#_Toc135113895)

[Table 3.7.1. Procedure Definition Exports for the WINNT and WIN64
Frameworks 3-[34](#_Toc135113896)](#_Toc135113896)

[Table 3.8.1. Bit Pattern for Attributes
3-[39](#_Toc135113897)](#_Toc135113897)

[Table 3.8.2. Bit Pattern for Status Codes
3-[39](#_Toc135113898)](#_Toc135113898)

# Introduction to the VXI*plug&play* Systems Alliance and the IVI Foundation

The VXI*plug&play* Systems Alliance was founded by members who shared a
common commitment to end-user success with open, multivendor VXI
systems. The alliance accomplished major improvements in ease of use by
endorsing and implementing common standards and practices in both
hardware and software, beyond the scope of the VXIbus specifications.
The alliance used both formal and de facto standards to define complete
system frameworks. These standard frameworks gave end-users "plug &
play" interoperability at both the hardware and system software level.

The IVI Foundation is an organization whose members share a common
commitment to test system developer success through open, powerful,
instrument control technology. The IVI Foundation’s primary purpose is
to develop and promote specifications for programming test instruments
that simplify interchangeability, provide better performance, and reduce
the cost of program development and maintenance.

In 2002, the VXI*plug&play* Systems Alliance voted to become part of the
IVI Foundation. In 2003, the VXI*plug&play* Systems Alliance formally
merged into the IVI Foundation. The IVI Foundation has assumed control
of the VXI*plug&play* specifications, and all ongoing work will be
accomplished as part of the IVI Foundation.

All references to VXI*plug&play* Systems Alliance within this document,
except contact information, were maintained to preserve the context of
the original document.

# Overview of VISA Implementation Specification

This section introduces the VISA Implementation Specification for
Textual Languages. This specification is a document authored by the
VXI*plug&play* Systems Alliance. The technical work embodied in this
document and the writing of this document was performed by the VISA
Technical Working Group.

This section provides a complete overview of the VISA implementation
specification, and gives readers general information that may be
required to understand how to read, interpret, and implement individual
aspects of this specification. This section is organized as follows:

• Objectives of this specification

• Audience for this specification

• Scope and organization of this specification

• Application of this specification

• References

• Definitions of terms and acronyms

• Conventions

• Communication

## Objectives of This Specification

VISA gives VXI and GPIB software developers, particularly instrument
driver developers, the functionality needed by instrument drivers in an
interface-independent fashion for MXI, embedded VXI, GPIB-VXI, GPIB, and
asynchronous serial controllers. VXI*plug&play* drivers written to the
VISA specifications can execute on VXI*plug&play* system frameworks that
have the VISA I/O library.

The VISA specification provides a common standard for the VXI*plug&play*
System Alliance for developing multi-vendor software programs, including
instrument drivers. This specification describes the VISA software model
and the VISA Application Programming Interface (API).

The VISA Implementation Specification for Textual Languages addresses
particular issues related to implementing source and binary level
compatibility within specific frameworks, for the C and BASIC languages.
Implementation issues for the G language are described in VPP-4.3.3:
*VISA Implementation Specification for the G Language.*

## Audience for This Specification

There are three audiences for this specification. The first audience is
instrument driver developers—whether an instrument vendor, system
integrator, or end user—who want to implement instrument driver software
that is compliant with the VXI*plug&play* standards. The second audience
is I/O vendors who want to implement VISA‑compliant I/O software. The
third audience is instrumentation end users and application programmers
who want to implement applications that utilize instrument drivers
compliant with this specification.

##  Scope and Organization of This Specification

This specification is organized in sections, with each section
discussing a particular aspect of the VISA model.

Section 1 explains the VXI*plug&play* Systems Alliance and its relation
to the IVI Foundation.

Section 2 provides an overview of this specification, including the
objectives, scope and organization, application, references, definition
of terms and acronyms, and conventions.

Section 3 provides the details of the VISA bindings to specific
frameworks.

## Application of This Specification

This specification is intended for use by developers of VXI*plug&play*
instrument drivers and by developers of VISA I/O software. It is also
useful as a reference for end users of VXI*plug&play* instrument
drivers. This specification is intended to be used in conjunction with
the VPP-3.*x* specifications, including the *Instrument Drivers
Architecture and Design Specification* (VPP-3.1), the *Instrument Driver
Functional Body Specification* (VPP-3.2), the *Instrument Interactive
Developer Interface Specification* (VPP-3.3), and the *Instrument Driver
Programmatic Developer Interface Specification* (VPP-3.4). These related
specifications describe the implementation details for specific
instrument drivers that are used with specific system frameworks.
VXI*plug&play* instrument drivers developed in accordance with these
specifications can be used in a wide variety of higher-level software
environments, as described in the *System* *Frameworks Specification*
(VPP-2).

## References

The following documents contain information that you may find helpful as
you read this document:

• ANSI/IEEE Standard 488.1-1987, *IEEE Standard Digital Interface for
Programmable Instrumentation*

• ANSI/IEEE Standard 488.2-1992, *IEEE Standard Codes, Formats,
Protocols, and Common Commands*

• ANSI/IEEE Standard 1014-1987, *IEEE Standard for a Versatile Backplane
Bus: VMEbus*

• *ANSI/IEEE Standard 1174-2000, Standard Serial Interface for
Programmable Instrumentation*

• VPP-1, VXI*plug&play* Charter Document

• VPP-2, *System* *Frameworks Specification*

• VPP-3.1, *Instrument Drivers Architecture and Design Specification*

• VPP-3.2, *Instrument Driver Functional Body Specification*

• VPP-3.3, *Instrument Driver Interactive Developer Interface
Specification*

• VPP-3.4, *Instrument Driver Programmatic Developer Interface
Specification*

• VPP-4.3, *The VISA Library*

• VPP-4.3.3, *VISA Implementation Specification for the G Language*

• VPP-6, *Installation and Packaging Specification*

• VPP-7, *Soft Front Panel Specification*

• VPP-9, *Instrument Vendor Abbreviations*

• VXI-1, *VXIbus System Specification*, Revision 1.4, VXIbus Consortium

## Definition of Terms and Acronyms

The following are some commonly used terms within this document

<table>
<colgroup>
<col style="width: 24%" />
<col style="width: 75%" />
</colgroup>
<tbody>
<tr class="odd">
<td><strong>Address</strong></td>
<td>A string (or other language construct) that uniquely locates and
identifies a resource. VISA defines an ASCII-based grammar that
associates strings with particular physical devices or interfaces and
VISA resources.</td>
</tr>
<tr class="even">
<td><strong>ADE</strong></td>
<td>Application Development Environment</td>
</tr>
<tr class="odd">
<td><strong>API</strong></td>
<td>Application Programmers Interface. The direct interface that an end
user sees when creating an application. The VISA API consists of the sum
of all of the operations, attributes, and events of each of the VISA
Resource Classes.</td>
</tr>
<tr class="even">
<td><strong>Attribute</strong></td>
<td>A value within a resource that reflects a characteristic of the
operational state of a resource.</td>
</tr>
<tr class="odd">
<td><strong>Bus Error</strong></td>
<td>An error that signals failed access to an address. Bus errors occur
with low-level accesses to memory and usually involve hardware with bus
mapping capabilities. For example, non-existent memory, a non-existent
register, or an incorrect device access can cause a bus error.</td>
</tr>
<tr class="even">
<td><strong>Commander</strong></td>
<td>A device that has the ability to control another device. This term
can also denote the unique device that has sole control over another
device (as with the VXI Commander/Servant hierarchy).</td>
</tr>
<tr class="odd">
<td><strong>Communication Channel</strong></td>
<td>The same as <em>Session</em>. A communication path between a
software element and a resource. Every communication channel in VISA is
unique.</td>
</tr>
<tr class="even">
<td><strong>Controller</strong></td>
<td>A device that can control another device(s) or is in the process of
performing an operation on another device.</td>
</tr>
<tr class="odd">
<td><strong>Device</strong></td>
<td>An entity that receives commands from a controller. A device can be
an instrument, a computer (acting in a non-controller role), or a
peripheral (such as a plotter or printer). In VISA, the concept of a
device is generally the logical association of several VISA
resources.</td>
</tr>
<tr class="even">
<td><strong>Instrument</strong></td>
<td>A device that accepts some form of stimulus to perform a designated
task, test, or measurement function. Two common forms of stimuli are
message passing and register reads and writes. Other forms include
triggering or varying forms of asynchronous control.</td>
</tr>
<tr class="odd">
<td><strong>Interface</strong></td>
<td>A generic term that applies to the connection between devices and
controllers. It includes the communication media and the
device/controller hardware necessary for cross-communication.</td>
</tr>
<tr class="even">
<td><strong>Instrument Driver</strong></td>
<td>Library of functions for controlling a specific instrument</td>
</tr>
<tr class="odd">
<td></td>
<td></td>
</tr>
<tr class="even">
<td></td>
<td></td>
</tr>
<tr class="odd">
<td></td>
<td></td>
</tr>
<tr class="even">
<td><strong>Mapping</strong></td>
<td>An operation that returns a reference to a specified section of an
address space and makes the specified range of addresses accessible to
the requester. This function is independent of memory allocation.</td>
</tr>
<tr class="odd">
<td></td>
<td></td>
</tr>
<tr class="even">
<td></td>
<td></td>
</tr>
<tr class="odd">
<td><strong>Operation</strong></td>
<td>An action defined by a resource that can be performed on a
resource.</td>
</tr>
<tr class="even">
<td><strong>Process</strong></td>
<td>An operating system component that shares a system's resources. A
multi-process system is a computer system that allows multiple programs
to execute simultaneously, each in a separate process environment. A
single-process system is a computer system that allows only a single
program to execute at a given point in time.</td>
</tr>
<tr class="odd">
<td><strong>Register</strong></td>
<td>An address location that either contains a value that is a function
of the state of hardware or can be written into to cause hardware to
perform a particular action or to enter a particular state. In other
words, an address location that controls and/or monitors hardware.</td>
</tr>
<tr class="even">
<td><strong>Resource Class</strong></td>
<td>The definition for how to create a particular resource. In general,
this is synonymous with the connotation of the word <em>class</em> in
object-oriented architectures. For VISA Instrument Control Resource
Classes, this refers to the definition for how to create a resource that
controls a particular capability of a device.</td>
</tr>
<tr class="odd">
<td><strong>Resource or<br />
Resource Instance</strong></td>
<td>In general, this term is synonymous with the connotation of the word
<em>object</em> in object-oriented architectures. For VISA,
<em>resource</em> more specifically refers to a particular
implementation (or <em>instance</em> in object-oriented terms) of a
Resource Class. In VISA, every defined software module is a
resource.</td>
</tr>
<tr class="even">
<td><strong>Session</strong></td>
<td>The same as <em>Communication Channel</em>. A communication path
between a software element and a resource. Every communication channel
in VISA is unique.</td>
</tr>
<tr class="odd">
<td><strong>SRQ</strong></td>
<td>IEEE 488 Service Request. This is an asynchronous request from a
remote GPIB device that requires service. A service request is
essentially an interrupt from a remote device. For GPIB, this amounts to
asserting the SRQ line on the GPIB. For VXI, this amounts to sending the
Request for Service True event (REQT).</td>
</tr>
<tr class="even">
<td><strong>Status Byte</strong></td>
<td>A byte of information returned from a remote device that shows the
current state and status of the device. If the device follows IEEE 488
conventions, bit 6 of the status byte indicates if the device is
currently requesting service.</td>
</tr>
<tr class="odd">
<td><strong>Template Function</strong></td>
<td>Instrument driver subsystem function common to the majority of
VXI<em>plug&amp;play</em> instrument drivers</td>
</tr>
<tr class="even">
<td><strong>Top-level Example</strong></td>
<td>A high-level test-oriented instrument driver function. It is
typically developed from the instrument driver subsystem functions.</td>
</tr>
<tr class="odd">
<td><strong>Virtual Instrument</strong></td>
<td>A name given to the grouping of software modules (in this case, VISA
resources with any associated or required hardware) to give the
functionality of a traditional stand-alone instrument. Within VISA, a
virtual instrument is the logical grouping of any of the VISA resources.
The VISA Instrument Control Resources Organizer serves as a means to
group any number of any type of VISA Instrument Control Resources within
a VISA system.</td>
</tr>
<tr class="even">
<td></td>
<td></td>
</tr>
<tr class="odd">
<td><strong>VISA</strong></td>
<td>Virtual Instrument Software Architecture. This is the general name
given to this document and its associated architecture. The architecture
consists of two main VISA components: the VISA Resource Manager and the
VISA Instrument Control Resources.</td>
</tr>
<tr class="even">
<td><strong>VISA Instrument Control Resources</strong></td>
<td>This is the name given to the part of VISA that defines all of the
device-specific resource classes. VISA Instrument Control Resources
encompass all defined device and interface capabilities for direct,
low-level instrument control.</td>
</tr>
<tr class="odd">
<td><strong>VISA Resource Manager</strong></td>
<td>This is the name given to the part of VISA that manages resources.
This management includes support for opening, closing, and finding
resources; setting attributes, retrieving attributes, and generating
events on resources; and so on.</td>
</tr>
<tr class="even">
<td><strong>VISA Resource Template</strong></td>
<td>This is the name given to the part of VISA that defines the basic
constraints and interface definition for the creation and use of a VISA
resource. All VISA resources must derive their interface from the
definition of the VISA Resource Template.</td>
</tr>
<tr class="odd">
<td></td>
<td></td>
</tr>
</tbody>
</table>

##  Conventions

Throughout this specification you will see the following headings on
certain paragraphs. These headings instill special meaning on these
paragraphs.

*Rules* must be followed to ensure compatibility with the System
Framework. A rule is characterized by the use of the words **SHALL** and
**SHALL NOT** in bold upper case characters. These words are not used in
this manner for any other purpose other than stating rules.

*Recommendations* consist of advice to implementors which will affect
the usability of the final device. They are included in this standard to
draw attention to particular characteristics which the authors believe
to be important to end user success.

*Permissions* are included to *authorize* specific implementations or
uses of system components. A permission is characterized by the use of
the word **MAY** in bold upper case characters. These permissions are
granted to ensure specific System Framework components are well defined
and can be tested for compatibility and interoperability.

*Observations* spell out implications of rules and bring attention to
things that might otherwise be overlooked. They also give the rationale
behind certain rules, so that the reader understands why the rule must
be followed.

*A note on the text of the specification:* Any text which appears
without heading should be considered as description of the standard and
how the architecture was intended to operate. The purpose of this text
is to give the reader a deeper understanding of the intentions of the
specification including the underlying model and specific required
features. As such, the implementor of this standard should take great
care to ensure that a particular implementation does not conflict with
the text of the standard.

# VISA Textual Language Bindings

## Type Assignments

Tables 3.1.1 and 3.1.2 give the type assignments for ANSI C and Visual
Basic for each type defined in VPP-4.3. Although ANSI C types can be
defined in a header file, Visual Basic types cannot. Table 3.1.1 lists
those types that are both used and exported by direct users of VISA
(such as instrument drivers). Table 3.1.2 lists types that may be used
but not exported by such users. For example, end-users would see the
types specified in Table 3.1.1 exported by the instrument driver;
however, they would not see the types specified in Table 3.1.2.

<span id="_Toc135113888" class="anchor"></span>Table 3.1.1. Type
Assignments for VISA and Instrument Drivers

<table>
<colgroup>
<col style="width: 20%" />
<col style="width: 21%" />
<col style="width: 14%" />
<col style="width: 44%" />
</colgroup>
<tbody>
<tr class="odd">
<td><strong>VISA Data Type</strong></td>
<td><strong>ANSI C Binding</strong></td>
<td><strong>Visual Basic Binding</strong></td>
<td><strong>Description</strong></td>
</tr>
<tr class="even">
<td>ViUInt32</td>
<td>unsigned long</td>
<td>Long</td>
<td>A 32-bit unsigned integer.</td>
</tr>
<tr class="odd">
<td>ViPUInt32</td>
<td>ViUInt32 *</td>
<td>N/A</td>
<td>The location of a 32-bit unsigned integer.</td>
</tr>
<tr class="even">
<td>ViAUInt32</td>
<td>ViUInt32[]</td>
<td>N/A</td>
<td>An array of 32-bit unsigned integers.</td>
</tr>
<tr class="odd">
<td>ViInt32</td>
<td>signed long</td>
<td>Long</td>
<td>A 32-bit signed integer.</td>
</tr>
<tr class="even">
<td>ViPInt32</td>
<td>ViInt32 *</td>
<td>N/A</td>
<td>The location of a 32-bit signed integer.</td>
</tr>
<tr class="odd">
<td>ViAInt32</td>
<td>ViInt32[]</td>
<td>N/A</td>
<td>An array of 32-bit signed integers.</td>
</tr>
<tr class="even">
<td>ViUInt64</td>
<td>Unsigned int64 or u_int64_t</td>
<td>N/A</td>
<td>A 64-bit unsigned integer. The exact type definition depends on the
compiler.</td>
</tr>
<tr class="odd">
<td>ViPUInt64</td>
<td>ViUInt64 *</td>
<td>N/A</td>
<td>The location of a 64-bit unsigned integer.</td>
</tr>
<tr class="even">
<td>ViAUInt64</td>
<td>ViUInt64[]</td>
<td>N/A</td>
<td>An array of 64-bit unsigned integers.</td>
</tr>
<tr class="odd">
<td>ViInt64</td>
<td>signed int64 or int64_t</td>
<td>N/A</td>
<td>A 64-bit signed integer. The exact type definition depends on the
compiler.</td>
</tr>
<tr class="even">
<td>ViPInt64</td>
<td>ViInt64 *</td>
<td>N/A</td>
<td>The location of a 64-bit signed integer.</td>
</tr>
<tr class="odd">
<td>ViAInt64</td>
<td>ViInt64[]</td>
<td>N/A</td>
<td>An array of 64-bit signed integers.</td>
</tr>
<tr class="even">
<td>ViUInt16</td>
<td>unsigned short</td>
<td>Integer</td>
<td>A 16-bit unsigned integer.</td>
</tr>
<tr class="odd">
<td>ViPUInt16</td>
<td>ViUInt16 *</td>
<td>N/A</td>
<td>The location of a 16-bit unsigned integer.</td>
</tr>
<tr class="even">
<td>ViAUInt16</td>
<td>ViUInt16[]</td>
<td>N/A</td>
<td>An array of 16-bit unsigned integers.</td>
</tr>
<tr class="odd">
<td>ViInt16</td>
<td>signed short</td>
<td>Integer</td>
<td>A 16-bit signed integer.</td>
</tr>
<tr class="even">
<td>ViPInt16</td>
<td>ViInt16 *</td>
<td>N/A</td>
<td>The location of a 16-bit signed integer.</td>
</tr>
<tr class="odd">
<td>ViAInt16</td>
<td>ViInt16[]</td>
<td>N/A</td>
<td>An array of 16-bit signed integers.</td>
</tr>
<tr class="even">
<td>ViUInt8</td>
<td>unsigned char</td>
<td>Integer/<br />
Byte</td>
<td>An 8-bit unsigned integer.</td>
</tr>
<tr class="odd">
<td>ViPUInt8</td>
<td>ViUInt8 *</td>
<td>N/A</td>
<td>The location of an 8-bit unsigned integer.</td>
</tr>
<tr class="even">
<td>ViAUInt8</td>
<td>ViUInt8[]</td>
<td>N/A</td>
<td>An array of 8-bit unsigned integers.</td>
</tr>
</tbody>
</table>

(continues)

Table 3.1.1. Type Assignments for VISA and Instrument Drivers
(Continued)

<table>
<colgroup>
<col style="width: 20%" />
<col style="width: 21%" />
<col style="width: 14%" />
<col style="width: 44%" />
</colgroup>
<tbody>
<tr class="odd">
<td><strong>VISA Data Type</strong></td>
<td><strong>ANSI C Binding</strong></td>
<td><strong>Visual Basic Binding</strong></td>
<td><strong>Description</strong></td>
</tr>
<tr class="even">
<td>ViInt8</td>
<td>signed char</td>
<td>Integer/<br />
Byte</td>
<td>An 8-bit signed integer.</td>
</tr>
<tr class="odd">
<td>ViPInt8</td>
<td>ViInt8 *</td>
<td>N/A</td>
<td>The location of an 8-bit signed integer.</td>
</tr>
<tr class="even">
<td>ViAInt8</td>
<td>ViInt8[]</td>
<td>N/A</td>
<td>An array of 8-bit signed integers.</td>
</tr>
<tr class="odd">
<td>ViAddr</td>
<td>void *</td>
<td>Long</td>
<td>A type that references another data type, in cases where the other
data type may vary depending on a particular context.</td>
</tr>
<tr class="even">
<td>ViPAddr</td>
<td>ViAddr *</td>
<td>N/A</td>
<td>The location of a ViAddr.</td>
</tr>
<tr class="odd">
<td>ViAAddr</td>
<td>ViAddr[]</td>
<td>N/A</td>
<td>An array of type ViAddr.</td>
</tr>
<tr class="even">
<td>ViChar</td>
<td>char</td>
<td>Integer/<br />
Byte</td>
<td>An 8-bit integer representing an ASCII character.</td>
</tr>
<tr class="odd">
<td>ViPChar</td>
<td>ViChar *</td>
<td>N/A</td>
<td>The location of a ViChar.</td>
</tr>
<tr class="even">
<td>ViAChar</td>
<td>ViChar[]</td>
<td>N/A</td>
<td>An array of type ViChar.</td>
</tr>
<tr class="odd">
<td>ViByte</td>
<td>unsigned char</td>
<td>Integer/<br />
Byte</td>
<td>An 8-bit unsigned integer representing an extended ASCII
character.</td>
</tr>
<tr class="even">
<td>ViPByte</td>
<td>ViByte *</td>
<td>N/A</td>
<td>The location of a ViByte.</td>
</tr>
<tr class="odd">
<td>ViAByte</td>
<td>ViByte[]</td>
<td>N/A</td>
<td>An array of type ViByte.</td>
</tr>
<tr class="even">
<td>ViBoolean</td>
<td>ViUInt16</td>
<td>Integer</td>
<td>A type for which there are two complementary values: VI_TRUE and
VI_FALSE.</td>
</tr>
<tr class="odd">
<td>ViPBoolean</td>
<td>ViBoolean *</td>
<td>N/A</td>
<td>The location of a ViBoolean.</td>
</tr>
<tr class="even">
<td>ViABoolean</td>
<td>ViBoolean[]</td>
<td>N/A</td>
<td>An array of type ViBoolean.</td>
</tr>
<tr class="odd">
<td>ViReal32</td>
<td>float</td>
<td>Single</td>
<td>A 32-bit single-precision value.</td>
</tr>
<tr class="even">
<td>ViPReal32</td>
<td>ViReal32 *</td>
<td>N/A</td>
<td>The location of a 32-bit single-precision value.</td>
</tr>
<tr class="odd">
<td>ViAReal32</td>
<td>ViReal32[]</td>
<td>N/A</td>
<td>An array of 32-bit single-precision values.</td>
</tr>
<tr class="even">
<td>ViReal64</td>
<td>double</td>
<td>Double</td>
<td>A 64-bit double-precision value.</td>
</tr>
<tr class="odd">
<td>ViPReal64</td>
<td>ViReal64 *</td>
<td>N/A</td>
<td>The location of a 64-bit double-precision value.</td>
</tr>
<tr class="even">
<td>ViAReal64</td>
<td>ViReal64[]</td>
<td>N/A</td>
<td>An array of 64-bit double-precision values.</td>
</tr>
<tr class="odd">
<td>ViBuf</td>
<td>ViPByte</td>
<td>String</td>
<td>The location of a block of data.</td>
</tr>
<tr class="even">
<td>ViConstBuf</td>
<td>const ViByte *</td>
<td>String</td>
<td>A ViBuf type that is guaranteed to not be modified by any
driver.</td>
</tr>
<tr class="odd">
<td>ViPBuf</td>
<td>ViPByte</td>
<td>String</td>
<td>The location to store a block of data.</td>
</tr>
<tr class="even">
<td>ViABuf</td>
<td>ViBuf[]</td>
<td>N/A</td>
<td>An array of type ViBuf.</td>
</tr>
<tr class="odd">
<td>ViString</td>
<td>ViPChar</td>
<td>String</td>
<td>The location of a NULL-terminated ASCII string.</td>
</tr>
<tr class="even">
<td>ViConstString</td>
<td>const ViChar *</td>
<td>String</td>
<td>A ViString type that is guaranteed to not be modified by any
driver.</td>
</tr>
</tbody>
</table>

(continues)

Table 3.1.1. Type Assignments for VISA and Instrument Drivers
(Continued)

|                    |                    |                          |                                                                                                                                            |
|---------------|----------------|-----------|-------------------------------|
| **VISA Data Type** | **ANSI C Binding** | **Visual Basic Binding** | **Description**                                                                                                                            |
| ViPString          | ViPChar            | String                   | The location to store a NULL-terminated ASCII string.                                                                                      |
| ViAString          | ViString\[\]       | N/A                      | An array of type ViString.                                                                                                                 |
| ViRsrc             | ViString           | String                   | A ViString type that is further restricted to adhere to the addressing grammar for resources as presented in Section 3 of VPP-4.3.         |
| ViConstRsrc        | ViConstString      | String                   | A ViRsrc type that is guaranteed to not be modified by any driver.                                                                         |
| ViPRsrc            | ViString           | String                   | The location to store a ViRsrc.                                                                                                            |
| ViARsrc            | ViRsrc\[\]         | N/A                      | An array of type ViRsrc.                                                                                                                   |
| ViStatus           | ViInt32            | Long                     | A defined type that contains values corresponding to VISA-defined Completion and Error termination codes.                                  |
| ViPStatus          | ViStatus \*        | N/A                      | The location of a ViStatus.                                                                                                                |
| ViAStatus          | ViStatus\[\]       | N/A                      | An array of type ViStatus.                                                                                                                 |
| ViVersion          | ViUInt32           | Long                     | A defined type that contains a reference to all information necessary for the architect to represent the current version of a resource.    |
| ViPVersion         | ViVersion \*       | N/A                      | The location of a ViVersion.                                                                                                               |
| ViAVersion         | ViVersion\[\]      | N/A                      | An array of type ViVersion.                                                                                                                |
| ViObject           | ViUInt32           | Long                     | The most fundamental VISA data type. It contains attributes and can be closed when no longer needed.                                       |
| ViPObject          | ViObject \*        | N/A                      | The location of a ViObject.                                                                                                                |
| ViAObject          | ViObject\[\]       | N/A                      | An array of type ViObject.                                                                                                                 |
| ViSession          | ViObject           | Long                     | A defined type that contains a reference to all information necessary for the architect to manage a communication channel with a resource. |
| ViPSession         | ViSession \*       | N/A                      | The location of a ViSession.                                                                                                               |
| ViASession         | ViSession\[\]      | N/A                      | An array of type ViSession.                                                                                                                |
| ViAttr             | ViUInt32           | Long                     | A type that uniquely identifies an attribute.                                                                                              |

**OBSERVATION 3.1.1**

> Table 3.1.1 lists each fundamental data type, a second type that is a
> reference to the fundamental data type, and a third type that
> indicates an array of the fundamental data type. For example, the
> entry ViUInt32, at the beginning of Table 3.1.1, is a fundamental data
> type. Fundamental data types are used for variable declarations and
> input parameters. ViPUInt32 is a reference to a ViUInt32, and is used
> for output parameters of type ViUInt32. ViAUInt32 is used for both
> input and output parameters of arrays of type ViUInt32.

\\

**OBSERVATION 3.1.2**

> In the case of Visual Basic, input parameters are passed by value
> (ByVal). Output parameters are not passed by value except for string
> types. For arrays, the first element of the array should be passed by
> reference. For example, to pass an array x, use x(0).

<span id="_Toc135113889" class="anchor"></span>Table 3.1.2. Type
Assignments for VISA Only

|                    |                      |                          |                                                                                                                                                                                 |
|---------------|----------------|-----------|-------------------------------|
| **VISA Data Type** | **ANSI C Binding**   | **Visual Basic Binding** | **Description**                                                                                                                                                                 |
| ViAccessMode       | ViUInt32             | Long                     | A defined type that specifies the different mechanisms that control access to a resource.                                                                                       |
| ViPAccessMode      | ViAccessMode \*      | N/A                      | The location of a ViAccessMode.                                                                                                                                                 |
| ViBusAddress       | ViUInt32 or ViUInt64 | Long or N/A              | A type that represents the system-dependent physical address. This varies on 32-bit and 64-bit systems.                                                                         |
| ViBusAddress64     | ViUInt64             | N/A                      | A type that represents a physical address that is always 64 bits, even on 32-bit systems.                                                                                       |
| ViPBusAddress      | ViBusAddress \*      | N/A                      | The location of a ViBusAddress.                                                                                                                                                 |
| ViPBusAddress64    | ViBusAddress64 \*    | N/A                      | The location of a ViBusAddress64.                                                                                                                                               |
| ViBusSize          | ViUInt32 or ViUInt64 | Long or N/A              | A type that represents the system dependent physical address size. This varies on 32-bit and 64-bit systems.                                                                    |
| ViAttrState        | ViUInt32 or ViUInt64 | Long or N/A              | A value unique to the individual type of an attribute. This varies on 32-bit and 64-bit systems.                                                                                |
| ViPAttrState       | void \*              | Any                      | The location of a ViAttrState.                                                                                                                                                  |
| ViVAList           | va_list              | Any                      | The location of a list of a variable number of parameters of differing types.                                                                                                   |
| ViEventType        | ViUInt32             | Long                     | A defined type that uniquely identifies the type of an event.                                                                                                                   |
| ViPEventType       | ViEventType \*       | N/A                      | The location of a ViEventType.                                                                                                                                                  |
| ViAEventType       | ViEventType \*       | N/A                      | An array of type ViEventType.                                                                                                                                                   |
| ViPAttr            | ViAttr \*            | N/A                      | The location of a ViAttr.                                                                                                                                                       |
| ViAAttr            | ViAttr \*            | N/A                      | An array of type ViAttr.                                                                                                                                                        |
| ViEventFilter      | ViUInt32             | Long                     | A defined type that specifies filtering masks or other information unique to an event.                                                                                          |
| ViFindList         | ViObject             | Long                     | A defined type that contains a reference to all resources found during a search operation.                                                                                      |
| ViPFindList        | ViFindList \*        | N/A                      | The location of a ViFindList.                                                                                                                                                   |
| ViEvent            | ViObject             | Long                     | A defined type that encapsulates the information necessary to process an event.                                                                                                 |
| ViPEvent           | ViEvent \*           | N/A                      | The location of a ViEvent.                                                                                                                                                      |
| ViKeyId            | ViString             | String                   | A defined type that contains a reference to all information necessary for the architect to manage the association of a thread or process and session with a lock on a resource. |

(continues)

Table 3.1.2. Type Assignments for VISA Only (Continued)

|                    |                                                         |                          |                                                                                                                                                                  |
|---------------|----------------|-----------|-------------------------------|
| **VISA Data Type** | **ANSI C Binding**                                      | **Visual Basic Binding** | **Description**                                                                                                                                                  |
| ViPKeyId           | ViPString                                               | String                   | The location of a ViKeyId.                                                                                                                                       |
| ViConstKeyId       | ViConstString                                           | String                   | A ViKeyId type that is guaranteed to not be modified by any driver.                                                                                              |
| ViJobId            | ViUInt32                                                | Long                     | A defined type that contains a reference to all information necessary for the architect to encapsulate the information necessary for a posted operation request. |
| ViPJobId           | ViJobId \*                                              | N/A                      | The location of a ViJobId.                                                                                                                                       |
| ViHndlr            | ViStatus (\*) (ViSession, ViEventType, ViEvent, ViAddr) | N/A                      | A value representing an entry point to an operation for use as a callback.                                                                                       |

**OBSERVATION 3.1.3**

> The pointer type ViHndlr is a code pointer rather than a data pointer.
> Therefore, it must be treated differently in some frameworks.

**RULE 3.1.1**

> All types in Tables 3.1.1 and 3.1.2 **SHALL** be defined to the
> specified bindings.

**RULE 3.1.2**

> All ANSI C definitions in Table 3.1.1 **SHALL** be present within the
> visatype.h file.

**RULE 3.1.3**

> All ANSI C definitions in Table 3.1.2 **SHALL** be present within the
> visa.h file.

### Type Assignments for WINNT Framework

**RULE 3.1.4**

> Unless otherwise stated, all pointers in Tables 3.1.1 and 3.1.2
> **SHALL** be treated as flat 32-bit data pointers when interfacing to
> the WINNT Framework DLL.

**RULE 3.1.5**

> The pointer type ViHndlr **SHALL** be treated as a \_stdcall pointer
> when interfacing to the WINNT Framework DLL.

### Type Assignments for WIN64 Framework

**RULE 3.1.6**

> Unless otherwise stated, all pointers in Tables 3.1.1 and 3.1.2
> **SHALL** be treated as flat 64-bit data pointers when interfacing to
> the WIN64 Framework DLL.

**RULE 3.1.7**

> The pointer type ViHndlr **SHALL** be treated as a fastcall pointer
> when interfacing to the WIN64 Framework DLL.

### Type Assignments for Linux Framework

**RULE 3.1.7**

> Unless otherwise stated, all pointers in Tables 3.1.1 and 3.1.2
> **SHALL** be treated as 64-bit data pointers when interfacing to the
> Linux Framework libraries.

## Operation Prototypes

The following sections specify the operation prototypes for ANSI C and
Visual Basic. Table 3.2.1 gives the function prototypes for the ANSI C
bindings for each function and operation in VPP-4.3.

<span id="_Toc135113890" class="anchor"></span>Table 3.2.1. ANSI C
Bindings for VISA Operations

ViStatus viGetDefaultRM (ViPSession sesn);

ViStatus viOpenDefaultRM (ViPSession sesn);

ViStatus viFindRsrc (ViSession sesn, ViConstString expr, ViPFindList
findList, ViPUInt32 retCnt, ViChar \_VI_FAR desc\[\]);

ViStatus viFindNext (ViFindList findList, ViChar \_VI_FAR desc\[\]);

ViStatus viParseRsrc (ViSession sesn, ViConstRsrc rsrcName, ViPUInt16
intfType, ViPUInt16 intfNum);

ViStatus viParseRsrcEx (ViSession sesn, ViConstRsrc rsrcName, ViPUInt16
intfType, ViPUInt16 intfNum, ViChar VI_FAR rsrcClass\[\], ViChar VI_FAR
expandedUnaliasedName\[\], ViChar VI_FAR aliasIfExists\[\]);

ViStatus viOpen (ViSession sesn, ViConstRsrc name, ViAccessMode mode,
ViUInt32 timeout, ViPSession vi);

ViStatus viClose (ViObject vi);

ViStatus viGetAttribute (ViObject vi, ViAttr attrName, void \_VI_PTR
attrValue);

ViStatus viSetAttribute (ViObject vi, ViAttr attrName, ViAttrState
attrValue);

ViStatus viStatusDesc (ViObject vi, ViStatus status, ViChar \_VI_FAR
desc\[\]);

ViStatus viTerminate (ViObject vi, ViUInt16 degree, ViJobId jobId);

ViStatus viLock (ViSession vi, ViAccessMode lockType, ViUInt32 timeout,
ViConstKeyId requestedKey, ViChar \_VI_FAR accessKey\[\]);

ViStatus viUnlock (ViSession vi);

ViStatus viEnableEvent (ViSession vi, ViEventType eventType, ViUInt16
mechanism, ViEventFilter context);

ViStatus viDisableEvent (ViSession vi, ViEventType eventType, ViUInt16
mechanism);

ViStatus viDiscardEvents (ViSession vi, ViEventType eventType, ViUInt16
mechanism);

ViStatus viWaitOnEvent (ViSession vi, ViEventType inEventType, ViUInt32
timeout, ViPEventType outEventType, ViPEvent outContext);

ViStatus viInstallHandler (ViSession vi, ViEventType eventType, ViHndlr
handler, ViAddr userHandle);

ViStatus viUninstallHandler(ViSession vi, ViEventType eventType, ViHndlr
handler, ViAddr userHandle);

ViStatus viRead (ViSession vi, ViPBuf buf, ViUInt32 cnt, ViPUInt32
retCnt);

ViStatus viReadAsync (ViSession vi, ViPBuf buf, ViUInt32 cnt, ViPJobId
jobId);

(continues)

Table 3.2.1. ANSI C Bindings for VISA Operations (Continued)

ViStatus viReadToFile (ViSession vi, ViConstString filename, ViUInt32
cnt, ViPUInt32 retCnt);

ViStatus viWrite (ViSession vi, ViConstBuf buf, ViUInt32 cnt, ViPUInt32
retCnt);

ViStatus viWriteAsync (ViSession vi, ViConstBuf buf, ViUInt32 cnt,
ViPJobId jobId);

ViStatus viWriteFromFile (ViSession vi, ViConstString filename, ViUInt32
cnt, ViPUInt32 retCnt);

ViStatus viAssertTrigger (ViSession vi, ViUInt16 protocol);

ViStatus viReadSTB (ViSession vi, ViPUInt16 status);

ViStatus viClear (ViSession vi);

ViStatus viSetBuf (ViSession vi, ViUInt16 mask, ViUInt32 size);

ViStatus viFlush (ViSession vi, ViUInt16 mask);

ViStatus viBufWrite (ViSession vi, ViConstBuf buf, ViUInt32 cnt,
ViPUInt32 retCnt);

ViStatus viBufRead (ViSession vi, ViPBuf buf, ViUInt32 cnt,
ViPUInt32 retCnt);

ViStatus viPrintf (ViSession vi, ViConstString writeFmt, ...);

ViStatus viVPrintf (ViSession vi, ViConstString writeFmt, ViVAList
params);

ViStatus viSPrintf (ViSession vi, ViPBuf buf, ViConstString writeFmt,
...);

ViStatus viVSPrintf (ViSession vi, ViPBuf buf, ViConstString writeFmt,
ViVAList parms);

ViStatus viScanf (ViSession vi, ViConstString readFmt, ...);

ViStatus viVScanf (ViSession vi, ViConstString readFmt, ViVAList
params);

ViStatus viSScanf (ViSession vi, ViConstBuf buf, ViConstString readFmt,
...);

ViStatus viVSScanf (ViSession vi, ViConstBuf buf, ViConstString readFmt,
ViVAList parms);

ViStatus viQueryf (ViSession vi, ViConstString writeFmt, ViConstString
readFmt, ...);

ViStatus viVQueryf (ViSession vi, ViConstString writeFmt, ViConstString
readFmt, ViVAList params);

ViStatus viIn8 (ViSession vi, ViUInt16 space, ViBusAddress offset,
ViPUInt8 val8);

ViStatus viOut8 (ViSession vi, ViUInt16 space, ViBusAddress offset,
ViUInt8 val8);

ViStatus viIn16 (ViSession vi, ViUInt16 space, ViBusAddress offset,
ViPUInt16 val16);

ViStatus viOut16 (ViSession vi, ViUInt16 space, ViBusAddress offset,
ViUInt16 val16);

ViStatus viIn32 (ViSession vi, ViUInt16 space, ViBusAddress offset,
ViPUInt32 val32);

ViStatus viOut32 (ViSession vi, ViUInt16 space, ViBusAddress offset,
ViUInt32 val32);

ViStatus viIn64 (ViSession vi, ViUInt16 space,  
ViBusAddress offset, ViPUInt64 val64);

ViStatus viOut64 (ViSession vi, ViUInt16 space,  
ViBusAddress offset, ViUInt64 val64);

ViStatus viIn8Ex (ViSession vi, ViUInt16 space,  
ViBusAddress64 offset, ViPUInt8 val8);

(continues)

Table 3.2.1. ANSI C Bindings for VISA Operations (Continued)

ViStatus viOut8Ex (ViSession vi, ViUInt16 space,  
ViBusAddress64 offset, ViUInt8 val8);

ViStatus viIn16Ex (ViSession vi, ViUInt16 space,  
ViBusAddress64 offset, ViPUInt16 val16);

ViStatus viOut16Ex (ViSession vi, ViUInt16 space,  
ViBusAddress64 offset, ViUInt16 val16);

ViStatus viIn32Ex (ViSession vi, ViUInt16 space,  
ViBusAddress64 offset, ViPUInt32 val32);

ViStatus viOut32Ex (ViSession vi, ViUInt16 space,  
ViBusAddress64 offset, ViUInt32 val32);

ViStatus viIn64Ex (ViSession vi, ViUInt16 space,  
ViBusAddress64 offset, ViPUInt64 val64);

ViStatus viOut64Ex (ViSession vi, ViUInt16 space,  
ViBusAddress64 offset, ViUInt64 val64);

ViStatus viMoveIn8 (ViSession vi, ViUInt16 space, ViBusAddress offset,
ViBusSize length, ViAUInt8 buf8);

ViStatus viMoveOut8 (ViSession vi, ViUInt16 space, ViBusAddress offset,
ViBusSize length, ViAUInt8 buf8);

ViStatus viMoveIn16 (ViSession vi, ViUInt16 space, ViBusAddress offset,
ViBusSize length, ViAUInt16 buf16);

ViStatus viMoveOut16 (ViSession vi, ViUInt16 space, ViBusAddress offset,
ViBusSize length, ViAUInt16 buf16);

ViStatus viMoveIn32 (ViSession vi, ViUInt16 space, ViBusAddress offset,
ViBusSize length, ViAUInt32 buf32);

ViStatus viMoveOut32 (ViSession vi, ViUInt16 space, ViBusAddress offset,
ViBusSize length, ViAUInt32 buf32);

ViStatus viMoveIn64 (ViSession vi, ViUInt16 space, ViBusAddress
offset,  
ViBusSize length, ViAUInt64 buf64);

ViStatus viMoveOut64 (ViSession vi, ViUInt16 space, ViBusAddress
offset,  
ViBusSize length, ViAUInt64 buf64);

ViStatus viMoveIn8Ex (ViSession vi, ViUInt16 space, ViBusAddress64
offset, ViBusSize length, ViAUInt8 buf8);

ViStatus viMoveOut8Ex (ViSession vi, ViUInt16 space, ViBusAddress64
offset, ViBusSize length, ViAUInt8 buf8);

ViStatus viMoveIn16Ex (ViSession vi, ViUInt16 space, ViBusAddress64
offset, ViBusSize length, ViAUInt16 buf16);

ViStatus viMoveOut16Ex (ViSession vi, ViUInt16 space, ViBusAddress64
offset, ViBusSize length, ViAUInt16 buf16);

ViStatus viMoveIn32Ex (ViSession vi, ViUInt16 space, ViBusAddress64
offset, ViBusSize length, ViAUInt32 buf32);

ViStatus viMoveOut32Ex (ViSession vi, ViUInt16 space, ViBusAddress64
offset, ViBusSize length, ViAUInt32 buf32);

ViStatus viMoveIn64Ex (ViSession vi, ViUInt16 space, ViBusAddress64
offset, ViBusSize length, ViAUInt64 buf64);

ViStatus viMoveOut64Ex (ViSession vi, ViUInt16 space, ViBusAddress64
offset, ViBusSize length, ViAUInt64 buf64);

(continues)

Table 3.2.1. ANSI C Bindings for VISA Operations (Continued)

ViStatus viMove (ViSession vi, ViUInt16 srcSpace, ViBusAddress
srcOffset, ViUInt16 srcWidth, ViUInt16 destSpace, ViBusAddress
destOffset, ViUInt16 destWidth, ViBusSize srcLength);

ViStatus viMoveAsync (ViSession vi, ViUInt16 srcSpace, ViBusAddress
srcOffset, ViUInt16 srcWidth, ViUInt16 destSpace, ViBusAddress
destOffset, ViUInt16 destWidth, ViBusSize srcLength, ViPJobId jobId);

ViStatus viMoveEx (ViSession vi, ViUInt16 srcSpace, ViBusAddress64
srcOffset, ViUInt16 srcWidth, ViUInt16 destSpace, ViBusAddress64
destOffset, ViUInt16 destWidth, ViBusSize srcLength);

ViStatus viMoveAsyncEx (ViSession vi, ViUInt16 srcSpace, ViBusAddress64
srcOffset, ViUInt16 srcWidth, ViUInt16 destSpace, ViBusAddress64
destOffset, ViUInt16 destWidth, ViBusSize srcLength, ViPJobId jobId);

ViStatus viMapAddress (ViSession vi, ViUInt16 mapSpace, ViBusAddress
mapOffset, ViBusSize mapSize, ViBoolean access, ViAddr suggested,
ViPAddr address);

ViStatus viUnmapAddress (ViSession vi);

ViStatus viMapAddressEx (ViSession vi, ViUInt16 mapSpace, ViBusAddress64
mapOffset, ViBusSize mapSize, ViBoolean access, ViAddr suggested,
ViPAddr address);

void viPeek8 (ViSession vi, ViAddr address, ViPUInt8 val8);

void viPoke8 (ViSession vi, ViAddr address, ViUInt8 val8);

void viPeek16 (ViSession vi, ViAddr address, ViPUInt16 val16);

void viPoke16 (ViSession vi, ViAddr address, ViUInt16 val16);

void viPeek32 (ViSession vi, ViAddr address, ViPUInt32 val32);

void viPoke32 (ViSession vi, ViAddr address, ViUInt32 val32);

void viPeek64 (ViSession vi, ViAddr address, ViPUInt64 val64);

void viPoke64 (ViSession vi, ViAddr address, ViUInt64 val64);

ViStatus viMemAlloc (ViSession vi, ViBusSize size, ViPBusAddress
offset);

ViStatus viMemFree (ViSession vi, ViBusAddress offset);

ViStatus viMemAllocEx (ViSession vi, ViBusSize size, ViPBusAddress64
offset);

ViStatus viMemFreeEx (ViSession vi, ViBusAddress64 offset);

ViStatus viGpibControlREN (ViSession vi, ViUInt16 mode);

ViStatus viGpibControlATN (ViSession vi, ViUInt16 mode);

ViStatus viGpibSendIFC (ViSession vi);

ViStatus viGpibCommand (ViSession vi, ViConstBuf cmd, ViUInt32 cnt,
ViPUInt32 retCnt);

ViStatus viGpibPassControl (ViSession vi, ViUInt16 primAddr, ViUInt16
secAddr);

ViStatus viVxiCommandQuery (ViSession vi, ViUInt16 mode, ViUInt32 cmd,
ViPUInt32 response);

ViStatus viAssertUtilSignal(ViSession vi, ViUInt16 line);

ViStatus viAssertIntrSignal(ViSession vi, ViInt16 mode, ViUInt32
statusID);

ViStatus viMapTrigger (ViSession vi, ViInt16 trigSrc, ViInt16 trigDest,
ViUInt16 mode);

ViStatus viUnmapTrigger (ViSession vi, ViInt16 trigSrc, ViInt16
trigDest);

ViStatus viUsbControlOut (ViSession vi, ViInt16 bmRequestType, ViInt16
bRequest, ViUInt16 wValue, ViUInt16 wIndex, ViUInt16 wLength, ViConstBuf
buf);

ViStatus viUsbControlIn (ViSession vi, ViInt16 bmRequestType, ViInt16
bRequest, ViUInt16 wValue, ViUInt16 wIndex, ViUInt16 wLength, ViPBuf
buf, ViPUInt16 retCnt);

ViStatus viPxiReserveTriggers(ViSession vi, ViInt16 cnt, ViAInt16
trigBuses, ViAInt16 trigLines, ViPInt16 failureIndex);

**RULE 3.2.1**

> All functions and operations specified in Table 3.2.1 **SHALL** be
> implemented as specified.

**RULE 3.2.2**

> The ANSI C definitions in Table 3.2.1 **SHALL** be present within the
> visa.h file.

**OBSERVATION 3.2.1**

> The operations viPrintf(), viScanf(), and viQueryf() take a variable
> number of arguments, which requires a different calling convention in
> some frameworks.
>
> **  
> **

### Operation Prototypes for WINNT Framework

**RULE 3.2.3**

> Unless otherwise stated, all functions and operations specified in
> Table 3.2.1 **SHALL** be treated as \_stdcall when interfacing to the
> WINNT Framework DLL.

**RULE 3.2.4**

> The operations viPrintf(), viScanf(), and viQueryf() **SHALL** be
> treated as \_cdecl when interfacing to the WINNT Framework DLL.

**RULE 3.2.5**

> All pointers in Table 3.2.1 **SHALL** be treated as flat 32-bit
> pointers when interfacing to the WINNT Framework DLL.

Table 3.2.2 gives the function prototypes for the Visual Basic bindings
for each operation in VPP-4.3 for the WINNT framework.

<span id="_Toc135113891" class="anchor"></span>Table 3.2.2. Visual Basic
Bindings for VISA Operations for the WINNT Framework

Declare Function viGetDefaultRM Lib "VISA32.DLL" Alias "#128" (sesn As
Long) As Long

Declare Function viOpenDefaultRM Lib "VISA32.DLL" Alias "#141" (sesn As
Long) As Long

Declare Function viFindRsrc Lib "VISA32.DLL" Alias "#129" (ByVal sesn As
Long, ByVal expr As String, vi As Long, retCount As Long, ByVal desc As
String) As Long

Declare Function viFindNext Lib "VISA32.DLL" Alias "#130" (ByVal vi As
Long, ByVal desc As String) As Long

Declare Function viParseRsrc Lib "VISA32.DLL" Alias "#146" (ByVal sesn
As Long, ByVal desc As String, intfType As Integer, intfNum As Integer)
As Long

Declare Function viParseRsrcEx Lib "VISA32.DLL" Alias "#147" (ByVal sesn
As Long, ByVal desc As String, intfType As Integer, intfNum As Integer,
ByVal rsrcClass As String, ByVal expandedUnaliasedName As String, ByVal
aliasIfExists As String) As Long

Declare Function viOpen Lib "VISA32.DLL" Alias "#131" (ByVal sesn As
Long, ByVal desc As String, ByVal mode As Long, ByVal timeout As Long,
vi As Long) As Long

Declare Function viClose Lib "VISA32.DLL" Alias "#132" (ByVal vi As
Long) As Long

Declare Function viGetAttribute Lib "VISA32.DLL" Alias "#133" (ByVal vi
As Long, ByVal attrName As Long, attrValue As Any) As Long

Declare Function viSetAttribute Lib "VISA32.DLL" Alias "#134" (ByVal vi
As Long, ByVal attrName As Long, ByVal attrValue As Long) As Long

Declare Function viStatusDesc Lib "VISA32.DLL" Alias "#142" (ByVal vi As
Long, ByVal status As Long, ByVal desc As String) As Long

Declare Function viLock Lib "VISA32.DLL" Alias "#144" (ByVal vi As Long,
ByVal lockType As Long, ByVal timeout As Long, ByVal requestedKey As
String, ByVal accessKey As String) As Long

Declare Function viUnlock Lib "VISA32.DLL" Alias "#145" (ByVal vi As
Long) As Long

Declare Function viEnableEvent Lib "VISA32.DLL" Alias "#135" (ByVal vi
As Long, ByVal eventType As Long, ByVal mechanism As Integer, ByVal
context As Long) As Long

Declare Function viDisableEvent Lib "VISA32.DLL" Alias "#136" (ByVal vi
As Long, ByVal eventType As Long, ByVal mechanism As Integer) As Long

Declare Function viDiscardEvents Lib "VISA32.DLL" Alias "#137" (ByVal vi
As Long, ByVal eventType As Long, ByVal mechanism As Integer) As Long

Declare Function viWaitOnEvent Lib "VISA32.DLL" Alias "#138" (ByVal vi
As Long, ByVal inEventType As Long, ByVal timeout As Long, outEventType
As Long, outEventContext As Long) As Long

(continues)

Table 3.2.2. Visual Basic Bindings for VISA Operations for the WINNT
Framework (Continued)

Declare Function viRead Lib "VISA32.DLL" Alias "#256" (ByVal vi As Long,
ByVal Buffer As String, ByVal count As Long, retCount As Long) As Long

Declare Function viReadToFile Lib "VISA32.DLL" Alias "#219" (ByVal vi As
Long, ByVal filename As String, ByVal count As Long, retCount As Long)
As Long

Declare Function viWrite Lib "VISA32.DLL" Alias "#257" (ByVal vi As
Long, ByVal Buffer As String, ByVal count As Long, retCount As Long) As
Long

Declare Function viWriteFromFile Lib "VISA32.DLL" Alias "#218" (ByVal vi
As Long, ByVal filename As String, ByVal count As Long, retCount As
Long) As Long

Declare Function viAssertTrigger Lib "VISA32.DLL" Alias "#258" (ByVal vi
As Long, ByVal protocol As Integer) As Long

Declare Function viReadSTB Lib "VISA32.DLL" Alias "#259" (ByVal vi As
Long, status As Integer) As Long

Declare Function viClear Lib "VISA32.DLL" Alias "#260" (ByVal vi As
Long) As Long

Declare Function viBufWrite Lib "VISA32.DLL" Alias "#202" (ByVal vi As
Long, ByVal Buffer As String, ByVal count As Long, retCount As Long) As
Long

Declare Function viBufRead Lib "VISA32.DLL" Alias "#203" (ByVal vi As
Long, ByVal Buffer As String, ByVal count As Long, retCount As Long) As
Long

Declare Function viSetBuf Lib "VISA32.DLL" Alias "#267" (ByVal vi As
Long, ByVal mask As Integer, ByVal bufSize As Long) As Long

Declare Function viFlush Lib "VISA32.DLL" Alias "#268" (ByVal vi As
Long, ByVal mask As Integer) As Long

Declare Function viVPrintf Lib "VISA32.DLL" Alias "#270" (ByVal vi As
Long, ByVal writeFmt As String, params As Any) As Long

Declare Function viVSPrintf Lib "VISA32.DLL" Alias "#205" (ByVal vi As
Long, ByVal Buffer As String, ByVal writeFmt As String, params As Any)
As Long

Declare Function viVScanf Lib "VISA32.DLL" Alias "#272" (ByVal vi As
Long, ByVal readFmt As String, params As Any) As Long

Declare Function viVSScanf Lib "VISA32.DLL" Alias "#207" (ByVal vi As
Long, ByVal Buffer As String, ByVal readFmt As String, params As Any) As
Long

Declare Function viVQueryf Lib "VISA32.DLL" Alias "#280" (ByVal vi As
Long, ByVal writeFmt As String, ByVal readFmt As String, params As Any)
As Long

Declare Function viIn8 Lib "VISA32.DLL" Alias "#273" (ByVal vi As Long,
ByVal accSpace As Integer, ByVal offset As Long, val8 As Byte) As Long

Declare Function viOut8 Lib "VISA32.DLL" Alias "#274" (ByVal vi As Long,
ByVal accSpace As Integer, ByVal offset As Long, ByVal val8 As Byte) As
Long

Declare Function viIn16 Lib "VISA32.DLL" Alias "#261" (ByVal vi As Long,
ByVal accSpace As Integer, ByVal offset As Long, val16 As Integer) As
Long

(continues)

Table 3.2.2. Visual Basic Bindings for VISA Operations for the WINNT
Framework (Continued)

Declare Function viOut16 Lib "VISA32.DLL" Alias "#262" (ByVal vi As
Long, ByVal accSpace As Integer, ByVal offset As Long, ByVal val16 As
Integer) As Long

Declare Function viIn32 Lib "VISA32.DLL" Alias "#281" (ByVal vi As Long,
ByVal accSpace As Integer, ByVal offset As Long, val32 As Long) As Long

Declare Function viOut32 Lib "VISA32.DLL" Alias "#282" (ByVal vi As
Long, ByVal accSpace As Integer, ByVal offset As Long, ByVal val32 As
Long) As Long

Declare Function viMoveIn8 Lib "VISA32.DLL" Alias "#283" (ByVal vi As
Long, ByVal accSpace As Integer, ByVal offset As Long, ByVal length As
Long, buf8 As Byte) As Long

Declare Function viMoveOut8 Lib "VISA32.DLL" Alias "#284" (ByVal vi As
Long, ByVal accSpace As Integer, ByVal offset As Long, ByVal length As
Long, buf8 As Byte) As Long

Declare Function viMoveIn16 Lib "VISA32.DLL" Alias "#285" (ByVal vi As
Long, ByVal accSpace As Integer, ByVal offset As Long, ByVal length As
Long, buf16 As Integer) As Long

Declare Function viMoveOut16 Lib "VISA32.DLL" Alias "#286" (ByVal vi As
Long, ByVal accSpace As Integer, ByVal offset As Long, ByVal length As
Long, buf16 As Integer) As Long

Declare Function viMoveIn32 Lib "VISA32.DLL" Alias "#287" (ByVal vi As
Long, ByVal accSpace As Integer, ByVal offset As Long, ByVal length As
Long, buf32 As Long) As Long

Declare Function viMoveOut32 Lib "VISA32.DLL" Alias "#288" (ByVal vi As
Long, ByVal accSpace As Integer, ByVal offset As Long, ByVal length As
Long, buf32 As Long) As Long

Declare Function viMove Lib "VISA32.DLL" Alias "#200" (ByVal vi As Long,
ByVal srcSpace As Integer, ByVal srcOffset As Long, ByVal srcWidth As
Integer, ByVal destSpace As Integer, ByVal destOffset As Long, ByVal
destWidth As Integer, ByVal srcLength As Long) As Long

Declare Function viMapAddress Lib "VISA32.DLL" Alias "#263" (ByVal vi As
Long, ByVal mapSpace As Integer, ByVal mapOffset As Long, ByVal mapSize
As Long, ByVal access As Integer, ByVal suggested As Long, address As
Long) As Long

Declare Function viUnmapAddress Lib "VISA32.DLL" Alias "#264" (ByVal vi
As Long) As Long

Declare Sub viPeek8 Lib "VISA32.DLL" Alias "#275" (ByVal vi As Long,
ByVal address As Long, val8 As Byte)

Declare Sub viPoke8 Lib "VISA32.DLL" Alias "#276" (ByVal vi As Long,
ByVal address As Long, ByVal val8 As Byte)

Declare Sub viPeek16 Lib "VISA32.DLL" Alias "#265" (ByVal vi As Long,
ByVal address As Long, value16 As Integer)

Declare Sub viPoke16 Lib "VISA32.DLL" Alias "#266" (ByVal vi As Long,
ByVal address As Long, ByVal value16 As Integer)

Declare Sub viPeek32 Lib "VISA32.DLL" Alias "#289" (ByVal vi As Long,
ByVal address As Long, val32 As Long)

Declare Sub viPoke32 Lib "VISA32.DLL" Alias "#290" (ByVal vi As Long,
ByVal address As Long, ByVal val32 As Long)

(continues)

Table 3.2.2. Visual Basic Bindings for VISA Operations for the WINNT
Framework (Continued)

Declare Function viMemAlloc Lib "VISA32.DLL" Alias "#291" (ByVal vi As
Long, ByVal memSize As Long, offset As Long) As Long

Declare Function viMemFree Lib "VISA32.DLL" Alias "#292" (ByVal vi As
Long, ByVal offset As Long) As Long

Declare Function viGpibControlREN Lib "VISA32.DLL" Alias "#208" (ByVal
vi As Long, ByVal mode As Integer) As Long

Declare Function viGpibControlATN Lib "VISA32.DLL" Alias "#210" (ByVal
vi As Long, ByVal mode As Integer) As Long

Declare Function viGpibSendIFC Lib "VISA32.DLL" Alias "#211" (ByVal vi
As Long) As Long

Declare Function viGpibCommand Lib "VISA32.DLL" Alias "#212" (ByVal vi
As Long, ByVal Buffer As String, ByVal count As Long, retCount As Long)
As Long

Declare Function viGpibPassControl Lib "VISA32.DLL" Alias "#213" (ByVal
vi As Long, ByVal primAddr As Integer, ByVal secAddr As Integer) As Long

Declare Function viVxiCommandQuery Lib "VISA32.DLL" Alias "#209" (ByVal
vi As Long, ByVal mode As Integer, ByVal devCmd As Long, devResponse As
Long) As Long

Declare Function viAssertUtilSignal Lib "VISA32.DLL" Alias "#214" (ByVal
vi As Long, ByVal line As Integer) As Long

Declare Function viAssertIntrSignal Lib "VISA32.DLL" Alias "#215" (ByVal
vi As Long, ByVal mode As Integer, ByVal statusID As Long) As Long

Declare Function viMapTrigger Lib "VISA32.DLL" Alias "#216" (ByVal vi As
Long, ByVal trigSrc As Integer, ByVal trigDest As Integer, ByVal mode As
Integer) As Long

Declare Function viUnmapTrigger Lib "VISA32.DLL" Alias "#217" (ByVal vi
As Long, ByVal trigSrc As Integer, ByVal trigDest As Integer) As Long

Declare Function viUsbControlOut Lib "VISA32.DLL" Alias "#293" (ByVal vi
As Long, ByVal bmRequestType As Integer, ByVal bRequest As Integer,
ByVal wValue As Integer, ByVal wIndex As Integer, ByVal wLength As
Integer, buf As Byte) As Long

Declare Function viUsbControlIn Lib "VISA32.DLL" Alias "#294" (ByVal vi
As Long, ByVal bmRequestType As Integer, ByVal bRequest As Integer,
ByVal wValue As Integer, ByVal wIndex As Integer, ByVal wLength As
Integer, buf As Byte, retCnt As Integer) As Long

**RULE 3.2.6**

> All definitions specified in Table 3.2.2 for the WINNT framework
> **SHALL** be explicit within the visa32.bas file.

### Operation Prototypes for WIN64 Framework

**RULE 3.2.7**

> Unless otherwise stated, all functions and operations specified in
> Table 3.2.1 **SHALL** be treated as fastcall when interfacing to the
> WIN64 Framework DLL.

**RULE 3.2.8**

> The operations viPrintf(), viScanf(), and viQueryf() **SHALL** be
> treated as fastcall when interfacing to the WIN64 Framework DLL.

**RULE 3.2.9**

> All pointers in Table 3.2.1 **SHALL** be treated as flat 64-bit
> pointers when interfacing to the WIN64 Framework DLL.

### Operation Prototypes for Linux Framework

**RULE 3.2.10**

> All pointers in Table 3.2.1 **SHALL** be treated as 64-bit pointers
> when interfacing to the Linux Framework libraries.

## Completion and Error Codes

Table 3.3.1 lists the Completion and Error codes defined for all
framework bindings.

<span id="_Toc135113892" class="anchor"></span>Table 3.3.1. Completion
and Error Codes

<table>
<colgroup>
<col style="width: 66%" />
<col style="width: 33%" />
</colgroup>
<tbody>
<tr class="odd">
<td><strong>Completion and Error Codes</strong></td>
<td><strong>Values</strong></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_SUCCESS</p>
</blockquote></td>
<td><blockquote>
<p>0</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_SUCCESS_EVENT_EN</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0002h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_SUCCESS_EVENT_DIS</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0003h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_SUCCESS_QUEUE_EMPTY</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0004h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_SUCCESS_TERM_CHAR</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0005h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_SUCCESS_MAX_CNT</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0006h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_SUCCESS_DEV_NPRESENT</p>
</blockquote></td>
<td><blockquote>
<p>3FFF007Dh</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_SUCCESS_TRIG_MAPPED</p>
</blockquote></td>
<td><blockquote>
<p>3FFF007Eh</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_SUCCESS_QUEUE_NEMPTY</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0080h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_SUCCESS_NCHAIN</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0098h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_SUCCESS_NESTED_SHARED</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0099h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_SUCCESS_NESTED_EXCLUSIVE</p>
</blockquote></td>
<td><blockquote>
<p>3FFF009Ah</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_SUCCESS_SYNC</p>
</blockquote></td>
<td><blockquote>
<p>3FFF009Bh</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_WARN_QUEUE_OVERFLOW</p>
</blockquote></td>
<td><blockquote>
<p>3FFF000Ch</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_WARN_CONFIG_NLOADED</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0077h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_WARN_NULL_OBJECT</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0082h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_WARN_NSUP_ATTR_STATE</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0084h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_WARN_UNKNOWN_STATUS</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0085h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_WARN_NSUP_BUF</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0088h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_WARN_EXT_FUNC_NIMPL</p>
</blockquote></td>
<td><blockquote>
<p>3FFF00A9h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_WARN_SERVER_CERT_UNTRUSTED</p>
</blockquote></td>
<td><blockquote>
<p>3FFF00F0h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_WARN_SERVER_CERT_INV_SUBJECT</p>
</blockquote></td>
<td><blockquote>
<p>3FFF00F1h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ERROR_SYSTEM_ERROR</p>
</blockquote></td>
<td><blockquote>
<p>BFFF0000h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ERROR_INV_OBJECT</p>
</blockquote></td>
<td><blockquote>
<p>BFFF000Eh</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ERROR_INV_SESSION</p>
</blockquote></td>
<td><blockquote>
<p>BFFF000Eh</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ERROR_RSRC_LOCKED</p>
</blockquote></td>
<td><blockquote>
<p>BFFF000Fh</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ERROR_INV_EXPR</p>
</blockquote></td>
<td><blockquote>
<p>BFFF0010h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ERROR_RSRC_NFOUND</p>
</blockquote></td>
<td><blockquote>
<p>BFFF0011h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ERROR_INV_RSRC_NAME</p>
</blockquote></td>
<td><blockquote>
<p>BFFF0012h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ERROR_INV_ACC_MODE</p>
</blockquote></td>
<td><blockquote>
<p>BFFF0013h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ERROR_TMO</p>
</blockquote></td>
<td><blockquote>
<p>BFFF0015h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ERROR_CLOSING_FAILED</p>
</blockquote></td>
<td><blockquote>
<p>BFFF0016h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ERROR_INV_DEGREE</p>
</blockquote></td>
<td><blockquote>
<p>BFFF001Bh</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ERROR_INV_JOB_ID</p>
</blockquote></td>
<td><blockquote>
<p>BFFF001Ch</p>
</blockquote></td>
</tr>
</tbody>
</table>

> (continues)

Table 3.3.1. Completion and Error Codes (Continued)

<table>
<colgroup>
<col style="width: 66%" />
<col style="width: 33%" />
</colgroup>
<tbody>
<tr class="odd">
<td><strong>Completion and Error Codes</strong></td>
<td><strong>Values</strong></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ERROR_NSUP_ATTR</p>
</blockquote></td>
<td><blockquote>
<p>BFFF001Dh</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ERROR_NSUP_ATTR_STATE</p>
</blockquote></td>
<td><blockquote>
<p>BFFF001Eh</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ERROR_ATTR_READONLY</p>
</blockquote></td>
<td><blockquote>
<p>BFFF001Fh</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ERROR_INV_LOCK_TYPE</p>
</blockquote></td>
<td><blockquote>
<p>BFFF0020h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ERROR_INV_ACCESS_KEY</p>
</blockquote></td>
<td><blockquote>
<p>BFFF0021h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ERROR_INV_EVENT</p>
</blockquote></td>
<td><blockquote>
<p>BFFF0026h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ERROR_INV_MECH</p>
</blockquote></td>
<td><blockquote>
<p>BFFF0027h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ERROR_HNDLR_NINSTALLED</p>
</blockquote></td>
<td><blockquote>
<p>BFFF0028h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ERROR_INV_HNDLR_REF</p>
</blockquote></td>
<td><blockquote>
<p>BFFF0029h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ERROR_INV_CONTEXT</p>
</blockquote></td>
<td><blockquote>
<p>BFFF002Ah</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ERROR_NENABLED</p>
</blockquote></td>
<td><blockquote>
<p>BFFF002Fh</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ERROR_ABORT</p>
</blockquote></td>
<td><blockquote>
<p>BFFF0030h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ERROR_RAW_WR_PROT_VIOL</p>
</blockquote></td>
<td><blockquote>
<p>BFFF0034h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ERROR_RAW_RD_PROT_VIOL</p>
</blockquote></td>
<td><blockquote>
<p>BFFF0035h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ERROR_OUTP_PROT_VIOL</p>
</blockquote></td>
<td><blockquote>
<p>BFFF0036h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ERROR_INP_PROT_VIOL</p>
</blockquote></td>
<td><blockquote>
<p>BFFF0037h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ERROR_BERR</p>
</blockquote></td>
<td><blockquote>
<p>BFFF0038h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ERROR_IN_PROGRESS</p>
</blockquote></td>
<td><blockquote>
<p>BFFF0039h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ERROR_INV_SETUP</p>
</blockquote></td>
<td><blockquote>
<p>BFFF003Ah</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ERROR_QUEUE_ERROR</p>
</blockquote></td>
<td><blockquote>
<p>BFFF003Bh</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ERROR_ALLOC</p>
</blockquote></td>
<td><blockquote>
<p>BFFF003Ch</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ERROR_INV_MASK</p>
</blockquote></td>
<td><blockquote>
<p>BFFF003Dh</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ERROR_IO</p>
</blockquote></td>
<td><blockquote>
<p>BFFF003Eh</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ERROR_INV_FMT</p>
</blockquote></td>
<td><blockquote>
<p>BFFF003Fh</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ERROR_NSUP_FMT</p>
</blockquote></td>
<td><blockquote>
<p>BFFF0041h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ERROR_LINE_IN_USE</p>
</blockquote></td>
<td><blockquote>
<p>BFFF0042h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ERROR_LINE_NRESERVED</p>
</blockquote></td>
<td><blockquote>
<p>BFFF0043h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ERROR_NSUP_MODE</p>
</blockquote></td>
<td><blockquote>
<p>BFFF0046h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ERROR_SRQ_NOCCURRED</p>
</blockquote></td>
<td><blockquote>
<p>BFFF004Ah</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ERROR_INV_SPACE</p>
</blockquote></td>
<td><blockquote>
<p>BFFF004Eh</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ERROR_INV_OFFSET</p>
</blockquote></td>
<td><blockquote>
<p>BFFF0051h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ERROR_INV_WIDTH</p>
</blockquote></td>
<td><blockquote>
<p>BFFF0052h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ERROR_NSUP_OFFSET</p>
</blockquote></td>
<td><blockquote>
<p>BFFF0054h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ERROR_NSUP_VAR_WIDTH</p>
</blockquote></td>
<td><blockquote>
<p>BFFF0055h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ERROR_WINDOW_NMAPPED</p>
</blockquote></td>
<td><blockquote>
<p>BFFF0057h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ERROR_RESP_PENDING</p>
</blockquote></td>
<td><blockquote>
<p>BFFF0059h</p>
</blockquote></td>
</tr>
</tbody>
</table>

> (continues)

Table 3.3.1. Completion and Error Codes (Continued)

<table>
<colgroup>
<col style="width: 66%" />
<col style="width: 33%" />
</colgroup>
<tbody>
<tr class="odd">
<td><strong>Completion and Error Codes</strong></td>
<td><strong>Values</strong></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ERROR_NLISTENERS</p>
</blockquote></td>
<td><blockquote>
<p>BFFF005Fh</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ERROR_NCIC</p>
</blockquote></td>
<td><blockquote>
<p>BFFF0060h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ERROR_NSYS_CNTLR</p>
</blockquote></td>
<td><blockquote>
<p>BFFF0061h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ERROR_NSUP_OPER</p>
</blockquote></td>
<td><blockquote>
<p>BFFF0067h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ERROR_INTR_PENDING</p>
</blockquote></td>
<td><blockquote>
<p>BFFF0068h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ERROR_ASRL_PARITY</p>
</blockquote></td>
<td><blockquote>
<p>BFFF006Ah</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ERROR_ASRL_FRAMING</p>
</blockquote></td>
<td><blockquote>
<p>BFFF006Bh</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ERROR_ASRL_OVERRUN</p>
</blockquote></td>
<td><blockquote>
<p>BFFF006Ch</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ERROR_TRIG_NMAPPED</p>
</blockquote></td>
<td><blockquote>
<p>BFFF006Eh</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ERROR_NSUP_ALIGN_OFFSET</p>
</blockquote></td>
<td><blockquote>
<p>BFFF0070h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ERROR_USER_BUF</p>
</blockquote></td>
<td><blockquote>
<p>BFFF0071h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ERROR_RSRC_BUSY</p>
</blockquote></td>
<td><blockquote>
<p>BFFF0072h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ERROR_NSUP_WIDTH</p>
</blockquote></td>
<td><blockquote>
<p>BFFF0076h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ERROR_INV_PARAMETER</p>
</blockquote></td>
<td><blockquote>
<p>BFFF0078h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ERROR_INV_PROT</p>
</blockquote></td>
<td><blockquote>
<p>BFFF0079h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ERROR_INV_SIZE</p>
</blockquote></td>
<td><blockquote>
<p>BFFF007Bh</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ERROR_WINDOW_MAPPED</p>
</blockquote></td>
<td><blockquote>
<p>BFFF0080h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ERROR_NIMPL_OPER</p>
</blockquote></td>
<td><blockquote>
<p>BFFF0081h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ERROR_INV_LENGTH</p>
</blockquote></td>
<td><blockquote>
<p>BFFF0083h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ERROR_INV_MODE</p>
</blockquote></td>
<td><blockquote>
<p>BFFF0091h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ERROR_SESN_NLOCKED</p>
</blockquote></td>
<td><blockquote>
<p>BFFF009Ch</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ERROR_MEM_NSHARED</p>
</blockquote></td>
<td><blockquote>
<p>BFFF009Dh</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ERROR_LIBRARY_NFOUND</p>
</blockquote></td>
<td><blockquote>
<p>BFFF009Eh</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ERROR_NSUP_INTR</p>
</blockquote></td>
<td><blockquote>
<p>BFFF009Fh</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ERROR_INV_LINE</p>
</blockquote></td>
<td><blockquote>
<p>BFFF00A0h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ERROR_FILE_ACCESS</p>
</blockquote></td>
<td><blockquote>
<p>BFFF00A1h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ERROR_FILE_IO</p>
</blockquote></td>
<td><blockquote>
<p>BFFF00A2h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ERROR_NSUP_LINE</p>
</blockquote></td>
<td><blockquote>
<p>BFFF00A3h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ERROR_NSUP_MECH</p>
</blockquote></td>
<td><blockquote>
<p>BFFF00A4h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ERROR_INTF_NUM_NCONFIG</p>
</blockquote></td>
<td><blockquote>
<p>BFFF00A5h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ERROR_CONN_LOST</p>
</blockquote></td>
<td><blockquote>
<p>BFFF00A6h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ERROR_NPERMISSION</p>
</blockquote></td>
<td><blockquote>
<p>BFFF00A8h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ERROR_SERVER_CERT</p>
</blockquote></td>
<td><blockquote>
<p>BFFF00B0h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ERROR_SERVER_CERT_UNTRUSTED</p>
</blockquote></td>
<td><blockquote>
<p>BFFF00B1h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ERROR_SERVER_CERT_EXPIRED</p>
</blockquote></td>
<td><blockquote>
<p>BFFF00B2h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ERROR_SERVER_CERT_REVOKED</p>
</blockquote></td>
<td><blockquote>
<p>BFFF00B3h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ERROR_SERVER_CERT_INV_SUBJECT</p>
</blockquote></td>
<td><blockquote>
<p>BFFF00B4h</p>
</blockquote></td>
</tr>
</tbody>
</table>

**RULE 3.3.1**

> All Completion and Error codes specified in Table 3.3.1 **SHALL** be
> present in the visa.h and visa32.bas files.

**RULE 3.3.2**

> The visa.h and visa32.bas files **SHALL** define all the Completion
> and Error codes to be the same bit pattern as those in Table 3.3.1.

**OBSERVATION 3.3.1**

> Some ANSI C compilers may generate warnings when comparing signed and
> unsigned values. Since hexadecimal constants with the most significant
> bit set may be treated as unsigned values, comparing a variable of
> type ViStatus to any of the error codes could generate a warning. To
> avoid this situation, it is valid to represent the values in a
> different way. One example is to use their decimal equivalent
> (signed), which would normally not generate a warning.

**OBSERVATION 3.3.2**

> Notice that all success and warning codes (Completion codes) have a
> value that is greater than or equal to 0, while all Error codes have a
> value that is less than 0. Therefore, an application determines
> whether an invocation of a given operation fails by checking to see
> whether the return value is *less than* 0 (as opposed to *not equal
> to* 0).

## Attribute Values

Table 3.4.1 shows the attribute values used for all framework bindings.

<span id="_Toc135113893" class="anchor"></span>Table 3.4.1. Attribute
Values

<table>
<colgroup>
<col style="width: 71%" />
<col style="width: 28%" />
</colgroup>
<tbody>
<tr class="odd">
<td><strong>Attribute Names</strong></td>
<td><strong>Values</strong></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_RSRC_CLASS</p>
</blockquote></td>
<td><blockquote>
<p>BFFF0001h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_RSRC_NAME</p>
</blockquote></td>
<td><blockquote>
<p>BFFF0002h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_RSRC_IMPL_VERSION</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0003h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_RSRC_LOCK_STATE</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0004h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_MAX_QUEUE_LENGTH</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0005h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_USER_DATA</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0007h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_FDC_CHNL</p>
</blockquote></td>
<td><blockquote>
<p>3FFF000Dh</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_FDC_MODE</p>
</blockquote></td>
<td><blockquote>
<p>3FFF000Fh</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_FDC_GEN_SIGNAL_EN</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0011h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_FDC_USE_PAIR</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0013h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_SEND_END_EN</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0016h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_TERMCHAR</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0018h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_TMO_VALUE</p>
</blockquote></td>
<td><blockquote>
<p>3FFF001Ah</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_GPIB_READDR_EN</p>
</blockquote></td>
<td><blockquote>
<p>3FFF001Bh</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_IO_PROT</p>
</blockquote></td>
<td><blockquote>
<p>3FFF001Ch</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_DMA_ALLOW_EN</p>
</blockquote></td>
<td><blockquote>
<p>3FFF001Eh</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_ASRL_BAUD</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0021h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_ASRL_DATA_BITS</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0022h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_ASRL_PARITY</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0023h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_ASRL_STOP_BITS</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0024h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_ASRL_FLOW_CNTRL</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0025h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_RD_BUF_OPER_MODE</p>
</blockquote></td>
<td><blockquote>
<p>3FFF002Ah</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_RD_BUF_SIZE</p>
</blockquote></td>
<td><blockquote>
<p>3FFF002Bh</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_WR_BUF_OPER_MODE</p>
</blockquote></td>
<td><blockquote>
<p>3FFF002Dh</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_WR_BUF_SIZE</p>
</blockquote></td>
<td><blockquote>
<p>3FFF002Eh</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_SUPPRESS_END_EN</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0036h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_TERMCHAR_EN</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0038h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_DEST_ACCESS_PRIV</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0039h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_DEST_BYTE_ORDER</p>
</blockquote></td>
<td><blockquote>
<p>3FFF003Ah</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_SRC_ACCESS_PRIV</p>
</blockquote></td>
<td><blockquote>
<p>3FFF003Ch</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_SRC_BYTE_ORDER</p>
</blockquote></td>
<td><blockquote>
<p>3FFF003Dh</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_SRC_INCREMENT</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0040h</p>
</blockquote></td>
</tr>
</tbody>
</table>

(continues)

Table 3.4.1. Attribute Values (Continued)

<table>
<colgroup>
<col style="width: 71%" />
<col style="width: 28%" />
</colgroup>
<tbody>
<tr class="odd">
<td><strong>Attribute Names</strong></td>
<td><strong>Values</strong></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_DEST_INCREMENT</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0041h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_WIN_ACCESS_PRIV</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0045h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_WIN_BYTE_ORDER</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0047h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_GPIB_ATN_STATE</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0057h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_GPIB_ADDR_STATE</p>
</blockquote></td>
<td><blockquote>
<p>3FFF005Ch</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_GPIB_CIC_STATE</p>
</blockquote></td>
<td><blockquote>
<p>3FFF005Eh</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_GPIB_NDAC_STATE</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0062h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_GPIB_SRQ_STATE</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0067h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_GPIB_SYS_CNTRL_STATE</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0068h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_GPIB_HS488_CBL_LEN</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0069h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_CMDR_LA</p>
</blockquote></td>
<td><blockquote>
<p>3FFF006Bh</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_VXI_DEV_CLASS</p>
</blockquote></td>
<td><blockquote>
<p>3FFF006Ch</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_MAINFRAME_LA</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0070h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_MANF_NAME</p>
</blockquote></td>
<td><blockquote>
<p>BFFF0072h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_MODEL_NAME</p>
</blockquote></td>
<td><blockquote>
<p>BFFF0077h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_VXI_VME_INTR_STATUS</p>
</blockquote></td>
<td><blockquote>
<p>3FFF008Bh</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_VXI_TRIG_STATUS</p>
</blockquote></td>
<td><blockquote>
<p>3FFF008Dh</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_VXI_VME_SYSFAIL_STATE</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0094h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_WIN_BASE_ADDR</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0098h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_WIN_SIZE</p>
</blockquote></td>
<td><blockquote>
<p>3FFF009Ah</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_ASRL_AVAIL_NUM</p>
</blockquote></td>
<td><blockquote>
<p>3FFF00ACh</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_MEM_BASE</p>
</blockquote></td>
<td><blockquote>
<p>3FFF00ADh</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_ASRL_CTS_STATE</p>
</blockquote></td>
<td><blockquote>
<p>3FFF00AEh</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_ASRL_DCD_STATE</p>
</blockquote></td>
<td><blockquote>
<p>3FFF00AFh</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_ASRL_DSR_STATE</p>
</blockquote></td>
<td><blockquote>
<p>3FFF00B1h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_ASRL_DTR_STATE</p>
</blockquote></td>
<td><blockquote>
<p>3FFF00B2h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_ASRL_END_IN</p>
</blockquote></td>
<td><blockquote>
<p>3FFF00B3h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_ASRL_END_OUT</p>
</blockquote></td>
<td><blockquote>
<p>3FFF00B4h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_ASRL_REPLACE_CHAR</p>
</blockquote></td>
<td><blockquote>
<p>3FFF00BEh</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_ASRL_RI_STATE</p>
</blockquote></td>
<td><blockquote>
<p>3FFF00BFh</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_ASRL_RTS_STATE</p>
</blockquote></td>
<td><blockquote>
<p>3FFF00C0h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_ASRL_XON_CHAR</p>
</blockquote></td>
<td><blockquote>
<p>3FFF00C1h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_ASRL_XOFF_CHAR</p>
</blockquote></td>
<td><blockquote>
<p>3FFF00C2h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_WIN_ACCESS</p>
</blockquote></td>
<td><blockquote>
<p>3FFF00C3h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_RM_SESSION</p>
</blockquote></td>
<td><blockquote>
<p>3FFF00C4h</p>
</blockquote></td>
</tr>
</tbody>
</table>

(continues)

Table 3.4.1. Attribute Values (Continued)

<table>
<colgroup>
<col style="width: 71%" />
<col style="width: 28%" />
</colgroup>
<tbody>
<tr class="odd">
<td><strong>Attribute Names</strong></td>
<td><strong>Values</strong></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_VXI_LA</p>
</blockquote></td>
<td><blockquote>
<p>3FFF00D5h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_MANF_ID</p>
</blockquote></td>
<td><blockquote>
<p>3FFF00D9h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_MEM_SIZE</p>
</blockquote></td>
<td><blockquote>
<p>3FFF00DDh</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_MEM_SPACE</p>
</blockquote></td>
<td><blockquote>
<p>3FFF00DEh</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_MODEL_CODE</p>
</blockquote></td>
<td><blockquote>
<p>3FFF00DFh</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_SLOT</p>
</blockquote></td>
<td><blockquote>
<p>3FFF00E8h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_INTF_INST_NAME</p>
</blockquote></td>
<td><blockquote>
<p>BFFF00E9h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_IMMEDIATE_SERV</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0100h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_INTF_PARENT_NUM</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0101h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_RSRC_SPEC_VERSION</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0170h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_INTF_TYPE</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0171h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_GPIB_PRIMARY_ADDR</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0172h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_GPIB_SECONDARY_ADDR</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0173h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_RSRC_MANF_NAME</p>
</blockquote></td>
<td><blockquote>
<p>BFFF0174h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_RSRC_MANF_ID</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0175h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_INTF_NUM</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0176h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_TRIG_ID</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0177h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_GPIB_REN_STATE</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0181h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_GPIB_UNADDR_EN</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0184h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_DEV_STATUS_BYTE</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0189h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_FILE_APPEND_EN</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0192h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_VXI_TRIG_SUPPORT</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0194h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_TCPIP_ADDR</p>
</blockquote></td>
<td><blockquote>
<p>BFFF0195h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_TCPIP_HOSTNAME</p>
</blockquote></td>
<td><blockquote>
<p>BFFF0196h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_TCPIP_PORT</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0197h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_TCPIP_DEVICE_NAME</p>
</blockquote></td>
<td><blockquote>
<p>BFFF0199h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_TCPIP_NODELAY</p>
</blockquote></td>
<td><blockquote>
<p>3FFF019Ah</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_TCPIP_KEEPALIVE</p>
</blockquote></td>
<td><blockquote>
<p>3FFF019Bh</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_4882_COMPLIANT</p>
</blockquote></td>
<td><blockquote>
<p>3FFF019Fh</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_USB_SERIAL_NUM</p>
</blockquote></td>
<td><blockquote>
<p>BFFF01A0h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_USB_INTFC_NUM</p>
</blockquote></td>
<td><blockquote>
<p>3FFF01A1h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_USB_PROTOCOL</p>
</blockquote></td>
<td><blockquote>
<p>3FFF01A7h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_USB_MAX_INTR_SIZE</p>
</blockquote></td>
<td><blockquote>
<p>3FFF01AFh</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_JOB_ID</p>
</blockquote></td>
<td><blockquote>
<p>3FFF4006h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_EVENT_TYPE</p>
</blockquote></td>
<td><blockquote>
<p>3FFF4010h</p>
</blockquote></td>
</tr>
</tbody>
</table>

(continues)

Table 3.4.1. Attribute Values (Continued)

<table>
<colgroup>
<col style="width: 71%" />
<col style="width: 28%" />
</colgroup>
<tbody>
<tr class="odd">
<td><strong>Attribute Names</strong></td>
<td><strong>Values</strong></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_SIGP_STATUS_ID</p>
</blockquote></td>
<td><blockquote>
<p>3FFF4011h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_RECV_TRIG_ID</p>
</blockquote></td>
<td><blockquote>
<p>3FFF4012h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_INTR_STATUS_ID</p>
</blockquote></td>
<td><blockquote>
<p>3FFF4023h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_STATUS</p>
</blockquote></td>
<td><blockquote>
<p>3FFF4025h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_RET_COUNT</p>
</blockquote></td>
<td><blockquote>
<p>3FFF4026h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_BUFFER</p>
</blockquote></td>
<td><blockquote>
<p>3FFF4027h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_RECV_INTR_LEVEL</p>
</blockquote></td>
<td><blockquote>
<p>3FFF4041h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_OPER_NAME</p>
</blockquote></td>
<td><blockquote>
<p>BFFF4042h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_GPIB_RECV_CIC_STATE</p>
</blockquote></td>
<td><blockquote>
<p>3FFF4193h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_RECV_TCPIP_ADDR</p>
</blockquote></td>
<td><blockquote>
<p>BFFF4198h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_USB_RECV_INTR_SIZE</p>
</blockquote></td>
<td><blockquote>
<p>3FFF41B0h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_USB_RECV_INTR_DATA</p>
</blockquote></td>
<td><blockquote>
<p>BFFF41B1h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_PXI_DEV_NUM</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0201h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_PXI_FUNC_NUM</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0202h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_PXI_BUS_NUM</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0205h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_PXI_CHASSIS</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0206h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_PXI_SLOTPATH</p>
</blockquote></td>
<td><blockquote>
<p>BFFF0207h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_PXI_SLOT_LBUS_LEFT</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0208h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_PXI_SLOT_LBUS_RIGHT</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0209h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_PXI_TRIG_BUS</p>
</blockquote></td>
<td><blockquote>
<p>3FFF020Ah</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_PXI_STAR_TRIG_BUS</p>
</blockquote></td>
<td><blockquote>
<p>3FFF020Bh</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_PXI_STAR_TRIG_LINE</p>
</blockquote></td>
<td><blockquote>
<p>3FFF020Ch</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_PXI_MEM_TYPE_BAR0</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0211h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_PXI_MEM_TYPE_BAR1</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0212h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_PXI_MEM_TYPE_BAR2</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0213h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_PXI_MEM_TYPE_BAR3</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0214h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_PXI_MEM_TYPE_BAR4</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0215h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_PXI_MEM_TYPE_BAR5</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0216h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_PXI_MEM_BASE_BAR0_32</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0221h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_PXI_MEM_BASE_BAR1_32</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0222h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_PXI_MEM_BASE_BAR2_32</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0223h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_PXI_MEM_BASE_BAR3_32</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0224h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_PXI_MEM_BASE_BAR4_32</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0225h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_PXI_MEM_BASE_BAR5_32</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0226h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_PXI_MEM_SIZE_BAR0_32</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0231h</p>
</blockquote></td>
</tr>
</tbody>
</table>

(continues)

Table 3.4.1. Attribute Values (Continued)

<table>
<colgroup>
<col style="width: 72%" />
<col style="width: 27%" />
</colgroup>
<tbody>
<tr class="odd">
<td><strong>Attribute Names</strong></td>
<td><strong>Values</strong></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_PXI_MEM_SIZE_BAR1_32</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0232h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_PXI_MEM_SIZE_BAR2_32</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0233h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_PXI_MEM_SIZE_BAR3_32</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0234h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_PXI_MEM_SIZE_BAR4_32</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0235h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_PXI_MEM_SIZE_BAR5_32</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0236h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_PXI_IS_EXPRESS</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0240h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_PXI_SLOT_LWIDTH</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0241h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_PXI_MAX_LWIDTH</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0242h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_PXI_ACTUAL_LWIDTH</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0243h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_PXI_DSTAR_BUS</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0244h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_PXI_DSTAR_SET</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0245h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_PXI_SLOT_WIDTH</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0247h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_PXI_SLOT_OFFSET</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0248h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_TCPIP_SERVER_CERT_ISSUER_NAME</p>
</blockquote></td>
<td><blockquote>
<p>BFFF0270h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_TCPIP_SERVER_CERT_SUBJECT_NAME</p>
</blockquote></td>
<td><blockquote>
<p>BFFF0271h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_TCPIP_SERVER_CERT_EXPIRATION_DATE</p>
</blockquote></td>
<td><blockquote>
<p>BFFF0272h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_TCPIP_SERVER_CERT_IS_PERPETUAL</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0273h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_TCPIP_SASL_MECHANISM</p>
</blockquote></td>
<td><blockquote>
<p>BFFF0274h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_TCPIP_TLS_CIPHER_SUITE</p>
</blockquote></td>
<td><blockquote>
<p>BFFF0275h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_TCPIP_SERVER_CERT</p>
</blockquote></td>
<td><blockquote>
<p>BFFF0276h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_TCPIP_SERVER_CERT_SIZE</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0277h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_TCPIP_HISLIP_OVERLAP_EN</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0300h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_TCPIP_HISLIP_VERSION</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0301h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_TCPIP_HISLIP_MAX_MESSAGE_KB</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0302h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_TCPIP_IS_HISLIP</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0303h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_TCPIP_HISLIP_ENCRYPTION_EN</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0304h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_PXI_RECV_INTR_SEQ</p>
</blockquote></td>
<td><blockquote>
<p>3FFF4240h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_PXI_RECV_INTR_DATA</p>
</blockquote></td>
<td><blockquote>
<p>3FFF4241h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_PXI_SRC_TRIG_BUS</p>
</blockquote></td>
<td><blockquote>
<p>3FFF020Dh</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_PXI_DEST_TRIG_BUS</p>
</blockquote></td>
<td><blockquote>
<p>3FFF020Eh</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_PXI_MEM_BASE_BAR0_64</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0228h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_PXI_MEM_BASE_BAR1_64</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0229h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_PXI_MEM_BASE_BAR2_64</p>
</blockquote></td>
<td><blockquote>
<p>3FFF022Ah</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_PXI_MEM_BASE_BAR3_64</p>
</blockquote></td>
<td><blockquote>
<p>3FFF022Bh</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_PXI_MEM_BASE_BAR4_64</p>
</blockquote></td>
<td><blockquote>
<p>3FFF022Ch</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_PXI_MEM_BASE_BAR5_64</p>
</blockquote></td>
<td><blockquote>
<p>3FFF022Dh</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_PXI_MEM_SIZE_BAR0_64</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0238h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_PXI_MEM_SIZE_BAR1_64</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0239h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_PXI_MEM_SIZE_BAR2_64</p>
</blockquote></td>
<td><blockquote>
<p>3FFF023Ah</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_PXI_MEM_SIZE_BAR3_64</p>
</blockquote></td>
<td><blockquote>
<p>3FFF023Bh</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_PXI_MEM_SIZE_BAR4_64</p>
</blockquote></td>
<td><blockquote>
<p>3FFF023Ch</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ATTR_PXI_MEM_SIZE_BAR5_64</p>
</blockquote></td>
<td><blockquote>
<p>3FFF023Dh</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ATTR_PXI_ALLOW_WRITE_COMBINE</p>
</blockquote></td>
<td><blockquote>
<p>3FFF0246h</p>
</blockquote></td>
</tr>
</tbody>
</table>

**RULE 3.4.1**

> All attribute codes specified in Table 3.4.1 **SHALL** appear in the
> visa.h and visa32.bas files.

**RULE 3.4.2**

> The visa.h and visa32.bas files **SHALL** define all the attribute
> codes to be the same bit pattern as those in Table 3.4.1.

##  Event Type Values

Table 3.5.1 shows the event type values used for all framework bindings.

<span id="_Toc135113894" class="anchor"></span>Table 3.5.1. Event Type
Values

<table>
<colgroup>
<col style="width: 63%" />
<col style="width: 36%" />
</colgroup>
<tbody>
<tr class="odd">
<td><strong>Attribute Names</strong></td>
<td><strong>Values</strong></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_EVENT_IO_COMPLETION</p>
</blockquote></td>
<td><blockquote>
<p>3FFF2009h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_EVENT_TRIG</p>
</blockquote></td>
<td><blockquote>
<p>BFFF200Ah</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_EVENT_SERVICE_REQ</p>
</blockquote></td>
<td><blockquote>
<p>3FFF200Bh</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_EVENT_CLEAR</p>
</blockquote></td>
<td><blockquote>
<p>3FFF200Dh</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_EVENT_EXCEPTION</p>
</blockquote></td>
<td><blockquote>
<p>BFFF200Eh</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_EVENT_GPIB_CIC</p>
</blockquote></td>
<td><blockquote>
<p>3FFF2012h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_EVENT_GPIB_TALK</p>
</blockquote></td>
<td><blockquote>
<p>3FFF2013h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_EVENT_GPIB_LISTEN</p>
</blockquote></td>
<td><blockquote>
<p>3FFF2014h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_EVENT_VXI_VME_SYSFAIL</p>
</blockquote></td>
<td><blockquote>
<p>3FFF201Dh</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_EVENT_VXI_VME_SYSRESET</p>
</blockquote></td>
<td><blockquote>
<p>3FFF201Eh</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_EVENT_VXI_SIGP</p>
</blockquote></td>
<td><blockquote>
<p>3FFF2020h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_EVENT_VXI_VME_INTR</p>
</blockquote></td>
<td><blockquote>
<p>BFFF2021h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_EVENT_TCPIP_CONNECT</p>
</blockquote></td>
<td><blockquote>
<p>3FFF2036h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_EVENT_USB_INTR</p>
</blockquote></td>
<td><blockquote>
<p>3FFF2037h</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_EVENT_PXI_INTR</p>
</blockquote></td>
<td><blockquote>
<p>3FFF2022h</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ALL_ENABLED_EVENTS</p>
</blockquote></td>
<td><blockquote>
<p>3FFF7FFFh</p>
</blockquote></td>
</tr>
</tbody>
</table>

**RULE 3.5.1**

> All event types specified in Table 3.5.1 **SHALL** appear in the
> visa.h and visa32.bas files.

**RULE 3.5.2**

> The visa.h and visa32.bas files **SHALL** define all the event types
> to be the same bit pattern as those in Table 3.5.1.

## Values and Ranges

Table 3.6.1 shows the values used in all framework bindings.

<span id="_Toc135113895" class="anchor"></span>Table 3.6.1. Values and
Ranges

<table style="width:100%;">
<colgroup>
<col style="width: 31%" />
<col style="width: 14%" />
<col style="width: 7%" />
<col style="width: 31%" />
<col style="width: 14%" />
</colgroup>
<tbody>
<tr class="odd">
<td><blockquote>
<p><strong>Name</strong></p>
</blockquote></td>
<td><strong>Value</strong></td>
<td></td>
<td><blockquote>
<p><strong>Name</strong></p>
</blockquote></td>
<td><strong>Value</strong></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_FIND_BUFLEN</p>
</blockquote></td>
<td>256</td>
<td></td>
<td><blockquote>
<p>VI_TRIG_TTL5</p>
</blockquote></td>
<td>5</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_NULL</p>
</blockquote></td>
<td>0</td>
<td></td>
<td><blockquote>
<p>VI_TRIG_TTL6</p>
</blockquote></td>
<td>6</td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_TRUE</p>
</blockquote></td>
<td>1</td>
<td></td>
<td><blockquote>
<p>VI_TRIG_TTL7</p>
</blockquote></td>
<td>7</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_FALSE</p>
</blockquote></td>
<td>0</td>
<td></td>
<td><blockquote>
<p>VI_TRIG_ECL0</p>
</blockquote></td>
<td>8</td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_INTF_GPIB</p>
</blockquote></td>
<td>1</td>
<td></td>
<td><blockquote>
<p>VI_TRIG_ECL1</p>
</blockquote></td>
<td>9</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_INTF_VXI</p>
</blockquote></td>
<td>2</td>
<td></td>
<td><blockquote>
<p>VI_TRIG_PANEL_IN</p>
</blockquote></td>
<td>27</td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_INTF_GPIB_VXI</p>
</blockquote></td>
<td>3</td>
<td></td>
<td><blockquote>
<p>VI_TRIG_PANEL_OUT</p>
</blockquote></td>
<td>28</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_INTF_ASRL</p>
</blockquote></td>
<td>4</td>
<td></td>
<td><blockquote>
<p>VI_TRIG_PROT_DEFAULT</p>
</blockquote></td>
<td>0</td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_INTF_TCPIP</p>
</blockquote></td>
<td>6</td>
<td></td>
<td><blockquote>
<p>VI_TRIG_PROT_ON</p>
</blockquote></td>
<td>1</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_NORMAL</p>
</blockquote></td>
<td>1</td>
<td></td>
<td><blockquote>
<p>VI_TRIG_PROT_OFF</p>
</blockquote></td>
<td>2</td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_FDC</p>
</blockquote></td>
<td>2</td>
<td></td>
<td><blockquote>
<p>VI_TRIG_PROT_SYNC</p>
</blockquote></td>
<td>5</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_HS488</p>
</blockquote></td>
<td>3</td>
<td></td>
<td><blockquote>
<p>VI_READ_BUF</p>
</blockquote></td>
<td>1</td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ASRL488</p>
</blockquote></td>
<td>4</td>
<td></td>
<td><blockquote>
<p>VI_WRITE_BUF</p>
</blockquote></td>
<td>2</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_FDC_NORMAL</p>
</blockquote></td>
<td>1</td>
<td></td>
<td><blockquote>
<p>VI_READ_BUF_DISCARD</p>
</blockquote></td>
<td>4</td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_FDC_STREAM</p>
</blockquote></td>
<td>2</td>
<td></td>
<td><blockquote>
<p>VI_WRITE_BUF_DISCARD</p>
</blockquote></td>
<td>8</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_A16_SPACE</p>
</blockquote></td>
<td>1</td>
<td></td>
<td><blockquote>
<p>VI_ASRL_IN_BUF</p>
</blockquote></td>
<td>16</td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_A24_SPACE</p>
</blockquote></td>
<td>2</td>
<td></td>
<td><blockquote>
<p>VI_ASRL_OUT_BUF</p>
</blockquote></td>
<td>32</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_A32_SPACE</p>
</blockquote></td>
<td>3</td>
<td></td>
<td><blockquote>
<p>VI_ASRL_IN_BUF_DISCARD</p>
</blockquote></td>
<td>64</td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_UNKNOWN_SLOT</p>
</blockquote></td>
<td>-1</td>
<td></td>
<td><blockquote>
<p>VI_ASRL_OUT_BUF_DISCARD</p>
</blockquote></td>
<td>128</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_UNKNOWN_LA</p>
</blockquote></td>
<td>-1</td>
<td></td>
<td><blockquote>
<p>VI_FLUSH_ON_ACCESS</p>
</blockquote></td>
<td>1</td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_UNKNOWN_LEVEL</p>
</blockquote></td>
<td>-1</td>
<td></td>
<td><blockquote>
<p>VI_FLUSH_WHEN_FULL</p>
</blockquote></td>
<td>2</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_QUEUE</p>
</blockquote></td>
<td>1</td>
<td></td>
<td><blockquote>
<p>VI_FLUSH_DISABLE</p>
</blockquote></td>
<td>3</td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_HNDLR</p>
</blockquote></td>
<td>2</td>
<td></td>
<td><blockquote>
<p>VI_NMAPPED</p>
</blockquote></td>
<td>1</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_SUSPEND_HNDLR</p>
</blockquote></td>
<td>4</td>
<td></td>
<td><blockquote>
<p>VI_USE_OPERS</p>
</blockquote></td>
<td>2</td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ALL_MECH</p>
</blockquote></td>
<td>FFFFh</td>
<td></td>
<td><blockquote>
<p>VI_DEREF_ADDR</p>
</blockquote></td>
<td>3</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ANY_HNDLR</p>
</blockquote></td>
<td>0</td>
<td></td>
<td><blockquote>
<p>VI_TMO_IMMEDIATE</p>
</blockquote></td>
<td>0</td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_TRIG_SW</p>
</blockquote></td>
<td>-1</td>
<td></td>
<td><blockquote>
<p>VI_TMO_INFINITE</p>
</blockquote></td>
<td>FFFFFFFFh</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_TRIG_TTL0</p>
</blockquote></td>
<td>0</td>
<td></td>
<td><blockquote>
<p>VI_NO_LOCK</p>
</blockquote></td>
<td>0</td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_TRIG_TTL1</p>
</blockquote></td>
<td>1</td>
<td></td>
<td><blockquote>
<p>VI_EXCLUSIVE_LOCK</p>
</blockquote></td>
<td>1</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_TRIG_TTL2</p>
</blockquote></td>
<td>2</td>
<td></td>
<td><blockquote>
<p>VI_SHARED_LOCK</p>
</blockquote></td>
<td>2</td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_TRIG_TTL3</p>
</blockquote></td>
<td>3</td>
<td></td>
<td><blockquote>
<p>VI_LOAD_CONFIG</p>
</blockquote></td>
<td>4</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_TRIG_TTL4</p>
</blockquote></td>
<td>4</td>
<td></td>
<td><blockquote>
<p>VI_NO_SEC_ADDR</p>
</blockquote></td>
<td>FFFFh</td>
</tr>
</tbody>
</table>

(continues)

Table 3.6.1. Values and Ranges (Continued)

<table style="width:100%;">
<colgroup>
<col style="width: 31%" />
<col style="width: 14%" />
<col style="width: 7%" />
<col style="width: 31%" />
<col style="width: 14%" />
</colgroup>
<tbody>
<tr class="odd">
<td><blockquote>
<p><strong>Name</strong></p>
</blockquote></td>
<td><strong>Value</strong></td>
<td></td>
<td><blockquote>
<p><strong>Name</strong></p>
</blockquote></td>
<td><strong>Value</strong></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ASRL_PAR_NONE</p>
</blockquote></td>
<td>0</td>
<td></td>
<td><blockquote>
<p>VI_DATA_PRIV</p>
</blockquote></td>
<td>0</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ASRL_PAR_ODD</p>
</blockquote></td>
<td>1</td>
<td></td>
<td><blockquote>
<p>VI_DATA_NPRIV</p>
</blockquote></td>
<td>1</td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ASRL_PAR_EVEN</p>
</blockquote></td>
<td>2</td>
<td></td>
<td><blockquote>
<p>VI_PROG_PRIV</p>
</blockquote></td>
<td>2</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ASRL_PAR_MARK</p>
</blockquote></td>
<td>3</td>
<td></td>
<td><blockquote>
<p>VI_PROG_NPRIV</p>
</blockquote></td>
<td>3</td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ASRL_PAR_SPACE</p>
</blockquote></td>
<td>4</td>
<td></td>
<td><blockquote>
<p>VI_BLCK_PRIV</p>
</blockquote></td>
<td>4</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ASRL_STOP_ONE</p>
</blockquote></td>
<td>10</td>
<td></td>
<td><blockquote>
<p>VI_BLCK_NPRIV</p>
</blockquote></td>
<td>5</td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ASRL_STOP_ONE5</p>
</blockquote></td>
<td>15</td>
<td></td>
<td><blockquote>
<p>VI_D64_PRIV</p>
</blockquote></td>
<td>6</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ASRL_STOP_TWO</p>
</blockquote></td>
<td>20</td>
<td></td>
<td><blockquote>
<p>VI_D64_NPRIV</p>
</blockquote></td>
<td>7</td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ASRL_FLOW_NONE</p>
</blockquote></td>
<td>0</td>
<td></td>
<td><blockquote>
<p>VI_LOCAL_SPACE</p>
</blockquote></td>
<td>0</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ASRL_FLOW_XON_XOFF</p>
</blockquote></td>
<td>1</td>
<td></td>
<td><blockquote>
<p>VI_GPIB_REN_DEASSERT</p>
</blockquote></td>
<td>0</td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ASRL_FLOW_RTS_CTS</p>
</blockquote></td>
<td>2</td>
<td></td>
<td><blockquote>
<p>VI_GPIB_REN_ASSERT</p>
</blockquote></td>
<td>1</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ASRL_FLOW_DTR_DSR</p>
</blockquote></td>
<td>4</td>
<td></td>
<td><blockquote>
<p>VI_GPIB_REN_DEASSERT_GTL</p>
</blockquote></td>
<td>2</td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ASRL_END_NONE</p>
</blockquote></td>
<td>0</td>
<td></td>
<td><blockquote>
<p>VI_GPIB_REN_ASSERT_ADDRESS</p>
</blockquote></td>
<td>3</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ASRL_END_LAST_BIT</p>
</blockquote></td>
<td>1</td>
<td></td>
<td><blockquote>
<p>VI_GPIB_REN_ASSERT_LLO</p>
</blockquote></td>
<td>4</td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ASRL_END_TERMCHAR</p>
</blockquote></td>
<td>2</td>
<td></td>
<td>VI_GPIB_REN_ASSERT_ADDRESS_LLO</td>
<td>5</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_ASRL_END_BREAK</p>
</blockquote></td>
<td>3</td>
<td></td>
<td><blockquote>
<p>VI_GPIB_REN_ADDRESS_GTL</p>
</blockquote></td>
<td>6</td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_BIG_ENDIAN</p>
</blockquote></td>
<td>0</td>
<td></td>
<td><blockquote>
<p>VI_VXI_CMD16</p>
</blockquote></td>
<td>0200h</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_LITTLE_ENDIAN</p>
</blockquote></td>
<td>1</td>
<td></td>
<td><blockquote>
<p>VI_VXI_CMD16_RESP16</p>
</blockquote></td>
<td>0202h</td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_WIDTH_8</p>
</blockquote></td>
<td>1</td>
<td></td>
<td><blockquote>
<p>VI_VXI_RESP16</p>
</blockquote></td>
<td>0002h</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_WIDTH_16</p>
</blockquote></td>
<td>2</td>
<td></td>
<td><blockquote>
<p>VI_VXI_CMD32</p>
</blockquote></td>
<td>0400h</td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_WIDTH_32</p>
</blockquote></td>
<td>4</td>
<td></td>
<td><blockquote>
<p>VI_VXI_CMD32_RESP16</p>
</blockquote></td>
<td>0402h</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_STATE_ASSERTED</p>
</blockquote></td>
<td>1</td>
<td></td>
<td><blockquote>
<p>VI_VXI_CMD32_RESP32</p>
</blockquote></td>
<td>0404h</td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_STATE_UNASSERTED</p>
</blockquote></td>
<td>0</td>
<td></td>
<td><blockquote>
<p>VI_VXI_RESP32</p>
</blockquote></td>
<td>0004h</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_STATE_UNKNOWN</p>
</blockquote></td>
<td>-1</td>
<td></td>
<td><blockquote>
<p>VI_GPIB_ATN_DEASSERT</p>
</blockquote></td>
<td>0</td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_GPIB_HS488_DISABLED</p>
</blockquote></td>
<td>0</td>
<td></td>
<td><blockquote>
<p>VI_GPIB_ATN_ASSERT</p>
</blockquote></td>
<td>1</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_GPIB_HS488_NIMPL</p>
</blockquote></td>
<td>-1</td>
<td></td>
<td>VI_GPIB_ATN_DEASSERT_HANDSHAKE</td>
<td>2</td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_VXI_CLASS_MEMORY</p>
</blockquote></td>
<td>0</td>
<td></td>
<td><blockquote>
<p>VI_GPIB_ATN_ASSERT_IMMEDIATE</p>
</blockquote></td>
<td>3</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_VXI_CLASS_EXTENDED</p>
</blockquote></td>
<td>1</td>
<td></td>
<td><blockquote>
<p>VI_ASSERT_SIGNAL</p>
</blockquote></td>
<td>-1</td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_VXI_CLASS_MESSAGE</p>
</blockquote></td>
<td>2</td>
<td></td>
<td><blockquote>
<p>VI_ASSERT_USE_ASSIGNED</p>
</blockquote></td>
<td>0</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_VXI_CLASS_REGISTER</p>
</blockquote></td>
<td>3</td>
<td></td>
<td><blockquote>
<p>VI_ASSERT_IRQ1</p>
</blockquote></td>
<td>1</td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_VXI_CLASS_OTHER</p>
</blockquote></td>
<td>4</td>
<td></td>
<td><blockquote>
<p>VI_ASSERT_IRQ2</p>
</blockquote></td>
<td>2</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_UTIL_ASSERT_SYSRESET</p>
</blockquote></td>
<td>1</td>
<td></td>
<td><blockquote>
<p>VI_ASSERT_IRQ3</p>
</blockquote></td>
<td>3</td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_UTIL_ASSERT_SYSFAIL</p>
</blockquote></td>
<td>2</td>
<td></td>
<td><blockquote>
<p>VI_ASSERT_IRQ4</p>
</blockquote></td>
<td>4</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_UTIL_DEASSERT_SYSFAIL</p>
</blockquote></td>
<td>3</td>
<td></td>
<td><blockquote>
<p>VI_ASSERT_IRQ5</p>
</blockquote></td>
<td>5</td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_TRIG_ALL</p>
</blockquote></td>
<td>-2</td>
<td></td>
<td><blockquote>
<p>VI_ASSERT_IRQ6</p>
</blockquote></td>
<td>6</td>
</tr>
</tbody>
</table>

(continues)

**  
**Table 3.6.1. Values and Ranges (Continued)

<table style="width:100%;">
<colgroup>
<col style="width: 31%" />
<col style="width: 14%" />
<col style="width: 7%" />
<col style="width: 31%" />
<col style="width: 14%" />
</colgroup>
<tbody>
<tr class="odd">
<td><blockquote>
<p><strong>Name</strong></p>
</blockquote></td>
<td><strong>Value</strong></td>
<td></td>
<td><blockquote>
<p><strong>Name</strong></p>
</blockquote></td>
<td><strong>Value</strong></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_ASSERT_IRQ7</p>
</blockquote></td>
<td>7</td>
<td></td>
<td><blockquote>
<p>VI_IO_IN_BUF</p>
</blockquote></td>
<td>16</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_GPIB_UNADDRESSED</p>
</blockquote></td>
<td>0</td>
<td></td>
<td><blockquote>
<p>VI_IO_OUT_BUF</p>
</blockquote></td>
<td>32</td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_GPIB_TALKER</p>
</blockquote></td>
<td>1</td>
<td></td>
<td><blockquote>
<p>VI_IO_IN_BUF_DISCARD</p>
</blockquote></td>
<td>64</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_GPIB_LISTENER</p>
</blockquote></td>
<td>2</td>
<td></td>
<td><blockquote>
<p>VI_IO_OUT_BUF_DISCARD</p>
</blockquote></td>
<td>128</td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_INTF_USB</p>
</blockquote></td>
<td>7</td>
<td></td>
<td><blockquote>
<p>VI_PROT_NORMAL</p>
</blockquote></td>
<td>1</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_PROT_FDC</p>
</blockquote></td>
<td>2</td>
<td></td>
<td><blockquote>
<p>VI_PROT_HS488</p>
</blockquote></td>
<td>3</td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_PROT_4882_STRS</p>
</blockquote></td>
<td>4</td>
<td></td>
<td><blockquote>
<p>VI_PROT_USBTMC_VENDOR</p>
</blockquote></td>
<td>5</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_OPAQUE_SPACE</p>
</blockquote></td>
<td>FFFFh</td>
<td></td>
<td><blockquote>
<p>VI_UNKNOWN_CHASSIS</p>
</blockquote></td>
<td>-1</td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_INTF_PXI</p>
</blockquote></td>
<td>5</td>
<td></td>
<td><blockquote>
<p>VI_UNKNOWN_TRIG</p>
</blockquote></td>
<td>-1</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_PXI_ALLOC_SPACE</p>
</blockquote></td>
<td>9</td>
<td></td>
<td><blockquote>
<p>VI_PXI_LBUS_STAR_TRIG_BUS_0</p>
</blockquote></td>
<td>1000</td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_PXI_CFG_SPACE</p>
</blockquote></td>
<td>10</td>
<td></td>
<td><blockquote>
<p>VI_PXI_LBUS_STAR_TRIG_BUS_1</p>
</blockquote></td>
<td>1001</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_PXI_BAR0_SPACE</p>
</blockquote></td>
<td>11</td>
<td></td>
<td><blockquote>
<p>VI_PXI_LBUS_STAR_TRIG_BUS_2</p>
</blockquote></td>
<td>1002</td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_PXI_BAR1_SPACE</p>
</blockquote></td>
<td>12</td>
<td></td>
<td><blockquote>
<p>VI_PXI_LBUS_STAR_TRIG_BUS_3</p>
</blockquote></td>
<td>1003</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_PXI_BAR2_SPACE</p>
</blockquote></td>
<td>13</td>
<td></td>
<td><blockquote>
<p>VI_PXI_LBUS_STAR_TRIG_BUS_4</p>
</blockquote></td>
<td>1004</td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_PXI_BAR3_SPACE</p>
</blockquote></td>
<td>14</td>
<td></td>
<td><blockquote>
<p>VI_PXI_LBUS_STAR_TRIG_BUS_5</p>
</blockquote></td>
<td>1005</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_PXI_BAR4_SPACE</p>
</blockquote></td>
<td>15</td>
<td></td>
<td><blockquote>
<p>VI_PXI_LBUS_STAR_TRIG_BUS_6</p>
</blockquote></td>
<td>1006</td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_PXI_BAR5_SPACE</p>
</blockquote></td>
<td>16</td>
<td></td>
<td><blockquote>
<p>VI_PXI_LBUS_STAR_TRIG_BUS_7</p>
</blockquote></td>
<td>1007</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_PXI_ADDR_NONE</p>
</blockquote></td>
<td>0</td>
<td></td>
<td><blockquote>
<p>VI_PXI_LBUS_STAR_TRIG_BUS_8</p>
</blockquote></td>
<td>1008</td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_PXI_ADDR_MEM</p>
</blockquote></td>
<td>1</td>
<td></td>
<td><blockquote>
<p>VI_PXI_LBUS_STAR_TRIG_BUS_9</p>
</blockquote></td>
<td>1009</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_PXI_ADDR_IO</p>
</blockquote></td>
<td>2</td>
<td></td>
<td><blockquote>
<p>VI_PXI_STAR_TRIG_CONTROLLER</p>
</blockquote></td>
<td>1413</td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_PXI_ADDR_CFG</p>
</blockquote></td>
<td>3</td>
<td></td>
<td><blockquote>
<p>VI_TRIG_PROT_RESERVE</p>
</blockquote></td>
<td>6</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_A64_SPACE</p>
</blockquote></td>
<td>4</td>
<td></td>
<td><blockquote>
<p>VI_TRIG_PROT_UNRESERVE</p>
</blockquote></td>
<td>7</td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_WIDTH_64</p>
</blockquote></td>
<td>8</td>
<td></td>
<td><blockquote>
<p>VI_TRIG_ECL2</p>
</blockquote></td>
<td>10</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_TRIG_ECL3</p>
</blockquote></td>
<td>11</td>
<td></td>
<td><blockquote>
<p>VI_TRIG_ECL4</p>
</blockquote></td>
<td>12</td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_TRIG_ECL5</p>
</blockquote></td>
<td>13</td>
<td></td>
<td><blockquote>
<p>VI_TRIG_STAR_SLOT1</p>
</blockquote></td>
<td>14</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_TRIG_STAR_SLOT2</p>
</blockquote></td>
<td>15</td>
<td></td>
<td><blockquote>
<p>VI_TRIG_STAR_SLOT3</p>
</blockquote></td>
<td>16</td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_TRIG_STAR_SLOT4</p>
</blockquote></td>
<td>17</td>
<td></td>
<td><blockquote>
<p>VI_TRIG_STAR_SLOT5</p>
</blockquote></td>
<td>18</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_TRIG_STAR_SLOT6</p>
</blockquote></td>
<td>19</td>
<td></td>
<td><blockquote>
<p>VI_TRIG_STAR_SLOT7</p>
</blockquote></td>
<td>20</td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_TRIG_STAR_SLOT8</p>
</blockquote></td>
<td>21</td>
<td></td>
<td><blockquote>
<p>VI_TRIG_STAR_SLOT9</p>
</blockquote></td>
<td>22</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_TRIG_STAR_SLOT10</p>
</blockquote></td>
<td>23</td>
<td></td>
<td><blockquote>
<p>VI_TRIG_STAR_SLOT11</p>
</blockquote></td>
<td>24</td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_TRIG_STAR_SLOT12</p>
</blockquote></td>
<td>25</td>
<td></td>
<td><blockquote>
<p>VI_TRIG_STAR_INSTR</p>
</blockquote></td>
<td>26</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_TRIG_STAR_VXI0</p>
</blockquote></td>
<td>29</td>
<td></td>
<td><blockquote>
<p>VI_TRIG_STAR_VXI1</p>
</blockquote></td>
<td>30</td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_TRIG_STAR_VXI2</p>
</blockquote></td>
<td>31</td>
<td></td>
<td><blockquote>
<p>VI_D64_2EVME</p>
</blockquote></td>
<td>8</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_D64_SST160</p>
</blockquote></td>
<td>9</td>
<td></td>
<td><blockquote>
<p>VI_D64_SST267</p>
</blockquote></td>
<td>10</td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_D64_SST320</p>
</blockquote></td>
<td>11</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>

Table 3.6.1. Values and Ranges (Continued)

<table style="width:100%;">
<colgroup>
<col style="width: 31%" />
<col style="width: 14%" />
<col style="width: 7%" />
<col style="width: 31%" />
<col style="width: 14%" />
</colgroup>
<tbody>
<tr class="odd">
<td><blockquote>
<p><strong>Name</strong></p>
</blockquote></td>
<td><strong>Value</strong></td>
<td></td>
<td><blockquote>
<p><strong>Name</strong></p>
</blockquote></td>
<td><strong>Value</strong></td>
</tr>
<tr class="even">
<td><blockquote>
<p>VI_TRIG_TTL8</p>
</blockquote></td>
<td>32</td>
<td></td>
<td><blockquote>
<p>VI_TRIG_TTL10</p>
</blockquote></td>
<td>34</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>VI_TRIG_TTL9</p>
</blockquote></td>
<td>33</td>
<td></td>
<td><blockquote>
<p>VI_TRIG_TTL11</p>
</blockquote></td>
<td>35</td>
</tr>
</tbody>
</table>

**RULE 3.6.1**

> All values and ranges specified in Table 3.6.1 **SHALL** appear in the
> visa.h file.

**RULE 3.6.2**

> All values and ranges specified in Table 3.6.1 as of version 5.0 of
> this specification **SHALL** appear in the visa32.bas file.

**OBSERVATION 3.6.1**

> The level of Visual Basic support has been frozen as of the 5.0
> specification.

**RULE 3.6.3**

> The visa.h and visa32.bas files **SHALL** define all the values and
> ranges to be the same bit pattern as those in Table 3.6.1.

**RULE 3.6.4**

> The range of the attribute VI_ATTR_USER_DATA **SHALL** be 0 to
> FFFFFFFFh.

## Library Requirements

These sections discuss issues with the framework libraries and show the
procedure definition exports for all framework bindings.

**RULE 3.7.1**

> The library containing VISA **SHALL** be dynamically loadable.

### Library Requirements for WINNT and WIN64 Frameworks

Table 3.7.1 shows the procedure definition exports for the WINNT and
WIN64 Frameworks.

<span id="_Toc135113896" class="anchor"></span>Table 3.7.1. Procedure
Definition Exports for the WINNT and WIN64 Frameworks

<table>
<colgroup>
<col style="width: 30%" />
<col style="width: 18%" />
<col style="width: 7%" />
<col style="width: 25%" />
<col style="width: 18%" />
</colgroup>
<tbody>
<tr class="odd">
<td><blockquote>
<p><strong>Entry Point</strong></p>
</blockquote></td>
<td><strong>Ordinal Number</strong></td>
<td></td>
<td><blockquote>
<p><strong>Entry Point</strong></p>
</blockquote></td>
<td><strong>Ordinal Number</strong></td>
</tr>
<tr class="even">
<td><blockquote>
<p>viGetDefaultRM</p>
</blockquote></td>
<td>128</td>
<td></td>
<td><blockquote>
<p>viClose</p>
</blockquote></td>
<td>132</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>viOpenDefaultRM</p>
</blockquote></td>
<td>141</td>
<td></td>
<td><blockquote>
<p>viGetAttribute</p>
</blockquote></td>
<td>133</td>
</tr>
<tr class="even">
<td><blockquote>
<p>viFindRsrc</p>
</blockquote></td>
<td>129</td>
<td></td>
<td><blockquote>
<p>viSetAttribute</p>
</blockquote></td>
<td>134</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>viFindNext</p>
</blockquote></td>
<td>130</td>
<td></td>
<td><blockquote>
<p>viStatusDesc</p>
</blockquote></td>
<td>142</td>
</tr>
<tr class="even">
<td><blockquote>
<p>viOpen</p>
</blockquote></td>
<td>131</td>
<td></td>
<td><blockquote>
<p>viTerminate</p>
</blockquote></td>
<td>143</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>viLock</p>
</blockquote></td>
<td>144</td>
<td></td>
<td><blockquote>
<p>viReadSTB</p>
</blockquote></td>
<td>259</td>
</tr>
<tr class="even">
<td><blockquote>
<p>viUnlock</p>
</blockquote></td>
<td>145</td>
<td></td>
<td><blockquote>
<p>viClear</p>
</blockquote></td>
<td>260</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>viEnableEvent</p>
</blockquote></td>
<td>135</td>
<td></td>
<td><blockquote>
<p>viSetBuf</p>
</blockquote></td>
<td>267</td>
</tr>
<tr class="even">
<td><blockquote>
<p>viDisableEvent</p>
</blockquote></td>
<td>136</td>
<td></td>
<td><blockquote>
<p>viFlush</p>
</blockquote></td>
<td>268</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>viDiscardEvents</p>
</blockquote></td>
<td>137</td>
<td></td>
<td><blockquote>
<p>viPrintf</p>
</blockquote></td>
<td>269</td>
</tr>
<tr class="even">
<td><blockquote>
<p>viWaitOnEvent</p>
</blockquote></td>
<td>138</td>
<td></td>
<td><blockquote>
<p>viVPrintf</p>
</blockquote></td>
<td>270</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>viInstallHandler</p>
</blockquote></td>
<td>139</td>
<td></td>
<td><blockquote>
<p>viScanf</p>
</blockquote></td>
<td>271</td>
</tr>
<tr class="even">
<td><blockquote>
<p>viUninstallHandler</p>
</blockquote></td>
<td>140</td>
<td></td>
<td><blockquote>
<p>viVScanf</p>
</blockquote></td>
<td>272</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>viMove</p>
</blockquote></td>
<td>200</td>
<td></td>
<td><blockquote>
<p>viQueryf</p>
</blockquote></td>
<td>279</td>
</tr>
<tr class="even">
<td><blockquote>
<p>viMoveAsync</p>
</blockquote></td>
<td>201</td>
<td></td>
<td><blockquote>
<p>viVQueryf</p>
</blockquote></td>
<td>280</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>viBufWrite</p>
</blockquote></td>
<td>202</td>
<td></td>
<td><blockquote>
<p>viIn8</p>
</blockquote></td>
<td>273</td>
</tr>
<tr class="even">
<td><blockquote>
<p>viBufRead</p>
</blockquote></td>
<td>203</td>
<td></td>
<td><blockquote>
<p>viOut8</p>
</blockquote></td>
<td>274</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>viSPrintf</p>
</blockquote></td>
<td>204</td>
<td></td>
<td><blockquote>
<p>viIn16</p>
</blockquote></td>
<td>261</td>
</tr>
<tr class="even">
<td><blockquote>
<p>viVSPrintf</p>
</blockquote></td>
<td>205</td>
<td></td>
<td><blockquote>
<p>viOut16</p>
</blockquote></td>
<td>262</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>viSScanf</p>
</blockquote></td>
<td>206</td>
<td></td>
<td><blockquote>
<p>viIn32</p>
</blockquote></td>
<td>281</td>
</tr>
<tr class="even">
<td><blockquote>
<p>viVSScanf</p>
</blockquote></td>
<td>207</td>
<td></td>
<td><blockquote>
<p>viOut32</p>
</blockquote></td>
<td>282</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>viGpibControlREN</p>
</blockquote></td>
<td>208</td>
<td></td>
<td><blockquote>
<p>viMoveIn8</p>
</blockquote></td>
<td>283</td>
</tr>
<tr class="even">
<td><blockquote>
<p>viVxiCommandQuery</p>
</blockquote></td>
<td>209</td>
<td></td>
<td><blockquote>
<p>viMoveOut8</p>
</blockquote></td>
<td>284</td>
</tr>
</tbody>
</table>

(continues)

Table 3.7.1. Procedure Definition Exports for the WINNT and WIN64
Frameworks (Continued)

<table>
<colgroup>
<col style="width: 30%" />
<col style="width: 18%" />
<col style="width: 7%" />
<col style="width: 25%" />
<col style="width: 18%" />
</colgroup>
<tbody>
<tr class="odd">
<td><blockquote>
<p><strong>Entry Point</strong></p>
</blockquote></td>
<td><strong>Ordinal Number</strong></td>
<td></td>
<td><blockquote>
<p><strong>Entry Point</strong></p>
</blockquote></td>
<td><strong>Ordinal Number</strong></td>
</tr>
<tr class="even">
<td><blockquote>
<p>viRead</p>
</blockquote></td>
<td>256</td>
<td></td>
<td><blockquote>
<p>viMoveIn16</p>
</blockquote></td>
<td>285</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>viReadAsync</p>
</blockquote></td>
<td>277</td>
<td></td>
<td><blockquote>
<p>viMoveOut16</p>
</blockquote></td>
<td>286</td>
</tr>
<tr class="even">
<td><blockquote>
<p>viWrite</p>
</blockquote></td>
<td>257</td>
<td></td>
<td><blockquote>
<p>viMoveIn32</p>
</blockquote></td>
<td>287</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>viWriteAsync</p>
</blockquote></td>
<td>278</td>
<td></td>
<td><blockquote>
<p>viMoveOut32</p>
</blockquote></td>
<td>288</td>
</tr>
<tr class="even">
<td><blockquote>
<p>viAssertTrigger</p>
</blockquote></td>
<td>258</td>
<td></td>
<td><blockquote>
<p>viPeek8</p>
</blockquote></td>
<td>275</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>viMapAddress</p>
</blockquote></td>
<td>263</td>
<td></td>
<td><blockquote>
<p>viPoke8</p>
</blockquote></td>
<td>276</td>
</tr>
<tr class="even">
<td><blockquote>
<p>viUnmapAddress</p>
</blockquote></td>
<td>264</td>
<td></td>
<td><blockquote>
<p>viPeek16</p>
</blockquote></td>
<td>265</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>viMemAlloc</p>
</blockquote></td>
<td>291</td>
<td></td>
<td><blockquote>
<p>viPoke16</p>
</blockquote></td>
<td>266</td>
</tr>
<tr class="even">
<td><blockquote>
<p>viMemFree</p>
</blockquote></td>
<td>292</td>
<td></td>
<td><blockquote>
<p>viPeek32</p>
</blockquote></td>
<td>289</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>viGpibControlATN</p>
</blockquote></td>
<td>210</td>
<td></td>
<td><blockquote>
<p>viPoke32</p>
</blockquote></td>
<td>290</td>
</tr>
<tr class="even">
<td><blockquote>
<p>viGpibSendIFC</p>
</blockquote></td>
<td>211</td>
<td></td>
<td><blockquote>
<p>viParseRsrc</p>
</blockquote></td>
<td>146</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>viGpibCommand</p>
</blockquote></td>
<td>212</td>
<td></td>
<td><blockquote>
<p>viMapTrigger</p>
</blockquote></td>
<td>216</td>
</tr>
<tr class="even">
<td><blockquote>
<p>viGpibPassControl</p>
</blockquote></td>
<td>213</td>
<td></td>
<td><blockquote>
<p>viUnmapTrigger</p>
</blockquote></td>
<td>217</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>viAssertUtilSignal</p>
</blockquote></td>
<td>214</td>
<td></td>
<td><blockquote>
<p>viWriteFromFile</p>
</blockquote></td>
<td>218</td>
</tr>
<tr class="even">
<td><blockquote>
<p>viAssertIntrSignal</p>
</blockquote></td>
<td>215</td>
<td></td>
<td><blockquote>
<p>viReadToFile</p>
</blockquote></td>
<td>219</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>viParseRsrcEx</p>
</blockquote></td>
<td>147</td>
<td></td>
<td><blockquote>
<p>viUsbControlOut</p>
</blockquote></td>
<td>293</td>
</tr>
<tr class="even">
<td><blockquote>
<p>viUsbControlIn</p>
</blockquote></td>
<td>294</td>
<td></td>
<td><blockquote>
<p>viIn64</p>
</blockquote></td>
<td>220</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>viOut64</p>
</blockquote></td>
<td>221</td>
<td></td>
<td><blockquote>
<p>viIn8Ex</p>
</blockquote></td>
<td>222</td>
</tr>
<tr class="even">
<td><blockquote>
<p>viOut8Ex</p>
</blockquote></td>
<td>223</td>
<td></td>
<td><blockquote>
<p>viIn16Ex</p>
</blockquote></td>
<td>224</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>viOut16Ex</p>
</blockquote></td>
<td>225</td>
<td></td>
<td><blockquote>
<p>viIn32Ex</p>
</blockquote></td>
<td>226</td>
</tr>
<tr class="even">
<td><blockquote>
<p>viOut32Ex</p>
</blockquote></td>
<td>227</td>
<td></td>
<td><blockquote>
<p>viIn64Ex</p>
</blockquote></td>
<td>228</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>viOut64Ex</p>
</blockquote></td>
<td>229</td>
<td></td>
<td><blockquote>
<p>viMoveIn64</p>
</blockquote></td>
<td>230</td>
</tr>
<tr class="even">
<td><blockquote>
<p>viMoveOut64</p>
</blockquote></td>
<td>231</td>
<td></td>
<td><blockquote>
<p>viMoveIn8Ex</p>
</blockquote></td>
<td>232</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>viMoveOut8Ex</p>
</blockquote></td>
<td>233</td>
<td></td>
<td><blockquote>
<p>viMoveIn16Ex</p>
</blockquote></td>
<td>234</td>
</tr>
<tr class="even">
<td><blockquote>
<p>viMoveOut16Ex</p>
</blockquote></td>
<td>235</td>
<td></td>
<td><blockquote>
<p>viMoveIn32Ex</p>
</blockquote></td>
<td>236</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>viMoveOut32Ex</p>
</blockquote></td>
<td>237</td>
<td></td>
<td><blockquote>
<p>viMoveIn64Ex</p>
</blockquote></td>
<td>238</td>
</tr>
<tr class="even">
<td><blockquote>
<p>viMoveOut64Ex</p>
</blockquote></td>
<td>239</td>
<td></td>
<td><blockquote>
<p>viMoveEx</p>
</blockquote></td>
<td>240</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>viMoveAsyncEx</p>
</blockquote></td>
<td>241</td>
<td></td>
<td><blockquote>
<p>viMapAddressEx</p>
</blockquote></td>
<td>242</td>
</tr>
<tr class="even">
<td><blockquote>
<p>viMemAllocEx</p>
</blockquote></td>
<td>243</td>
<td></td>
<td><blockquote>
<p>viMemFreeEx</p>
</blockquote></td>
<td>244</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>viPeek64</p>
</blockquote></td>
<td>245</td>
<td></td>
<td><blockquote>
<p>viPoke64</p>
</blockquote></td>
<td>246</td>
</tr>
<tr class="even">
<td><blockquote>
<p>viPxiReserveTriggers</p>
</blockquote></td>
<td>295</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>

**RULE 3.7.2**

> The WINNT Framework DLL **SHALL** be named visa32.dll.

**RULE 3.7.3**

> The WINNT Framework DLL **SHALL** be a 32-bit DLL.

**RULE 3.7.4**

> The WINNT Framework DLL **SHALL** use the exports in the procedure
> definition file (visa32.def file) specified in Table 3.7.1.

**RULE 3.7.5**

> The WIN64 Framework DLL **SHALL** be named visa64.dll.

**RULE 3.7.6**

> The WIN64 Framework DLL **SHALL** be a 64-bit DLL.

**RULE 3.7.7**

> The WIN64 Framework DLL **SHALL** use the exports in the procedure
> definition file (visa64.def file) specified in Table 3.7.1.

**OBSERVATION 3.7.1**

> The location where the VISA library is installed is specified in
> VPP-6.

### Library Requirements for the Linux Framework

Procedure definition exports are not used for the Linux Framework.

## Miscellaneous

**RULE 3.8.1**

> Every VISA 7.1 implementation **SHALL** provide the following \#define
> in the visa.h file:  
>   
> \#define VI_SPEC_VERSION (0x00700100UL)

**RULE 3.8.2**

> Every VISA 5.0 or higher implementation **SHALL** provide the
> following constant in the visa32.bas file:  
>   
> Global Const VI_SPEC_VERSION = &H00500000&

**OBSERVATION 3.8.1**

> The level of Visual Basic support has been frozen as of the 5.0
> specification.

**RULE 3.8.3**

> The default contents (with no user-defined macros enabled) of the
> compiled or interpreted versions of the visatype.h, visa.h, and
> visa32.bas files **SHALL** be exactly the same as the compiled or
> interpreted versions of the corresponding files listed in Appendix A,
> *Implementation Files*, of this document.

**PERMISSION 3.8.1**

> A vendor **MAY** provide conditionally compiled or interpreted
> extensions to the visatype.h, visa.h, and visa32.bas files listed in
> Appendix A, *Implementation Files*, of this document.

**PERMISSION 3.8.2**

> Any vendor-specific extension to the visatype.h, visa.h, and
> visa32.bas files **MAY** be either binary compatible or
> non-interoperable.

**RULE 3.8.4**

> Binary-compatible vendor-specific extensions **SHALL** be enabled via
> a user-defined macro of the form PREFIX\_\<extension\>.

**RULE 3.8.5**

> Non-interoperable vendor-specific extensions **SHALL** be enabled via
> a user-defined macro of the form PREFIX_NONINTEROP\_\<extension\>.

**RULE 3.8.6**

> The PREFIX used in Rules 3.8.4 and 3.8.5 **SHALL** begin with two
> characters based on the instrument vendor as defined in VPP-9,
> *Instrument Vendor Abbreviations*, followed by the characters VISA.

**OBSERVATION 3.8.2**

> Rule 3.8.3 through 3.8.6 and Permissions 3.8.1 and 3.8.2 allow for
> vendor-specific extensions, provided that the default version (with no
> user-defined macros enabled) compiles to the same output as the files
> provided in this specification. Rule 3.8.3 provides for multi-vendor
> interoperability for VXI*plug&play* applications and instrument
> drivers compiled without user-defined macros.

**OBSERVATION 3.8.3**

> Two examples of a valid PREFIX, as specified in Rule 3.8.6, are NIVISA
> and HPVISA.

**PERMISSION 3.8.3**

> A vendor **MAY** use either one \<extension\> user-defined macro to
> cover all extensions, or a unique \<extension\> macro for each
> extension.

**OBSERVATION 3.8.4**

> An example of a non-interoperable extension is the addition of an
> operation not published in this specification. An application using
> that operation may behave incorrectly or even fail to run if used with
> a different vendor’s VISA implementation that does not have that
> operation.

**RECOMMENDATION 3.8.1**

> Non-compatible extensions to the visatype.h, visa.h, and visa32.bas
> files should provide a warning when such a feature is enabled.

**OBSERVATION 3.8.5**

> Notice that not all compilers or interpreters can produce warning
> messages.

**RULE 3.8.7**

> **IF** a vendor-specific extension overrides any operation, attribute,
> or other feature provided by the VISA specification, **THEN** the
> vendor providing that extension **SHALL** ensure that the feature is
> binary compatible with other vendors’ implementations of VISA.

**RULE 3.8.8**

> Every VISA implementation **SHALL** follow the VISA installation
> requirements as listed in VPP-6, *Installation and Packaging
> Specification*.

<span id="_Toc135113897" class="anchor"></span>Table 3.8.1. Bit Pattern
for Attributes

|        |        |        |     |     |     |        |        |        |        |        |        |     |     |     |       |
|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|
|        |        | ⇐      |     | 14  |     | ⇒      |        |        |        |        | ⇐      |     | 12  |     | ⇒     |
| **31** | **30** | **29** |     | ... |     | **16** | **15** | **14** | **13** | **12** | **11** |     | ... |     | **0** |

> Bit 31: Pass by value or by reference
>
> 0 = by value
>
> 1 = by reference
>
> Bit 30: Reserved (always 0)
>
> Bits 29-16: Manufacturer ID
>
> 0-0FFF = VXI defined
>
> 1000-3FFF = VXI*plug&play* defined
>
> • 3FFC = instrument drivers
>
> • 3FFF = VISA
>
> Bit 15: Published or internal attribute
>
> 0 = published
>
> 1 = internal / undocumented
>
> Bit 14: Attribute class association
>
> 0 = defined by the VISA template or an individual resource
>
> 1 = defined by an event
>
> Bits 13-12: Reserved (always 0)
>
> Bits 11-0: Unique sequence value

<span id="_Toc135113898" class="anchor"></span>Table 3.8.2. Bit Pattern
for Status Codes

|        |        |        |     |     |     |        |        |        |        |        |        |     |     |     |       |
|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|
|        |        | ⇐      |     | 14  |     | ⇒      |        |        |        |        | ⇐      |     | 12  |     | ⇒     |
| **31** | **30** | **29** |     | ... |     | **16** | **15** | **14** | **13** | **12** | **11** |     | ... |     | **0** |

> Bit 31: Success or failure
>
> 0 = success or warning
>
> 1 = error
>
> Bit 30: Reserved (always 0)
>
> Bits 29-16: Manufacturer ID
>
> 0-0FFF = VXI defined
>
> 1000-3FFF = VXI*plug&play* defined
>
> • 3FFC = instrument drivers
>
> • 3FFF = VISA
>
> Bit 15: Published or internal status code
>
> 0 = published
>
> 1 = internal / undocumented
>
> Bits 14-12: Reserved (always 0)
>
> Bits 11-0: Unique sequence value

**RULE 3.8.9**

> **IF** a vendor-specific extension includes attributes or status
> codes, **THEN** the numbers for those attributes and status codes
> **SHALL** be consistent with the coding scheme presented in Tables
> 3.8.1 and 3.8.2.

**OBSERVATION 3.8.6**

> All VISA-defined attributes and status codes listed in Tables 3.3.1
> and 3.4.1 are consistent with the coding scheme presented in Tables
> 3.8.1 and 3.8.2.

# Appendix A Implementation Files [appendix-a-implementation-files]

## A.1 Contents of visatype.h File [a.1-contents-of-visatype.h-file]

This file reflects the required implementation of the specifications
given in this document. It is provided as a reference and may not have
the same date or version as the actual file installed on the system.

/\*---------------------------------------------------------------------------\*/

/\* Distributed by IVI Foundation Inc. \*/

/\* \*/

/\* Do not modify the contents of this file. \*/

/\*---------------------------------------------------------------------------\*/

/\* \*/

/\* Title : VISATYPE.H \*/

/\* Date : 06-08-2017 \*/

/\* Purpose : Fundamental VISA data types and macro definitions \*/

/\* \*/

/\*---------------------------------------------------------------------------\*/

\#ifndef \_\_VISATYPE_HEADER\_\_

\#define \_\_VISATYPE_HEADER\_\_

\#if defined(\_WIN64)

\#define \_VI_FAR

\#define \_VI_FUNC \_\_fastcall

\#define \_VI_FUNCC \_\_fastcall

\#define \_VI_FUNCH \_\_fastcall

\#define \_VI_SIGNED signed

\#elif (defined(WIN32) \|\| defined(\_WIN32) \|\| defined(\_\_WIN32\_\_)
\|\| defined(\_\_NT\_\_)) && !defined(\_NI_mswin16\_) \#define \_VI_FAR

\#define \_VI_FUNC \_\_stdcall

\#define \_VI_FUNCC \_\_cdecl

\#define \_VI_FUNCH \_\_stdcall

\#define \_VI_SIGNED signed

\#elif defined(\_CVI\_) && defined(\_NI_i386\_)

\#define \_VI_FAR

\#define \_VI_FUNC \_pascal

\#define \_VI_FUNCC

\#define \_VI_FUNCH \_pascal

\#define \_VI_SIGNED signed

\#elif (defined(\_WINDOWS) \|\| defined(\_Windows)) &&
!defined(\_NI_mswin16\_)

\#define \_VI_FAR \_far

\#define \_VI_FUNC \_far \_pascal \_export

\#define \_VI_FUNCC \_far \_cdecl \_export

\#define \_VI_FUNCH \_far \_pascal

\#define \_VI_SIGNED signed

\#elif (defined(hpux) \|\| defined(\_\_hpux)) && (defined(\_\_cplusplus)
\|\| defined(\_\_cplusplus\_\_))

\#define \_VI_FAR

\#define \_VI_FUNC

\#define \_VI_FUNCC

\#define \_VI_FUNCH

\#define \_VI_SIGNED

\#else

\#define \_VI_FAR

\#define \_VI_FUNC

\#define \_VI_FUNCC

\#define \_VI_FUNCH

\#define \_VI_SIGNED signed

\#endif

\#define \_VI_ERROR (-2147483647L-1) /\* 0x80000000 \*/

\#define \_VI_PTR \_VI_FAR \*

/\*- VISA Types
--------------------------------------------------------------\*/

\#ifndef \_VI_INT64_UINT64_DEFINED

\#if defined(\_WIN64) \|\| ((defined(WIN32) \|\| defined(\_WIN32) \|\|
defined(\_\_WIN32\_\_) \|\| defined(\_\_NT\_\_)) &&
!defined(\_NI_mswin16\_))

\#if (defined(\_MSC_VER) && (\_MSC_VER \>= 1200)) \|\| (defined(\_CVI\_)
&& (\_CVI\_ \>= 700)) \|\| (defined(\_\_BORLANDC\_\_) &&
(\_\_BORLANDC\_\_ \>= 0x0520)) \|\| defined(\_\_LCC\_\_) \|\|
(defined(\_\_GNUC\_\_) && (\_\_GNUC\_\_ \>= 3)) \|\|
(defined(\_\_clang\_\_) && (\_\_clang_major\_\_ \>= 3))

typedef unsigned \_\_int64 ViUInt64;

typedef \_VI_SIGNED \_\_int64 ViInt64;

\#define \_VI_INT64_UINT64_DEFINED

\#if defined(\_WIN64)

\#define \_VISA_ENV_IS_64_BIT

\#else

/\* This is a 32-bit OS, not a 64-bit OS \*/

\#endif

\#endif

\#elif defined(\_\_GNUC\_\_) && (\_\_GNUC\_\_ \>= 3)

\#include \<limits.h\>

\#include \<sys/types.h\>

typedef u_int64_t ViUInt64;

typedef int64_t ViInt64;

\#define \_VI_INT64_UINT64_DEFINED

\#if defined(LONG_MAX) && (LONG_MAX \> 0x7FFFFFFFL)

\#define \_VISA_ENV_IS_64_BIT

\#else

/\* This is a 32-bit OS, not a 64-bit OS \*/

\#endif

\#else

/\* This platform does not support 64-bit types \*/

\#endif

\#endif

\#if defined(\_VI_INT64_UINT64_DEFINED)

typedef ViUInt64 \_VI_PTR ViPUInt64;

typedef ViUInt64 \_VI_PTR ViAUInt64;

typedef ViInt64 \_VI_PTR ViPInt64;

typedef ViInt64 \_VI_PTR ViAInt64;

\#endif

typedef unsigned long ViUInt32;

typedef ViUInt32 \_VI_PTR ViPUInt32;

typedef ViUInt32 \_VI_PTR ViAUInt32;

typedef \_VI_SIGNED long ViInt32;

typedef ViInt32 \_VI_PTR ViPInt32;

typedef ViInt32 \_VI_PTR ViAInt32;

typedef unsigned short ViUInt16;

typedef ViUInt16 \_VI_PTR ViPUInt16;

typedef ViUInt16 \_VI_PTR ViAUInt16;

typedef \_VI_SIGNED short ViInt16;

typedef ViInt16 \_VI_PTR ViPInt16;

typedef ViInt16 \_VI_PTR ViAInt16;

typedef unsigned char ViUInt8;

typedef ViUInt8 \_VI_PTR ViPUInt8;

typedef ViUInt8 \_VI_PTR ViAUInt8;

typedef \_VI_SIGNED char ViInt8;

typedef ViInt8 \_VI_PTR ViPInt8;

typedef ViInt8 \_VI_PTR ViAInt8;

typedef char ViChar;

typedef ViChar \_VI_PTR ViPChar;

typedef ViChar \_VI_PTR ViAChar;

typedef unsigned char ViByte;

typedef ViByte \_VI_PTR ViPByte;

typedef ViByte \_VI_PTR ViAByte;

typedef void \_VI_PTR ViAddr;

typedef ViAddr \_VI_PTR ViPAddr;

typedef ViAddr \_VI_PTR ViAAddr;

typedef float ViReal32;

typedef ViReal32 \_VI_PTR ViPReal32;

typedef ViReal32 \_VI_PTR ViAReal32;

typedef double ViReal64;

typedef ViReal64 \_VI_PTR ViPReal64;

typedef ViReal64 \_VI_PTR ViAReal64;

typedef ViPByte ViBuf;

typedef const ViByte \* ViConstBuf;

typedef ViPByte ViPBuf;

typedef ViPByte \_VI_PTR ViABuf;

typedef ViPChar ViString;

\#ifndef \_VI_CONST_STRING_DEFINED

typedef const ViChar \* ViConstString;

\#define \_VI_CONST_STRING_DEFINED

\#endif

typedef ViPChar ViPString;

typedef ViPChar \_VI_PTR ViAString;

typedef ViString ViRsrc;

typedef ViConstString ViConstRsrc;

typedef ViString ViPRsrc;

typedef ViString \_VI_PTR ViARsrc;

typedef ViUInt16 ViBoolean;

typedef ViBoolean \_VI_PTR ViPBoolean;

typedef ViBoolean \_VI_PTR ViABoolean;

typedef ViInt32 ViStatus;

typedef ViStatus \_VI_PTR ViPStatus;

typedef ViStatus \_VI_PTR ViAStatus;

typedef ViUInt32 ViVersion;

typedef ViVersion \_VI_PTR ViPVersion;

typedef ViVersion \_VI_PTR ViAVersion;

typedef ViUInt32 ViObject;

typedef ViObject \_VI_PTR ViPObject;

typedef ViObject \_VI_PTR ViAObject;

typedef ViObject ViSession;

typedef ViSession \_VI_PTR ViPSession;

typedef ViSession \_VI_PTR ViASession;

typedef ViUInt32 ViAttr;

/\*- Completion and Error Codes
----------------------------------------------\*/

\#define VI_SUCCESS (0L)

/\*- Other VISA Definitions
--------------------------------------------------\*/

\#define VI_NULL (0)

\#define VI_TRUE (1)

\#define VI_FALSE (0)

/\*- Backward Compatibility Macros
-------------------------------------------\*/

\#define VISAFN \_VI_FUNC

\#define ViPtr \_VI_PTR

\#endif

/\*- The End
-----------------------------------------------------------------\*/

## A.2 Contents of visa.h File [a.2-contents-of-visa.h-file]

This file reflects the required implementation of the specifications
given in this document. It is provided as a reference and may not have
the same date or version as the actual file installed on the system.

/\*---------------------------------------------------------------------------\*/

/\* Distributed by IVI Foundation Inc. \*/

/\* \*/

/\* Do not modify the contents of this file. \*/

/\*---------------------------------------------------------------------------\*/

/\* \*/

/\* Title : VISA.H \*/

/\* Date :=04-01-2022 \*/

/\* Purpose : Include file for the VISA Library 7.2 specification \*/

/\* \*/

/\*---------------------------------------------------------------------------\*/

\#ifndef \_\_VISA_HEADER\_\_

\#define \_\_VISA_HEADER\_\_

\#include \<stdarg.h\>

\#if !defined(\_\_VISATYPE_HEADER\_\_)

\#include "visatype.h"

\#endif

\#define VI_SPEC_VERSION (0x00700200UL)

\#if defined(\_\_cplusplus) \|\| defined(\_\_cplusplus\_\_)

extern "C" {

\#endif

\#if defined(\_CVI\_)

\#pragma EnableLibraryRuntimeChecking

\#endif

/\*- VISA Types
--------------------------------------------------------------\*/

typedef ViObject ViEvent;

typedef ViEvent \_VI_PTR ViPEvent;

typedef ViObject ViFindList;

typedef ViFindList \_VI_PTR ViPFindList;

\#if defined(\_VI_INT64_UINT64_DEFINED) && defined(\_VISA_ENV_IS_64_BIT)

typedef ViUInt64 ViBusAddress;

typedef ViUInt64 ViBusSize;

typedef ViUInt64 ViAttrState;

\#else

typedef ViUInt32 ViBusAddress;

typedef ViUInt32 ViBusSize;

typedef ViUInt32 ViAttrState;

\#endif

\#if defined(\_VI_INT64_UINT64_DEFINED)

typedef ViUInt64 ViBusAddress64;

typedef ViBusAddress64 \_VI_PTR ViPBusAddress64;

\#endif

typedef ViUInt32 ViEventType;

typedef ViEventType \_VI_PTR ViPEventType;

typedef ViEventType \_VI_PTR ViAEventType;

typedef void \_VI_PTR ViPAttrState;

typedef ViAttr \_VI_PTR ViPAttr;

typedef ViAttr \_VI_PTR ViAAttr;

typedef ViString ViKeyId;

typedef ViConstString ViConstKeyId;

typedef ViPString ViPKeyId;

typedef ViUInt32 ViJobId;

typedef ViJobId \_VI_PTR ViPJobId;

typedef ViUInt32 ViAccessMode;

typedef ViAccessMode \_VI_PTR ViPAccessMode;

typedef ViBusAddress \_VI_PTR ViPBusAddress;

typedef ViUInt32 ViEventFilter;

typedef va_list ViVAList;

typedef ViStatus (\_VI_FUNCH \_VI_PTR ViHndlr)

(ViSession vi, ViEventType eventType, ViEvent event, ViAddr userHandle);

/\*- Resource Manager Functions and Operations
-------------------------------\*/

ViStatus \_VI_FUNC viOpenDefaultRM (ViPSession vi);

ViStatus \_VI_FUNC viFindRsrc (ViSession sesn, ViConstString expr,
ViPFindList vi,

ViPUInt32 retCnt, ViChar \_VI_FAR desc\[\]);

ViStatus \_VI_FUNC viFindNext (ViFindList vi, ViChar \_VI_FAR desc\[\]);

ViStatus \_VI_FUNC viParseRsrc (ViSession rmSesn, ViConstRsrc rsrcName,

ViPUInt16 intfType, ViPUInt16 intfNum);

ViStatus \_VI_FUNC viParseRsrcEx (ViSession rmSesn, ViConstRsrc
rsrcName, ViPUInt16 intfType,

ViPUInt16 intfNum, ViChar \_VI_FAR rsrcClass\[\],

ViChar \_VI_FAR expandedUnaliasedName\[\],

ViChar \_VI_FAR aliasIfExists\[\]);

ViStatus \_VI_FUNC viOpen (ViSession sesn, ViConstRsrc name,
ViAccessMode mode,

ViUInt32 timeout, ViPSession vi);

/\*- Resource Template Operations
--------------------------------------------\*/

ViStatus \_VI_FUNC viClose (ViObject vi);

ViStatus \_VI_FUNC viSetAttribute (ViObject vi, ViAttr attrName,
ViAttrState attrValue);

ViStatus \_VI_FUNC viGetAttribute (ViObject vi, ViAttr attrName, void
\_VI_PTR attrValue);

ViStatus \_VI_FUNC viStatusDesc (ViObject vi, ViStatus status, ViChar
\_VI_FAR desc\[\]);

ViStatus \_VI_FUNC viTerminate (ViObject vi, ViUInt16 degree, ViJobId
jobId);

ViStatus \_VI_FUNC viLock (ViSession vi, ViAccessMode lockType, ViUInt32
timeout,

ViConstKeyId requestedKey, ViChar \_VI_FAR accessKey\[\]);

ViStatus \_VI_FUNC viUnlock (ViSession vi);

ViStatus \_VI_FUNC viEnableEvent (ViSession vi, ViEventType eventType,
ViUInt16 mechanism,

ViEventFilter context);

ViStatus \_VI_FUNC viDisableEvent (ViSession vi, ViEventType eventType,
ViUInt16 mechanism);

ViStatus \_VI_FUNC viDiscardEvents (ViSession vi, ViEventType eventType,
ViUInt16 mechanism);

ViStatus \_VI_FUNC viWaitOnEvent (ViSession vi, ViEventType inEventType,
ViUInt32 timeout,

ViPEventType outEventType, ViPEvent outContext);

ViStatus \_VI_FUNC viInstallHandler(ViSession vi, ViEventType eventType,
ViHndlr handler,

ViAddr userHandle);

ViStatus \_VI_FUNC viUninstallHandler(ViSession vi, ViEventType
eventType, ViHndlr handler,

ViAddr userHandle);

/\*- Basic I/O Operations
----------------------------------------------------\*/

ViStatus \_VI_FUNC viRead (ViSession vi, ViPBuf buf, ViUInt32 cnt,
ViPUInt32 retCnt);

ViStatus \_VI_FUNC viReadAsync (ViSession vi, ViPBuf buf, ViUInt32 cnt,
ViPJobId jobId);

ViStatus \_VI_FUNC viReadToFile (ViSession vi, ViConstString filename,
ViUInt32 cnt,

ViPUInt32 retCnt);

ViStatus \_VI_FUNC viWrite (ViSession vi, ViConstBuf buf, ViUInt32 cnt,
ViPUInt32 retCnt);

ViStatus \_VI_FUNC viWriteAsync (ViSession vi, ViConstBuf buf, ViUInt32
cnt, ViPJobId jobId);

ViStatus \_VI_FUNC viWriteFromFile (ViSession vi, ViConstString
filename, ViUInt32 cnt,

ViPUInt32 retCnt);

ViStatus \_VI_FUNC viAssertTrigger (ViSession vi, ViUInt16 protocol);

ViStatus \_VI_FUNC viReadSTB (ViSession vi, ViPUInt16 status);

ViStatus \_VI_FUNC viClear (ViSession vi);

/\*- Formatted and Buffered I/O Operations
-----------------------------------\*/

ViStatus \_VI_FUNC viSetBuf (ViSession vi, ViUInt16 mask, ViUInt32
size);

ViStatus \_VI_FUNC viFlush (ViSession vi, ViUInt16 mask);

ViStatus \_VI_FUNC viBufWrite (ViSession vi, ViConstBuf buf, ViUInt32
cnt, ViPUInt32 retCnt);

ViStatus \_VI_FUNC viBufRead (ViSession vi, ViPBuf buf, ViUInt32 cnt,
ViPUInt32 retCnt);

ViStatus \_VI_FUNCC viPrintf (ViSession vi, ViConstString writeFmt,
...);

ViStatus \_VI_FUNC viVPrintf (ViSession vi, ViConstString writeFmt,
ViVAList params);

ViStatus \_VI_FUNCC viSPrintf (ViSession vi, ViPBuf buf, ViConstString
writeFmt, ...);

ViStatus \_VI_FUNC viVSPrintf (ViSession vi, ViPBuf buf, ViConstString
writeFmt,

ViVAList parms);

ViStatus \_VI_FUNCC viScanf (ViSession vi, ViConstString readFmt, ...);

ViStatus \_VI_FUNC viVScanf (ViSession vi, ViConstString readFmt,
ViVAList params);

ViStatus \_VI_FUNCC viSScanf (ViSession vi, ViConstBuf buf,
ViConstString readFmt, ...);

ViStatus \_VI_FUNC viVSScanf (ViSession vi, ViConstBuf buf,
ViConstString readFmt,

ViVAList parms);

ViStatus \_VI_FUNCC viQueryf (ViSession vi, ViConstString writeFmt,
ViConstString readFmt, ...);

ViStatus \_VI_FUNC viVQueryf (ViSession vi, ViConstString writeFmt,
ViConstString readFmt,

ViVAList params);

/\*- Memory I/O Operations
---------------------------------------------------\*/

ViStatus \_VI_FUNC viIn8 (ViSession vi, ViUInt16 space,

ViBusAddress offset, ViPUInt8 val8);

ViStatus \_VI_FUNC viOut8 (ViSession vi, ViUInt16 space,

ViBusAddress offset, ViUInt8 val8);

ViStatus \_VI_FUNC viIn16 (ViSession vi, ViUInt16 space,

ViBusAddress offset, ViPUInt16 val16);

ViStatus \_VI_FUNC viOut16 (ViSession vi, ViUInt16 space,

ViBusAddress offset, ViUInt16 val16);

ViStatus \_VI_FUNC viIn32 (ViSession vi, ViUInt16 space,

ViBusAddress offset, ViPUInt32 val32);

ViStatus \_VI_FUNC viOut32 (ViSession vi, ViUInt16 space,

ViBusAddress offset, ViUInt32 val32);

\#if defined(\_VI_INT64_UINT64_DEFINED)

ViStatus \_VI_FUNC viIn64 (ViSession vi, ViUInt16 space,

ViBusAddress offset, ViPUInt64 val64);

ViStatus \_VI_FUNC viOut64 (ViSession vi, ViUInt16 space,

ViBusAddress offset, ViUInt64 val64);

ViStatus \_VI_FUNC viIn8Ex (ViSession vi, ViUInt16 space,

ViBusAddress64 offset, ViPUInt8 val8);

ViStatus \_VI_FUNC viOut8Ex (ViSession vi, ViUInt16 space,

ViBusAddress64 offset, ViUInt8 val8);

ViStatus \_VI_FUNC viIn16Ex (ViSession vi, ViUInt16 space,

ViBusAddress64 offset, ViPUInt16 val16);

ViStatus \_VI_FUNC viOut16Ex (ViSession vi, ViUInt16 space,

ViBusAddress64 offset, ViUInt16 val16);

ViStatus \_VI_FUNC viIn32Ex (ViSession vi, ViUInt16 space,

ViBusAddress64 offset, ViPUInt32 val32);

ViStatus \_VI_FUNC viOut32Ex (ViSession vi, ViUInt16 space,

ViBusAddress64 offset, ViUInt32 val32);

ViStatus \_VI_FUNC viIn64Ex (ViSession vi, ViUInt16 space,

ViBusAddress64 offset, ViPUInt64 val64);

ViStatus \_VI_FUNC viOut64Ex (ViSession vi, ViUInt16 space,

ViBusAddress64 offset, ViUInt64 val64);

\#endif

ViStatus \_VI_FUNC viMoveIn8 (ViSession vi, ViUInt16 space, ViBusAddress
offset,

ViBusSize length, ViAUInt8 buf8);

ViStatus \_VI_FUNC viMoveOut8 (ViSession vi, ViUInt16 space,
ViBusAddress offset,

ViBusSize length, ViAUInt8 buf8);

ViStatus \_VI_FUNC viMoveIn16 (ViSession vi, ViUInt16 space,
ViBusAddress offset,

ViBusSize length, ViAUInt16 buf16);

ViStatus \_VI_FUNC viMoveOut16 (ViSession vi, ViUInt16 space,
ViBusAddress offset,

ViBusSize length, ViAUInt16 buf16);

ViStatus \_VI_FUNC viMoveIn32 (ViSession vi, ViUInt16 space,
ViBusAddress offset,

ViBusSize length, ViAUInt32 buf32);

ViStatus \_VI_FUNC viMoveOut32 (ViSession vi, ViUInt16 space,
ViBusAddress offset,

ViBusSize length, ViAUInt32 buf32);

\#if defined(\_VI_INT64_UINT64_DEFINED)

ViStatus \_VI_FUNC viMoveIn64 (ViSession vi, ViUInt16 space,
ViBusAddress offset,

ViBusSize length, ViAUInt64 buf64);

ViStatus \_VI_FUNC viMoveOut64 (ViSession vi, ViUInt16 space,
ViBusAddress offset,

ViBusSize length, ViAUInt64 buf64);

ViStatus \_VI_FUNC viMoveIn8Ex (ViSession vi, ViUInt16 space,
ViBusAddress64 offset,

ViBusSize length, ViAUInt8 buf8);

ViStatus \_VI_FUNC viMoveOut8Ex (ViSession vi, ViUInt16 space,
ViBusAddress64 offset,

ViBusSize length, ViAUInt8 buf8);

ViStatus \_VI_FUNC viMoveIn16Ex (ViSession vi, ViUInt16 space,
ViBusAddress64 offset,

ViBusSize length, ViAUInt16 buf16);

ViStatus \_VI_FUNC viMoveOut16Ex (ViSession vi, ViUInt16 space,
ViBusAddress64 offset,

ViBusSize length, ViAUInt16 buf16);

ViStatus \_VI_FUNC viMoveIn32Ex (ViSession vi, ViUInt16 space,
ViBusAddress64 offset,

ViBusSize length, ViAUInt32 buf32);

ViStatus \_VI_FUNC viMoveOut32Ex (ViSession vi, ViUInt16 space,
ViBusAddress64 offset,

ViBusSize length, ViAUInt32 buf32);

ViStatus \_VI_FUNC viMoveIn64Ex (ViSession vi, ViUInt16 space,
ViBusAddress64 offset,

ViBusSize length, ViAUInt64 buf64);

ViStatus \_VI_FUNC viMoveOut64Ex (ViSession vi, ViUInt16 space,
ViBusAddress64 offset,

ViBusSize length, ViAUInt64 buf64);

\#endif

ViStatus \_VI_FUNC viMove (ViSession vi, ViUInt16 srcSpace, ViBusAddress
srcOffset,

ViUInt16 srcWidth, ViUInt16 destSpace,

ViBusAddress destOffset, ViUInt16 destWidth,

ViBusSize srcLength);

ViStatus \_VI_FUNC viMoveAsync (ViSession vi, ViUInt16 srcSpace,
ViBusAddress srcOffset,

ViUInt16 srcWidth, ViUInt16 destSpace,

ViBusAddress destOffset, ViUInt16 destWidth,

ViBusSize srcLength, ViPJobId jobId);

\#if defined(\_VI_INT64_UINT64_DEFINED)

ViStatus \_VI_FUNC viMoveEx (ViSession vi, ViUInt16 srcSpace,
ViBusAddress64 srcOffset,

ViUInt16 srcWidth, ViUInt16 destSpace,

ViBusAddress64 destOffset, ViUInt16 destWidth,

ViBusSize srcLength);

ViStatus \_VI_FUNC viMoveAsyncEx (ViSession vi, ViUInt16 srcSpace,
ViBusAddress64 srcOffset,

ViUInt16 srcWidth, ViUInt16 destSpace,

ViBusAddress64 destOffset, ViUInt16 destWidth,

ViBusSize srcLength, ViPJobId jobId);

\#endif

ViStatus \_VI_FUNC viMapAddress (ViSession vi, ViUInt16 mapSpace,
ViBusAddress mapOffset,

ViBusSize mapSize, ViBoolean access,

ViAddr suggested, ViPAddr address);

ViStatus \_VI_FUNC viUnmapAddress (ViSession vi);

\#if defined(\_VI_INT64_UINT64_DEFINED)

ViStatus \_VI_FUNC viMapAddressEx (ViSession vi, ViUInt16 mapSpace,
ViBusAddress64 mapOffset,

ViBusSize mapSize, ViBoolean access,

ViAddr suggested, ViPAddr address);

\#endif

void \_VI_FUNC viPeek8 (ViSession vi, ViAddr address, ViPUInt8 val8);

void \_VI_FUNC viPoke8 (ViSession vi, ViAddr address, ViUInt8 val8);

void \_VI_FUNC viPeek16 (ViSession vi, ViAddr address, ViPUInt16 val16);

void \_VI_FUNC viPoke16 (ViSession vi, ViAddr address, ViUInt16 val16);

void \_VI_FUNC viPeek32 (ViSession vi, ViAddr address, ViPUInt32 val32);

void \_VI_FUNC viPoke32 (ViSession vi, ViAddr address, ViUInt32 val32);

\#if defined(\_VI_INT64_UINT64_DEFINED)

void \_VI_FUNC viPeek64 (ViSession vi, ViAddr address, ViPUInt64 val64);

void \_VI_FUNC viPoke64 (ViSession vi, ViAddr address, ViUInt64 val64);

\#endif

/\*- Shared Memory Operations
------------------------------------------------\*/

ViStatus \_VI_FUNC viMemAlloc (ViSession vi, ViBusSize size,
ViPBusAddress offset);

ViStatus \_VI_FUNC viMemFree (ViSession vi, ViBusAddress offset);

\#if defined(\_VI_INT64_UINT64_DEFINED)

ViStatus \_VI_FUNC viMemAllocEx (ViSession vi, ViBusSize size,
ViPBusAddress64 offset);

ViStatus \_VI_FUNC viMemFreeEx (ViSession vi, ViBusAddress64 offset);

\#endif

/\*- Interface Specific Operations
-------------------------------------------\*/

ViStatus \_VI_FUNC viGpibControlREN(ViSession vi, ViUInt16 mode);

ViStatus \_VI_FUNC viGpibControlATN(ViSession vi, ViUInt16 mode);

ViStatus \_VI_FUNC viGpibSendIFC (ViSession vi);

ViStatus \_VI_FUNC viGpibCommand (ViSession vi, ViConstBuf cmd, ViUInt32
cnt, ViPUInt32 retCnt);

ViStatus \_VI_FUNC viGpibPassControl(ViSession vi, ViUInt16 primAddr,
ViUInt16 secAddr);

ViStatus \_VI_FUNC viVxiCommandQuery(ViSession vi, ViUInt16 mode,
ViUInt32 cmd,

ViPUInt32 response);

ViStatus \_VI_FUNC viAssertUtilSignal(ViSession vi, ViUInt16 line);

ViStatus \_VI_FUNC viAssertIntrSignal(ViSession vi, ViInt16 mode,
ViUInt32 statusID);

ViStatus \_VI_FUNC viMapTrigger (ViSession vi, ViInt16 trigSrc, ViInt16
trigDest,

ViUInt16 mode);

ViStatus \_VI_FUNC viUnmapTrigger (ViSession vi, ViInt16 trigSrc,
ViInt16 trigDest);

ViStatus \_VI_FUNC viUsbControlOut (ViSession vi, ViInt16 bmRequestType,
ViInt16 bRequest,

ViUInt16 wValue, ViUInt16 wIndex, ViUInt16 wLength,

ViConstBuf buf);

ViStatus \_VI_FUNC viUsbControlIn (ViSession vi, ViInt16 bmRequestType,
ViInt16 bRequest,

ViUInt16 wValue, ViUInt16 wIndex, ViUInt16 wLength,

ViPBuf buf, ViPUInt16 retCnt);

ViStatus \_VI_FUNC viPxiReserveTriggers(ViSession vi, ViInt16 cnt,
ViAInt16 trigBuses,

ViAInt16 trigLines, ViPInt16 failureIndex);

/\*- Attributes (platform independent size)
----------------------------------\*/

\#define VI_ATTR_RSRC_CLASS (0xBFFF0001UL)

\#define VI_ATTR_RSRC_NAME (0xBFFF0002UL)

\#define VI_ATTR_RSRC_IMPL_VERSION (0x3FFF0003UL)

\#define VI_ATTR_RSRC_LOCK_STATE (0x3FFF0004UL)

\#define VI_ATTR_MAX_QUEUE_LENGTH (0x3FFF0005UL)

\#define VI_ATTR_USER_DATA_32 (0x3FFF0007UL)

\#define VI_ATTR_FDC_CHNL (0x3FFF000DUL)

\#define VI_ATTR_FDC_MODE (0x3FFF000FUL)

\#define VI_ATTR_FDC_GEN_SIGNAL_EN (0x3FFF0011UL)

\#define VI_ATTR_FDC_USE_PAIR (0x3FFF0013UL)

\#define VI_ATTR_SEND_END_EN (0x3FFF0016UL)

\#define VI_ATTR_TERMCHAR (0x3FFF0018UL)

\#define VI_ATTR_TMO_VALUE (0x3FFF001AUL)

\#define VI_ATTR_GPIB_READDR_EN (0x3FFF001BUL)

\#define VI_ATTR_IO_PROT (0x3FFF001CUL)

\#define VI_ATTR_DMA_ALLOW_EN (0x3FFF001EUL)

\#define VI_ATTR_ASRL_BAUD (0x3FFF0021UL)

\#define VI_ATTR_ASRL_DATA_BITS (0x3FFF0022UL)

\#define VI_ATTR_ASRL_PARITY (0x3FFF0023UL)

\#define VI_ATTR_ASRL_STOP_BITS (0x3FFF0024UL)

\#define VI_ATTR_ASRL_FLOW_CNTRL (0x3FFF0025UL)

\#define VI_ATTR_RD_BUF_OPER_MODE (0x3FFF002AUL)

\#define VI_ATTR_RD_BUF_SIZE (0x3FFF002BUL)

\#define VI_ATTR_WR_BUF_OPER_MODE (0x3FFF002DUL)

\#define VI_ATTR_WR_BUF_SIZE (0x3FFF002EUL)

\#define VI_ATTR_SUPPRESS_END_EN (0x3FFF0036UL)

\#define VI_ATTR_TERMCHAR_EN (0x3FFF0038UL)

\#define VI_ATTR_DEST_ACCESS_PRIV (0x3FFF0039UL)

\#define VI_ATTR_DEST_BYTE_ORDER (0x3FFF003AUL)

\#define VI_ATTR_SRC_ACCESS_PRIV (0x3FFF003CUL)

\#define VI_ATTR_SRC_BYTE_ORDER (0x3FFF003DUL)

\#define VI_ATTR_SRC_INCREMENT (0x3FFF0040UL)

\#define VI_ATTR_DEST_INCREMENT (0x3FFF0041UL)

\#define VI_ATTR_WIN_ACCESS_PRIV (0x3FFF0045UL)

\#define VI_ATTR_WIN_BYTE_ORDER (0x3FFF0047UL)

\#define VI_ATTR_GPIB_ATN_STATE (0x3FFF0057UL)

\#define VI_ATTR_GPIB_ADDR_STATE (0x3FFF005CUL)

\#define VI_ATTR_GPIB_CIC_STATE (0x3FFF005EUL)

\#define VI_ATTR_GPIB_NDAC_STATE (0x3FFF0062UL)

\#define VI_ATTR_GPIB_SRQ_STATE (0x3FFF0067UL)

\#define VI_ATTR_GPIB_SYS_CNTRL_STATE (0x3FFF0068UL)

\#define VI_ATTR_GPIB_HS488_CBL_LEN (0x3FFF0069UL)

\#define VI_ATTR_CMDR_LA (0x3FFF006BUL)

\#define VI_ATTR_VXI_DEV_CLASS (0x3FFF006CUL)

\#define VI_ATTR_MAINFRAME_LA (0x3FFF0070UL)

\#define VI_ATTR_MANF_NAME (0xBFFF0072UL)

\#define VI_ATTR_MODEL_NAME (0xBFFF0077UL)

\#define VI_ATTR_VXI_VME_INTR_STATUS (0x3FFF008BUL)

\#define VI_ATTR_VXI_TRIG_STATUS (0x3FFF008DUL)

\#define VI_ATTR_VXI_VME_SYSFAIL_STATE (0x3FFF0094UL)

\#define VI_ATTR_WIN_BASE_ADDR_32 (0x3FFF0098UL)

\#define VI_ATTR_WIN_SIZE_32 (0x3FFF009AUL)

\#define VI_ATTR_ASRL_AVAIL_NUM (0x3FFF00ACUL)

\#define VI_ATTR_MEM_BASE_32 (0x3FFF00ADUL)

\#define VI_ATTR_ASRL_CTS_STATE (0x3FFF00AEUL)

\#define VI_ATTR_ASRL_DCD_STATE (0x3FFF00AFUL)

\#define VI_ATTR_ASRL_DSR_STATE (0x3FFF00B1UL)

\#define VI_ATTR_ASRL_DTR_STATE (0x3FFF00B2UL)

\#define VI_ATTR_ASRL_END_IN (0x3FFF00B3UL)

\#define VI_ATTR_ASRL_END_OUT (0x3FFF00B4UL)

\#define VI_ATTR_ASRL_REPLACE_CHAR (0x3FFF00BEUL)

\#define VI_ATTR_ASRL_RI_STATE (0x3FFF00BFUL)

\#define VI_ATTR_ASRL_RTS_STATE (0x3FFF00C0UL)

\#define VI_ATTR_ASRL_XON_CHAR (0x3FFF00C1UL)

\#define VI_ATTR_ASRL_XOFF_CHAR (0x3FFF00C2UL)

\#define VI_ATTR_WIN_ACCESS (0x3FFF00C3UL)

\#define VI_ATTR_RM_SESSION (0x3FFF00C4UL)

\#define VI_ATTR_VXI_LA (0x3FFF00D5UL)

\#define VI_ATTR_MANF_ID (0x3FFF00D9UL)

\#define VI_ATTR_MEM_SIZE_32 (0x3FFF00DDUL)

\#define VI_ATTR_MEM_SPACE (0x3FFF00DEUL)

\#define VI_ATTR_MODEL_CODE (0x3FFF00DFUL)

\#define VI_ATTR_SLOT (0x3FFF00E8UL)

\#define VI_ATTR_INTF_INST_NAME (0xBFFF00E9UL)

\#define VI_ATTR_IMMEDIATE_SERV (0x3FFF0100UL)

\#define VI_ATTR_INTF_PARENT_NUM (0x3FFF0101UL)

\#define VI_ATTR_RSRC_SPEC_VERSION (0x3FFF0170UL)

\#define VI_ATTR_INTF_TYPE (0x3FFF0171UL)

\#define VI_ATTR_GPIB_PRIMARY_ADDR (0x3FFF0172UL)

\#define VI_ATTR_GPIB_SECONDARY_ADDR (0x3FFF0173UL)

\#define VI_ATTR_RSRC_MANF_NAME (0xBFFF0174UL)

\#define VI_ATTR_RSRC_MANF_ID (0x3FFF0175UL)

\#define VI_ATTR_INTF_NUM (0x3FFF0176UL)

\#define VI_ATTR_TRIG_ID (0x3FFF0177UL)

\#define VI_ATTR_GPIB_REN_STATE (0x3FFF0181UL)

\#define VI_ATTR_GPIB_UNADDR_EN (0x3FFF0184UL)

\#define VI_ATTR_DEV_STATUS_BYTE (0x3FFF0189UL)

\#define VI_ATTR_FILE_APPEND_EN (0x3FFF0192UL)

\#define VI_ATTR_VXI_TRIG_SUPPORT (0x3FFF0194UL)

\#define VI_ATTR_TCPIP_ADDR (0xBFFF0195UL)

\#define VI_ATTR_TCPIP_HOSTNAME (0xBFFF0196UL)

\#define VI_ATTR_TCPIP_PORT (0x3FFF0197UL)

\#define VI_ATTR_TCPIP_DEVICE_NAME (0xBFFF0199UL)

\#define VI_ATTR_TCPIP_NODELAY (0x3FFF019AUL)

\#define VI_ATTR_TCPIP_KEEPALIVE (0x3FFF019BUL)

\#define VI_ATTR_4882_COMPLIANT (0x3FFF019FUL)

\#define VI_ATTR_USB_SERIAL_NUM (0xBFFF01A0UL)

\#define VI_ATTR_USB_INTFC_NUM (0x3FFF01A1UL)

\#define VI_ATTR_USB_PROTOCOL (0x3FFF01A7UL)

\#define VI_ATTR_USB_MAX_INTR_SIZE (0x3FFF01AFUL)

\#define VI_ATTR_PXI_DEV_NUM (0x3FFF0201UL)

\#define VI_ATTR_PXI_FUNC_NUM (0x3FFF0202UL)

\#define VI_ATTR_PXI_BUS_NUM (0x3FFF0205UL)

\#define VI_ATTR_PXI_CHASSIS (0x3FFF0206UL)

\#define VI_ATTR_PXI_SLOTPATH (0xBFFF0207UL)

\#define VI_ATTR_PXI_SLOT_LBUS_LEFT (0x3FFF0208UL)

\#define VI_ATTR_PXI_SLOT_LBUS_RIGHT (0x3FFF0209UL)

\#define VI_ATTR_PXI_TRIG_BUS (0x3FFF020AUL)

\#define VI_ATTR_PXI_STAR_TRIG_BUS (0x3FFF020BUL)

\#define VI_ATTR_PXI_STAR_TRIG_LINE (0x3FFF020CUL)

\#define VI_ATTR_PXI_SRC_TRIG_BUS (0x3FFF020DUL)

\#define VI_ATTR_PXI_DEST_TRIG_BUS (0x3FFF020EUL)

\#define VI_ATTR_PXI_MEM_TYPE_BAR0 (0x3FFF0211UL)

\#define VI_ATTR_PXI_MEM_TYPE_BAR1 (0x3FFF0212UL)

\#define VI_ATTR_PXI_MEM_TYPE_BAR2 (0x3FFF0213UL)

\#define VI_ATTR_PXI_MEM_TYPE_BAR3 (0x3FFF0214UL)

\#define VI_ATTR_PXI_MEM_TYPE_BAR4 (0x3FFF0215UL)

\#define VI_ATTR_PXI_MEM_TYPE_BAR5 (0x3FFF0216UL)

\#define VI_ATTR_PXI_MEM_BASE_BAR0_32 (0x3FFF0221UL)

\#define VI_ATTR_PXI_MEM_BASE_BAR1_32 (0x3FFF0222UL)

\#define VI_ATTR_PXI_MEM_BASE_BAR2_32 (0x3FFF0223UL)

\#define VI_ATTR_PXI_MEM_BASE_BAR3_32 (0x3FFF0224UL)

\#define VI_ATTR_PXI_MEM_BASE_BAR4_32 (0x3FFF0225UL)

\#define VI_ATTR_PXI_MEM_BASE_BAR5_32 (0x3FFF0226UL)

\#define VI_ATTR_PXI_MEM_BASE_BAR0_64 (0x3FFF0228UL)

\#define VI_ATTR_PXI_MEM_BASE_BAR1_64 (0x3FFF0229UL)

\#define VI_ATTR_PXI_MEM_BASE_BAR2_64 (0x3FFF022AUL)

\#define VI_ATTR_PXI_MEM_BASE_BAR3_64 (0x3FFF022BUL)

\#define VI_ATTR_PXI_MEM_BASE_BAR4_64 (0x3FFF022CUL)

\#define VI_ATTR_PXI_MEM_BASE_BAR5_64 (0x3FFF022DUL)

\#define VI_ATTR_PXI_MEM_SIZE_BAR0_32 (0x3FFF0231UL)

\#define VI_ATTR_PXI_MEM_SIZE_BAR1_32 (0x3FFF0232UL)

\#define VI_ATTR_PXI_MEM_SIZE_BAR2_32 (0x3FFF0233UL)

\#define VI_ATTR_PXI_MEM_SIZE_BAR3_32 (0x3FFF0234UL)

\#define VI_ATTR_PXI_MEM_SIZE_BAR4_32 (0x3FFF0235UL)

\#define VI_ATTR_PXI_MEM_SIZE_BAR5_32 (0x3FFF0236UL)

\#define VI_ATTR_PXI_MEM_SIZE_BAR0_64 (0x3FFF0238UL)

\#define VI_ATTR_PXI_MEM_SIZE_BAR1_64 (0x3FFF0239UL)

\#define VI_ATTR_PXI_MEM_SIZE_BAR2_64 (0x3FFF023AUL)

\#define VI_ATTR_PXI_MEM_SIZE_BAR3_64 (0x3FFF023BUL)

\#define VI_ATTR_PXI_MEM_SIZE_BAR4_64 (0x3FFF023CUL)

\#define VI_ATTR_PXI_MEM_SIZE_BAR5_64 (0x3FFF023DUL)

\#define VI_ATTR_PXI_IS_EXPRESS (0x3FFF0240UL)

\#define VI_ATTR_PXI_SLOT_LWIDTH (0x3FFF0241UL)

\#define VI_ATTR_PXI_MAX_LWIDTH (0x3FFF0242UL)

\#define VI_ATTR_PXI_ACTUAL_LWIDTH (0x3FFF0243UL)

\#define VI_ATTR_PXI_DSTAR_BUS (0x3FFF0244UL)

\#define VI_ATTR_PXI_DSTAR_SET (0x3FFF0245UL)

\#define VI_ATTR_PXI_ALLOW_WRITE_COMBINE (0x3FFF0246UL)

\#define VI_ATTR_PXI_SLOT_WIDTH (0x3FFF0247UL)

\#define VI_ATTR_PXI_SLOT_OFFSET (0x3FFF0248UL)

\#define VI_ATTR_TCPIP_SERVER_CERT_ISSUER_NAME (0xBFFF0270UL)

\#define VI_ATTR_TCPIP_SERVER_CERT_SUBJECT_NAME (0xBFFF0271UL)

\#define VI_ATTR_TCPIP_SERVER_CERT_EXPIRATION_DATE (0xBFFF0272UL)

\#define VI_ATTR_TCPIP_SERVER_CERT_IS_PERPETUAL (0x3FFF0273UL)

\#define VI_ATTR_TCPIP_SASL_MECHANISM (0xBFFF0274UL)

\#define VI_ATTR_TCPIP_TLS_CIPHER_SUITE (0xBFFF0275UL)

\#define VI_ATTR_TCPIP_SERVER_CERT (0xBFFF0276UL)

\#define VI_ATTR_TCPIP_SERVER_CERT_SIZE (0x3FFF0277UL)

\#define VI_ATTR_TCPIP_HISLIP_OVERLAP_EN (0x3FFF0300UL)

\#define VI_ATTR_TCPIP_HISLIP_VERSION (0x3FFF0301UL)

\#define VI_ATTR_TCPIP_HISLIP_MAX_MESSAGE_KB (0x3FFF0302UL)

\#define VI_ATTR_TCPIP_IS_HISLIP (0x3FFF0303UL)

\#define VI_ATTR_TCPIP_HISLIP_ENCRYPTION_EN (0x3FFF0304UL)

\#define VI_ATTR_JOB_ID (0x3FFF4006UL)

\#define VI_ATTR_EVENT_TYPE (0x3FFF4010UL)

\#define VI_ATTR_SIGP_STATUS_ID (0x3FFF4011UL)

\#define VI_ATTR_RECV_TRIG_ID (0x3FFF4012UL)

\#define VI_ATTR_INTR_STATUS_ID (0x3FFF4023UL)

\#define VI_ATTR_STATUS (0x3FFF4025UL)

\#define VI_ATTR_RET_COUNT_32 (0x3FFF4026UL)

\#define VI_ATTR_BUFFER (0x3FFF4027UL)

\#define VI_ATTR_RECV_INTR_LEVEL (0x3FFF4041UL)

\#define VI_ATTR_OPER_NAME (0xBFFF4042UL)

\#define VI_ATTR_GPIB_RECV_CIC_STATE (0x3FFF4193UL)

\#define VI_ATTR_RECV_TCPIP_ADDR (0xBFFF4198UL)

\#define VI_ATTR_USB_RECV_INTR_SIZE (0x3FFF41B0UL)

\#define VI_ATTR_USB_RECV_INTR_DATA (0xBFFF41B1UL)

\#define VI_ATTR_PXI_RECV_INTR_SEQ (0x3FFF4240UL)

\#define VI_ATTR_PXI_RECV_INTR_DATA (0x3FFF4241UL)

/\*- Attributes (platform dependent size)
------------------------------------\*/

\#if defined(\_VI_INT64_UINT64_DEFINED) && defined(\_VISA_ENV_IS_64_BIT)

\#define VI_ATTR_USER_DATA_64 (0x3FFF000AUL)

\#define VI_ATTR_RET_COUNT_64 (0x3FFF4028UL)

\#define VI_ATTR_USER_DATA (VI_ATTR_USER_DATA_64)

\#define VI_ATTR_RET_COUNT (VI_ATTR_RET_COUNT_64)

\#else

\#define VI_ATTR_USER_DATA (VI_ATTR_USER_DATA_32)

\#define VI_ATTR_RET_COUNT (VI_ATTR_RET_COUNT_32)

\#endif

\#if defined(\_VI_INT64_UINT64_DEFINED)

\#define VI_ATTR_WIN_BASE_ADDR_64 (0x3FFF009BUL)

\#define VI_ATTR_WIN_SIZE_64 (0x3FFF009CUL)

\#define VI_ATTR_MEM_BASE_64 (0x3FFF00D0UL)

\#define VI_ATTR_MEM_SIZE_64 (0x3FFF00D1UL)

\#endif

\#if defined(\_VI_INT64_UINT64_DEFINED) && defined(\_VISA_ENV_IS_64_BIT)

\#define VI_ATTR_WIN_BASE_ADDR (VI_ATTR_WIN_BASE_ADDR_64)

\#define VI_ATTR_WIN_SIZE (VI_ATTR_WIN_SIZE_64)

\#define VI_ATTR_MEM_BASE (VI_ATTR_MEM_BASE_64)

\#define VI_ATTR_MEM_SIZE (VI_ATTR_MEM_SIZE_64)

\#define VI_ATTR_PXI_MEM_BASE_BAR0 (VI_ATTR_PXI_MEM_BASE_BAR0_64)

\#define VI_ATTR_PXI_MEM_BASE_BAR1 (VI_ATTR_PXI_MEM_BASE_BAR1_64)

\#define VI_ATTR_PXI_MEM_BASE_BAR2 (VI_ATTR_PXI_MEM_BASE_BAR2_64)

\#define VI_ATTR_PXI_MEM_BASE_BAR3 (VI_ATTR_PXI_MEM_BASE_BAR3_64)

\#define VI_ATTR_PXI_MEM_BASE_BAR4 (VI_ATTR_PXI_MEM_BASE_BAR4_64)

\#define VI_ATTR_PXI_MEM_BASE_BAR5 (VI_ATTR_PXI_MEM_BASE_BAR5_64)

\#define VI_ATTR_PXI_MEM_SIZE_BAR0 (VI_ATTR_PXI_MEM_SIZE_BAR0_64)

\#define VI_ATTR_PXI_MEM_SIZE_BAR1 (VI_ATTR_PXI_MEM_SIZE_BAR1_64)

\#define VI_ATTR_PXI_MEM_SIZE_BAR2 (VI_ATTR_PXI_MEM_SIZE_BAR2_64)

\#define VI_ATTR_PXI_MEM_SIZE_BAR3 (VI_ATTR_PXI_MEM_SIZE_BAR3_64)

\#define VI_ATTR_PXI_MEM_SIZE_BAR4 (VI_ATTR_PXI_MEM_SIZE_BAR4_64)

\#define VI_ATTR_PXI_MEM_SIZE_BAR5 (VI_ATTR_PXI_MEM_SIZE_BAR5_64)

\#else

\#define VI_ATTR_WIN_BASE_ADDR (VI_ATTR_WIN_BASE_ADDR_32)

\#define VI_ATTR_WIN_SIZE (VI_ATTR_WIN_SIZE_32)

\#define VI_ATTR_MEM_BASE (VI_ATTR_MEM_BASE_32)

\#define VI_ATTR_MEM_SIZE (VI_ATTR_MEM_SIZE_32)

\#define VI_ATTR_PXI_MEM_BASE_BAR0 (VI_ATTR_PXI_MEM_BASE_BAR0_32)

\#define VI_ATTR_PXI_MEM_BASE_BAR1 (VI_ATTR_PXI_MEM_BASE_BAR1_32)

\#define VI_ATTR_PXI_MEM_BASE_BAR2 (VI_ATTR_PXI_MEM_BASE_BAR2_32)

\#define VI_ATTR_PXI_MEM_BASE_BAR3 (VI_ATTR_PXI_MEM_BASE_BAR3_32)

\#define VI_ATTR_PXI_MEM_BASE_BAR4 (VI_ATTR_PXI_MEM_BASE_BAR4_32)

\#define VI_ATTR_PXI_MEM_BASE_BAR5 (VI_ATTR_PXI_MEM_BASE_BAR5_32)

\#define VI_ATTR_PXI_MEM_SIZE_BAR0 (VI_ATTR_PXI_MEM_SIZE_BAR0_32)

\#define VI_ATTR_PXI_MEM_SIZE_BAR1 (VI_ATTR_PXI_MEM_SIZE_BAR1_32)

\#define VI_ATTR_PXI_MEM_SIZE_BAR2 (VI_ATTR_PXI_MEM_SIZE_BAR2_32)

\#define VI_ATTR_PXI_MEM_SIZE_BAR3 (VI_ATTR_PXI_MEM_SIZE_BAR3_32)

\#define VI_ATTR_PXI_MEM_SIZE_BAR4 (VI_ATTR_PXI_MEM_SIZE_BAR4_32)

\#define VI_ATTR_PXI_MEM_SIZE_BAR5 (VI_ATTR_PXI_MEM_SIZE_BAR5_32)

\#endif

/\*- Event Types
-------------------------------------------------------------\*/

\#define VI_EVENT_IO_COMPLETION (0x3FFF2009UL)

\#define VI_EVENT_TRIG (0xBFFF200AUL)

\#define VI_EVENT_SERVICE_REQ (0x3FFF200BUL)

\#define VI_EVENT_CLEAR (0x3FFF200DUL)

\#define VI_EVENT_EXCEPTION (0xBFFF200EUL)

\#define VI_EVENT_GPIB_CIC (0x3FFF2012UL)

\#define VI_EVENT_GPIB_TALK (0x3FFF2013UL)

\#define VI_EVENT_GPIB_LISTEN (0x3FFF2014UL)

\#define VI_EVENT_VXI_VME_SYSFAIL (0x3FFF201DUL)

\#define VI_EVENT_VXI_VME_SYSRESET (0x3FFF201EUL)

\#define VI_EVENT_VXI_SIGP (0x3FFF2020UL)

\#define VI_EVENT_VXI_VME_INTR (0xBFFF2021UL)

\#define VI_EVENT_PXI_INTR (0x3FFF2022UL)

\#define VI_EVENT_TCPIP_CONNECT (0x3FFF2036UL)

\#define VI_EVENT_USB_INTR (0x3FFF2037UL)

\#define VI_ALL_ENABLED_EVENTS (0x3FFF7FFFUL)

/\*- Completion and Error Codes
----------------------------------------------\*/

\#define VI_SUCCESS_EVENT_EN (0x3FFF0002L) /\* 3FFF0002, 1073676290 \*/

\#define VI_SUCCESS_EVENT_DIS (0x3FFF0003L) /\* 3FFF0003, 1073676291 \*/

\#define VI_SUCCESS_QUEUE_EMPTY (0x3FFF0004L) /\* 3FFF0004, 1073676292
\*/

\#define VI_SUCCESS_TERM_CHAR (0x3FFF0005L) /\* 3FFF0005, 1073676293 \*/

\#define VI_SUCCESS_MAX_CNT (0x3FFF0006L) /\* 3FFF0006, 1073676294 \*/

\#define VI_SUCCESS_DEV_NPRESENT (0x3FFF007DL) /\* 3FFF007D, 1073676413
\*/

\#define VI_SUCCESS_TRIG_MAPPED (0x3FFF007EL) /\* 3FFF007E, 1073676414
\*/

\#define VI_SUCCESS_QUEUE_NEMPTY (0x3FFF0080L) /\* 3FFF0080, 1073676416
\*/

\#define VI_SUCCESS_NCHAIN (0x3FFF0098L) /\* 3FFF0098, 1073676440 \*/

\#define VI_SUCCESS_NESTED_SHARED (0x3FFF0099L) /\* 3FFF0099, 1073676441
\*/

\#define VI_SUCCESS_NESTED_EXCLUSIVE (0x3FFF009AL) /\* 3FFF009A,
1073676442 \*/

\#define VI_SUCCESS_SYNC (0x3FFF009BL) /\* 3FFF009B, 1073676443 \*/

\#define VI_WARN_QUEUE_OVERFLOW (0x3FFF000CL) /\* 3FFF000C, 1073676300
\*/

\#define VI_WARN_CONFIG_NLOADED (0x3FFF0077L) /\* 3FFF0077, 1073676407
\*/

\#define VI_WARN_NULL_OBJECT (0x3FFF0082L) /\* 3FFF0082, 1073676418 \*/

\#define VI_WARN_NSUP_ATTR_STATE (0x3FFF0084L) /\* 3FFF0084, 1073676420
\*/

\#define VI_WARN_UNKNOWN_STATUS (0x3FFF0085L) /\* 3FFF0085, 1073676421
\*/

\#define VI_WARN_NSUP_BUF (0x3FFF0088L) /\* 3FFF0088, 1073676424 \*/

\#define VI_WARN_EXT_FUNC_NIMPL (0x3FFF00A9L) /\* 3FFF00A9, 1073676457
\*/

\#define VI_WARN_SERVER_CERT_UNTRUSTED (0x3FFF00F0L) /\* 3FFF00F0,
1073676528 \*/

\#define VI_WARN_SERVER_CERT_INV_SUBJECT (0x3FFF00F1L) /\* 3FFF00F1,
1073676529 \*/

\#define VI_ERROR_SYSTEM_ERROR (\_VI_ERROR+0x3FFF0000L) /\* BFFF0000,
-1073807360 \*/

\#define VI_ERROR_INV_OBJECT (\_VI_ERROR+0x3FFF000EL) /\* BFFF000E,
-1073807346 \*/

\#define VI_ERROR_RSRC_LOCKED (\_VI_ERROR+0x3FFF000FL) /\* BFFF000F,
-1073807345 \*/

\#define VI_ERROR_INV_EXPR (\_VI_ERROR+0x3FFF0010L) /\* BFFF0010,
-1073807344 \*/

\#define VI_ERROR_RSRC_NFOUND (\_VI_ERROR+0x3FFF0011L) /\* BFFF0011,
-1073807343 \*/

\#define VI_ERROR_INV_RSRC_NAME (\_VI_ERROR+0x3FFF0012L) /\* BFFF0012,
-1073807342 \*/

\#define VI_ERROR_INV_ACC_MODE (\_VI_ERROR+0x3FFF0013L) /\* BFFF0013,
-1073807341 \*/

\#define VI_ERROR_TMO (\_VI_ERROR+0x3FFF0015L) /\* BFFF0015, -1073807339
\*/

\#define VI_ERROR_CLOSING_FAILED (\_VI_ERROR+0x3FFF0016L) /\* BFFF0016,
-1073807338 \*/

\#define VI_ERROR_INV_DEGREE (\_VI_ERROR+0x3FFF001BL) /\* BFFF001B,
-1073807333 \*/

\#define VI_ERROR_INV_JOB_ID (\_VI_ERROR+0x3FFF001CL) /\* BFFF001C,
-1073807332 \*/

\#define VI_ERROR_NSUP_ATTR (\_VI_ERROR+0x3FFF001DL) /\* BFFF001D,
-1073807331 \*/

\#define VI_ERROR_NSUP_ATTR_STATE (\_VI_ERROR+0x3FFF001EL) /\* BFFF001E,
-1073807330 \*/

\#define VI_ERROR_ATTR_READONLY (\_VI_ERROR+0x3FFF001FL) /\* BFFF001F,
-1073807329 \*/

\#define VI_ERROR_INV_LOCK_TYPE (\_VI_ERROR+0x3FFF0020L) /\* BFFF0020,
-1073807328 \*/

\#define VI_ERROR_INV_ACCESS_KEY (\_VI_ERROR+0x3FFF0021L) /\* BFFF0021,
-1073807327 \*/

\#define VI_ERROR_INV_EVENT (\_VI_ERROR+0x3FFF0026L) /\* BFFF0026,
-1073807322 \*/

\#define VI_ERROR_INV_MECH (\_VI_ERROR+0x3FFF0027L) /\* BFFF0027,
-1073807321 \*/

\#define VI_ERROR_HNDLR_NINSTALLED (\_VI_ERROR+0x3FFF0028L) /\*
BFFF0028, -1073807320 \*/

\#define VI_ERROR_INV_HNDLR_REF (\_VI_ERROR+0x3FFF0029L) /\* BFFF0029,
-1073807319 \*/

\#define VI_ERROR_INV_CONTEXT (\_VI_ERROR+0x3FFF002AL) /\* BFFF002A,
-1073807318 \*/

\#define VI_ERROR_NENABLED (\_VI_ERROR+0x3FFF002FL) /\* BFFF002F,
-1073807313 \*/

\#define VI_ERROR_ABORT (\_VI_ERROR+0x3FFF0030L) /\* BFFF0030,
-1073807312 \*/

\#define VI_ERROR_RAW_WR_PROT_VIOL (\_VI_ERROR+0x3FFF0034L) /\*
BFFF0034, -1073807308 \*/

\#define VI_ERROR_RAW_RD_PROT_VIOL (\_VI_ERROR+0x3FFF0035L) /\*
BFFF0035, -1073807307 \*/

\#define VI_ERROR_OUTP_PROT_VIOL (\_VI_ERROR+0x3FFF0036L) /\* BFFF0036,
-1073807306 \*/

\#define VI_ERROR_INP_PROT_VIOL (\_VI_ERROR+0x3FFF0037L) /\* BFFF0037,
-1073807305 \*/

\#define VI_ERROR_BERR (\_VI_ERROR+0x3FFF0038L) /\* BFFF0038,
-1073807304 \*/

\#define VI_ERROR_IN_PROGRESS (\_VI_ERROR+0x3FFF0039L) /\* BFFF0039,
-1073807303 \*/

\#define VI_ERROR_INV_SETUP (\_VI_ERROR+0x3FFF003AL) /\* BFFF003A,
-1073807302 \*/

\#define VI_ERROR_QUEUE_ERROR (\_VI_ERROR+0x3FFF003BL) /\* BFFF003B,
-1073807301 \*/

\#define VI_ERROR_ALLOC (\_VI_ERROR+0x3FFF003CL) /\* BFFF003C,
-1073807300 \*/

\#define VI_ERROR_INV_MASK (\_VI_ERROR+0x3FFF003DL) /\* BFFF003D,
-1073807299 \*/

\#define VI_ERROR_IO (\_VI_ERROR+0x3FFF003EL) /\* BFFF003E, -1073807298
\*/

\#define VI_ERROR_INV_FMT (\_VI_ERROR+0x3FFF003FL) /\* BFFF003F,
-1073807297 \*/

\#define VI_ERROR_NSUP_FMT (\_VI_ERROR+0x3FFF0041L) /\* BFFF0041,
-1073807295 \*/

\#define VI_ERROR_LINE_IN_USE (\_VI_ERROR+0x3FFF0042L) /\* BFFF0042,
-1073807294 \*/

\#define VI_ERROR_LINE_NRESERVED (\_VI_ERROR+0x3FFF0043L) /\* BFFF0043,
-1073807293 \*/

\#define VI_ERROR_NSUP_MODE (\_VI_ERROR+0x3FFF0046L) /\* BFFF0046,
-1073807290 \*/

\#define VI_ERROR_SRQ_NOCCURRED (\_VI_ERROR+0x3FFF004AL) /\* BFFF004A,
-1073807286 \*/

\#define VI_ERROR_INV_SPACE (\_VI_ERROR+0x3FFF004EL) /\* BFFF004E,
-1073807282 \*/

\#define VI_ERROR_INV_OFFSET (\_VI_ERROR+0x3FFF0051L) /\* BFFF0051,
-1073807279 \*/

\#define VI_ERROR_INV_WIDTH (\_VI_ERROR+0x3FFF0052L) /\* BFFF0052,
-1073807278 \*/

\#define VI_ERROR_NSUP_OFFSET (\_VI_ERROR+0x3FFF0054L) /\* BFFF0054,
-1073807276 \*/

\#define VI_ERROR_NSUP_VAR_WIDTH (\_VI_ERROR+0x3FFF0055L) /\* BFFF0055,
-1073807275 \*/

\#define VI_ERROR_WINDOW_NMAPPED (\_VI_ERROR+0x3FFF0057L) /\* BFFF0057,
-1073807273 \*/

\#define VI_ERROR_RESP_PENDING (\_VI_ERROR+0x3FFF0059L) /\* BFFF0059,
-1073807271 \*/

\#define VI_ERROR_NLISTENERS (\_VI_ERROR+0x3FFF005FL) /\* BFFF005F,
-1073807265 \*/

\#define VI_ERROR_NCIC (\_VI_ERROR+0x3FFF0060L) /\* BFFF0060,
-1073807264 \*/

\#define VI_ERROR_NSYS_CNTLR (\_VI_ERROR+0x3FFF0061L) /\* BFFF0061,
-1073807263 \*/

\#define VI_ERROR_NSUP_OPER (\_VI_ERROR+0x3FFF0067L) /\* BFFF0067,
-1073807257 \*/

\#define VI_ERROR_INTR_PENDING (\_VI_ERROR+0x3FFF0068L) /\* BFFF0068,
-1073807256 \*/

\#define VI_ERROR_ASRL_PARITY (\_VI_ERROR+0x3FFF006AL) /\* BFFF006A,
-1073807254 \*/

\#define VI_ERROR_ASRL_FRAMING (\_VI_ERROR+0x3FFF006BL) /\* BFFF006B,
-1073807253 \*/

\#define VI_ERROR_ASRL_OVERRUN (\_VI_ERROR+0x3FFF006CL) /\* BFFF006C,
-1073807252 \*/

\#define VI_ERROR_TRIG_NMAPPED (\_VI_ERROR+0x3FFF006EL) /\* BFFF006E,
-1073807250 \*/

\#define VI_ERROR_NSUP_ALIGN_OFFSET (\_VI_ERROR+0x3FFF0070L) /\*
BFFF0070, -1073807248 \*/

\#define VI_ERROR_USER_BUF (\_VI_ERROR+0x3FFF0071L) /\* BFFF0071,
-1073807247 \*/

\#define VI_ERROR_RSRC_BUSY (\_VI_ERROR+0x3FFF0072L) /\* BFFF0072,
-1073807246 \*/

\#define VI_ERROR_NSUP_WIDTH (\_VI_ERROR+0x3FFF0076L) /\* BFFF0076,
-1073807242 \*/

\#define VI_ERROR_INV_PARAMETER (\_VI_ERROR+0x3FFF0078L) /\* BFFF0078,
-1073807240 \*/

\#define VI_ERROR_INV_PROT (\_VI_ERROR+0x3FFF0079L) /\* BFFF0079,
-1073807239 \*/

\#define VI_ERROR_INV_SIZE (\_VI_ERROR+0x3FFF007BL) /\* BFFF007B,
-1073807237 \*/

\#define VI_ERROR_WINDOW_MAPPED (\_VI_ERROR+0x3FFF0080L) /\* BFFF0080,
-1073807232 \*/

\#define VI_ERROR_NIMPL_OPER (\_VI_ERROR+0x3FFF0081L) /\* BFFF0081,
-1073807231 \*/

\#define VI_ERROR_INV_LENGTH (\_VI_ERROR+0x3FFF0083L) /\* BFFF0083,
-1073807229 \*/

\#define VI_ERROR_INV_MODE (\_VI_ERROR+0x3FFF0091L) /\* BFFF0091,
-1073807215 \*/

\#define VI_ERROR_SESN_NLOCKED (\_VI_ERROR+0x3FFF009CL) /\* BFFF009C,
-1073807204 \*/

\#define VI_ERROR_MEM_NSHARED (\_VI_ERROR+0x3FFF009DL) /\* BFFF009D,
-1073807203 \*/

\#define VI_ERROR_LIBRARY_NFOUND (\_VI_ERROR+0x3FFF009EL) /\* BFFF009E,
-1073807202 \*/

\#define VI_ERROR_NSUP_INTR (\_VI_ERROR+0x3FFF009FL) /\* BFFF009F,
-1073807201 \*/

\#define VI_ERROR_INV_LINE (\_VI_ERROR+0x3FFF00A0L) /\* BFFF00A0,
-1073807200 \*/

\#define VI_ERROR_FILE_ACCESS (\_VI_ERROR+0x3FFF00A1L) /\* BFFF00A1,
-1073807199 \*/

\#define VI_ERROR_FILE_IO (\_VI_ERROR+0x3FFF00A2L) /\* BFFF00A2,
-1073807198 \*/

\#define VI_ERROR_NSUP_LINE (\_VI_ERROR+0x3FFF00A3L) /\* BFFF00A3,
-1073807197 \*/

\#define VI_ERROR_NSUP_MECH (\_VI_ERROR+0x3FFF00A4L) /\* BFFF00A4,
-1073807196 \*/

\#define VI_ERROR_INTF_NUM_NCONFIG (\_VI_ERROR+0x3FFF00A5L) /\*
BFFF00A5, -1073807195 \*/

\#define VI_ERROR_CONN_LOST (\_VI_ERROR+0x3FFF00A6L) /\* BFFF00A6,
-1073807194 \*/

\#define VI_ERROR_NPERMISSION (\_VI_ERROR+0x3FFF00A8L) /\* BFFF00A8,
-1073807192 \*/

\#define VI_ERROR_SERVER_CERT (\_VI_ERROR+0x3FFF00B0L) /\* BFFF00B0,
-1073807184 \*/

\#define VI_ERROR_SERVER_CERT_UNTRUSTED (\_VI_ERROR+0x3FFF00B1L) /\*
BFFF00B1, -1073807183 \*/

\#define VI_ERROR_SERVER_CERT_EXPIRED (\_VI_ERROR+0x3FFF00B2L) /\*
BFFF00B2, -1073807182 \*/

\#define VI_ERROR_SERVER_CERT_REVOKED (\_VI_ERROR+0x3FFF00B3L) /\*
BFFF00B3, -1073807181 \*/

\#define VI_ERROR_SERVER_CERT_INV_SUBJECT (\_VI_ERROR+0x3FFF00B4L) /\*
BFFF00B4, -1073807180 \*/

/\*- Other VISA Definitions
--------------------------------------------------\*/

\#define VI_VERSION_MAJOR(ver) ((((ViVersion)ver) & 0xFFF00000UL) \>\>
20)

\#define VI_VERSION_MINOR(ver) ((((ViVersion)ver) & 0x000FFF00UL) \>\>
8)

\#define VI_VERSION_SUBMINOR(ver) ((((ViVersion)ver) & 0x000000FFUL) )

\#define VI_FIND_BUFLEN (256)

\#define VI_INTF_GPIB (1)

\#define VI_INTF_VXI (2)

\#define VI_INTF_GPIB_VXI (3)

\#define VI_INTF_ASRL (4)

\#define VI_INTF_PXI (5)

\#define VI_INTF_TCPIP (6)

\#define VI_INTF_USB (7)

\#define VI_PROT_NORMAL (1)

\#define VI_PROT_FDC (2)

\#define VI_PROT_HS488 (3)

\#define VI_PROT_4882_STRS (4)

\#define VI_PROT_USBTMC_VENDOR (5)

\#define VI_FDC_NORMAL (1)

\#define VI_FDC_STREAM (2)

\#define VI_LOCAL_SPACE (0)

\#define VI_A16_SPACE (1)

\#define VI_A24_SPACE (2)

\#define VI_A32_SPACE (3)

\#define VI_A64_SPACE (4)

\#define VI_PXI_ALLOC_SPACE (9)

\#define VI_PXI_CFG_SPACE (10)

\#define VI_PXI_BAR0_SPACE (11)

\#define VI_PXI_BAR1_SPACE (12)

\#define VI_PXI_BAR2_SPACE (13)

\#define VI_PXI_BAR3_SPACE (14)

\#define VI_PXI_BAR4_SPACE (15)

\#define VI_PXI_BAR5_SPACE (16)

\#define VI_OPAQUE_SPACE (0xFFFF)

\#define VI_UNKNOWN_LA (-1)

\#define VI_UNKNOWN_SLOT (-1)

\#define VI_UNKNOWN_LEVEL (-1)

\#define VI_UNKNOWN_CHASSIS (-1)

\#define VI_QUEUE (1)

\#define VI_HNDLR (2)

\#define VI_SUSPEND_HNDLR (4)

\#define VI_ALL_MECH (0xFFFF)

\#define VI_ANY_HNDLR (0)

\#define VI_TRIG_ALL (-2)

\#define VI_TRIG_SW (-1)

\#define VI_TRIG_TTL0 (0)

\#define VI_TRIG_TTL1 (1)

\#define VI_TRIG_TTL2 (2)

\#define VI_TRIG_TTL3 (3)

\#define VI_TRIG_TTL4 (4)

\#define VI_TRIG_TTL5 (5)

\#define VI_TRIG_TTL6 (6)

\#define VI_TRIG_TTL7 (7)

\#define VI_TRIG_ECL0 (8)

\#define VI_TRIG_ECL1 (9)

\#define VI_TRIG_ECL2 (10)

\#define VI_TRIG_ECL3 (11)

\#define VI_TRIG_ECL4 (12)

\#define VI_TRIG_ECL5 (13)

\#define VI_TRIG_STAR_SLOT1 (14)

\#define VI_TRIG_STAR_SLOT2 (15)

\#define VI_TRIG_STAR_SLOT3 (16)

\#define VI_TRIG_STAR_SLOT4 (17)

\#define VI_TRIG_STAR_SLOT5 (18)

\#define VI_TRIG_STAR_SLOT6 (19)

\#define VI_TRIG_STAR_SLOT7 (20)

\#define VI_TRIG_STAR_SLOT8 (21)

\#define VI_TRIG_STAR_SLOT9 (22)

\#define VI_TRIG_STAR_SLOT10 (23)

\#define VI_TRIG_STAR_SLOT11 (24)

\#define VI_TRIG_STAR_SLOT12 (25)

\#define VI_TRIG_STAR_INSTR (26)

\#define VI_TRIG_PANEL_IN (27)

\#define VI_TRIG_PANEL_OUT (28)

\#define VI_TRIG_STAR_VXI0 (29)

\#define VI_TRIG_STAR_VXI1 (30)

\#define VI_TRIG_STAR_VXI2 (31)

\#define VI_TRIG_TTL8 (32)

\#define VI_TRIG_TTL9 (33)

\#define VI_TRIG_TTL10 (34)

\#define VI_TRIG_TTL11 (35)

\#define VI_TRIG_PROT_DEFAULT (0)

\#define VI_TRIG_PROT_ON (1)

\#define VI_TRIG_PROT_OFF (2)

\#define VI_TRIG_PROT_SYNC (5)

\#define VI_TRIG_PROT_RESERVE (6)

\#define VI_TRIG_PROT_UNRESERVE (7)

\#define VI_READ_BUF (1)

\#define VI_WRITE_BUF (2)

\#define VI_READ_BUF_DISCARD (4)

\#define VI_WRITE_BUF_DISCARD (8)

\#define VI_IO_IN_BUF (16)

\#define VI_IO_OUT_BUF (32)

\#define VI_IO_IN_BUF_DISCARD (64)

\#define VI_IO_OUT_BUF_DISCARD (128)

\#define VI_FLUSH_ON_ACCESS (1)

\#define VI_FLUSH_WHEN_FULL (2)

\#define VI_FLUSH_DISABLE (3)

\#define VI_NMAPPED (1)

\#define VI_USE_OPERS (2)

\#define VI_DEREF_ADDR (3)

\#define VI_TMO_IMMEDIATE (0L)

\#define VI_TMO_INFINITE (0xFFFFFFFFUL)

\#define VI_NO_LOCK (0)

\#define VI_EXCLUSIVE_LOCK (1)

\#define VI_SHARED_LOCK (2)

\#define VI_LOAD_CONFIG (4)

\#define VI_NO_SEC_ADDR (0xFFFF)

\#define VI_ASRL_PAR_NONE (0)

\#define VI_ASRL_PAR_ODD (1)

\#define VI_ASRL_PAR_EVEN (2)

\#define VI_ASRL_PAR_MARK (3)

\#define VI_ASRL_PAR_SPACE (4)

\#define VI_ASRL_STOP_ONE (10)

\#define VI_ASRL_STOP_ONE5 (15)

\#define VI_ASRL_STOP_TWO (20)

\#define VI_ASRL_FLOW_NONE (0)

\#define VI_ASRL_FLOW_XON_XOFF (1)

\#define VI_ASRL_FLOW_RTS_CTS (2)

\#define VI_ASRL_FLOW_DTR_DSR (4)

\#define VI_ASRL_END_NONE (0)

\#define VI_ASRL_END_LAST_BIT (1)

\#define VI_ASRL_END_TERMCHAR (2)

\#define VI_ASRL_END_BREAK (3)

\#define VI_STATE_ASSERTED (1)

\#define VI_STATE_UNASSERTED (0)

\#define VI_STATE_UNKNOWN (-1)

\#define VI_BIG_ENDIAN (0)

\#define VI_LITTLE_ENDIAN (1)

\#define VI_DATA_PRIV (0)

\#define VI_DATA_NPRIV (1)

\#define VI_PROG_PRIV (2)

\#define VI_PROG_NPRIV (3)

\#define VI_BLCK_PRIV (4)

\#define VI_BLCK_NPRIV (5)

\#define VI_D64_PRIV (6)

\#define VI_D64_NPRIV (7)

\#define VI_D64_2EVME (8)

\#define VI_D64_SST160 (9)

\#define VI_D64_SST267 (10)

\#define VI_D64_SST320 (11)

\#define VI_WIDTH_8 (1)

\#define VI_WIDTH_16 (2)

\#define VI_WIDTH_32 (4)

\#define VI_WIDTH_64 (8)

\#define VI_GPIB_REN_DEASSERT (0)

\#define VI_GPIB_REN_ASSERT (1)

\#define VI_GPIB_REN_DEASSERT_GTL (2)

\#define VI_GPIB_REN_ASSERT_ADDRESS (3)

\#define VI_GPIB_REN_ASSERT_LLO (4)

\#define VI_GPIB_REN_ASSERT_ADDRESS_LLO (5)

\#define VI_GPIB_REN_ADDRESS_GTL (6)

\#define VI_GPIB_ATN_DEASSERT (0)

\#define VI_GPIB_ATN_ASSERT (1)

\#define VI_GPIB_ATN_DEASSERT_HANDSHAKE (2)

\#define VI_GPIB_ATN_ASSERT_IMMEDIATE (3)

\#define VI_GPIB_HS488_DISABLED (0)

\#define VI_GPIB_HS488_NIMPL (-1)

\#define VI_GPIB_UNADDRESSED (0)

\#define VI_GPIB_TALKER (1)

\#define VI_GPIB_LISTENER (2)

\#define VI_VXI_CMD16 (0x0200)

\#define VI_VXI_CMD16_RESP16 (0x0202)

\#define VI_VXI_RESP16 (0x0002)

\#define VI_VXI_CMD32 (0x0400)

\#define VI_VXI_CMD32_RESP16 (0x0402)

\#define VI_VXI_CMD32_RESP32 (0x0404)

\#define VI_VXI_RESP32 (0x0004)

\#define VI_ASSERT_SIGNAL (-1)

\#define VI_ASSERT_USE_ASSIGNED (0)

\#define VI_ASSERT_IRQ1 (1)

\#define VI_ASSERT_IRQ2 (2)

\#define VI_ASSERT_IRQ3 (3)

\#define VI_ASSERT_IRQ4 (4)

\#define VI_ASSERT_IRQ5 (5)

\#define VI_ASSERT_IRQ6 (6)

\#define VI_ASSERT_IRQ7 (7)

\#define VI_UTIL_ASSERT_SYSRESET (1)

\#define VI_UTIL_ASSERT_SYSFAIL (2)

\#define VI_UTIL_DEASSERT_SYSFAIL (3)

\#define VI_VXI_CLASS_MEMORY (0)

\#define VI_VXI_CLASS_EXTENDED (1)

\#define VI_VXI_CLASS_MESSAGE (2)

\#define VI_VXI_CLASS_REGISTER (3)

\#define VI_VXI_CLASS_OTHER (4)

\#define VI_PXI_ADDR_NONE (0)

\#define VI_PXI_ADDR_MEM (1)

\#define VI_PXI_ADDR_IO (2)

\#define VI_PXI_ADDR_CFG (3)

\#define VI_TRIG_UNKNOWN (-1)

\#define VI_PXI_LBUS_STAR_TRIG_BUS_0 (1000)

\#define VI_PXI_LBUS_STAR_TRIG_BUS_1 (1001)

\#define VI_PXI_LBUS_STAR_TRIG_BUS_2 (1002)

\#define VI_PXI_LBUS_STAR_TRIG_BUS_3 (1003)

\#define VI_PXI_LBUS_STAR_TRIG_BUS_4 (1004)

\#define VI_PXI_LBUS_STAR_TRIG_BUS_5 (1005)

\#define VI_PXI_LBUS_STAR_TRIG_BUS_6 (1006)

\#define VI_PXI_LBUS_STAR_TRIG_BUS_7 (1007)

\#define VI_PXI_LBUS_STAR_TRIG_BUS_8 (1008)

\#define VI_PXI_LBUS_STAR_TRIG_BUS_9 (1009)

\#define VI_PXI_STAR_TRIG_CONTROLLER (1413)

/\*- Backward Compatibility Macros
-----------------------------------------\*/

\#define viGetDefaultRM(vi) viOpenDefaultRM(vi)

\#define VI_ERROR_INV_SESSION (VI_ERROR_INV_OBJECT)

\#define VI_INFINITE (VI_TMO_INFINITE)

\#define VI_NORMAL (VI_PROT_NORMAL)

\#define VI_FDC (VI_PROT_FDC)

\#define VI_HS488 (VI_PROT_HS488)

\#define VI_ASRL488 (VI_PROT_4882_STRS)

\#define VI_ASRL_IN_BUF (VI_IO_IN_BUF)

\#define VI_ASRL_OUT_BUF (VI_IO_OUT_BUF)

\#define VI_ASRL_IN_BUF_DISCARD (VI_IO_IN_BUF_DISCARD)

\#define VI_ASRL_OUT_BUF_DISCARD (VI_IO_OUT_BUF_DISCARD)

\#if defined(\_\_cplusplus) \|\| defined(\_\_cplusplus\_\_)

}

\#endif

\#endif

/\*- The End
-----------------------------------------------------------------\*/

## A.3 Contents of visa32.bas File  [a.3-contents-of-visa32.bas-file]

This file reflects the required implementation of the specifications
given in this document. It is provided as a reference and may not have
the same date or version as the actual file installed on the system.

'
-------------------------------------------------------------------------

' Distributed by VXIplug&play Systems Alliance

' Do not modify the contents of this file.

'
-------------------------------------------------------------------------

' Title : VISA32.BAS

' Date : 10-04-2021

' Purpose : Include file for the VISA Library 7.2 spec

'
-------------------------------------------------------------------------

Global Const VI_SPEC_VERSION = &H00500000&

' - Resource Template Functions and Operations
----------------------------

Declare Function viOpenDefaultRM Lib "VISA32.DLL" Alias "#141" (sesn As
Long) As Long

Declare Function viGetDefaultRM Lib "VISA32.DLL" Alias "#128" (sesn As
Long) As Long

Declare Function viFindRsrc Lib "VISA32.DLL" Alias "#129" (ByVal sesn As
Long, ByVal expr As String, vi As Long, retCount As Long, ByVal desc As
String) As Long

Declare Function viFindNext Lib "VISA32.DLL" Alias "#130" (ByVal vi As
Long, ByVal desc As String) As Long

Declare Function viParseRsrc Lib "VISA32.DLL" Alias "#146" (ByVal sesn
As Long, ByVal desc As String, intfType As Integer, intfNum As Integer)
As Long

Declare Function viParseRsrcEx Lib "VISA32.DLL" Alias "#147" (ByVal sesn
As Long, ByVal desc As String, intfType As Integer, intfNum As Integer,
ByVal rsrcClass As String, ByVal expandedUnaliasedName As String, ByVal
aliasIfExists As String) As Long

Declare Function viOpen Lib "VISA32.DLL" Alias "#131" (ByVal sesn As
Long, ByVal viDesc As String, ByVal mode As Long, ByVal timeout As Long,
vi As Long) As Long

Declare Function viClose Lib "VISA32.DLL" Alias "#132" (ByVal vi As
Long) As Long

Declare Function viGetAttribute Lib "VISA32.DLL" Alias "#133" (ByVal vi
As Long, ByVal attrName As Long, attrValue As Any) As Long

Declare Function viSetAttribute Lib "VISA32.DLL" Alias "#134" (ByVal vi
As Long, ByVal attrName As Long, ByVal attrValue As Long) As Long

Declare Function viStatusDesc Lib "VISA32.DLL" Alias "#142" (ByVal vi As
Long, ByVal status As Long, ByVal desc As String) As Long

Declare Function viLock Lib "VISA32.DLL" Alias "#144" (ByVal vi As Long,
ByVal lockType As Long, ByVal timeout As Long, ByVal requestedKey As
String, ByVal accessKey As String) As Long

Declare Function viUnlock Lib "VISA32.DLL" Alias "#145" (ByVal vi As
Long) As Long

Declare Function viEnableEvent Lib "VISA32.DLL" Alias "#135" (ByVal vi
As Long, ByVal eventType As Long, ByVal mechanism As Integer, ByVal
context As Long) As Long

Declare Function viDisableEvent Lib "VISA32.DLL" Alias "#136" (ByVal vi
As Long, ByVal eventType As Long, ByVal mechanism As Integer) As Long

Declare Function viDiscardEvents Lib "VISA32.DLL" Alias "#137" (ByVal vi
As Long, ByVal eventType As Long, ByVal mechanism As Integer) As Long

Declare Function viWaitOnEvent Lib "VISA32.DLL" Alias "#138" (ByVal vi
As Long, ByVal inEventType As Long, ByVal timeout As Long, outEventType
As Long, outEventContext As Long) As Long

' - Basic I/O Operations
--------------------------------------------------

Declare Function viRead Lib "VISA32.DLL" Alias "#256" (ByVal vi As Long,
ByVal Buffer As String, ByVal count As Long, retCount As Long) As Long

Declare Function viReadToFile Lib "VISA32.DLL" Alias "#219" (ByVal vi As
Long, ByVal filename As String, ByVal count As Long, retCount As Long)
As Long

Declare Function viWrite Lib "VISA32.DLL" Alias "#257" (ByVal vi As
Long, ByVal Buffer As String, ByVal count As Long, retCount As Long) As
Long

Declare Function viWriteFromFile Lib "VISA32.DLL" Alias "#218" (ByVal vi
As Long, ByVal filename As String, ByVal count As Long, retCount As
Long) As Long

Declare Function viAssertTrigger Lib "VISA32.DLL" Alias "#258"(ByVal vi
As Long, ByVal protocol As Integer) As Long

Declare Function viReadSTB Lib "VISA32.DLL" Alias "#259" (ByVal vi As
Long, status As Integer) As Long

Declare Function viClear Lib "VISA32.DLL" Alias "#260" (ByVal vi As
Long) As Long

' - Formatted and Buffered I/O Operations
---------------------------------

Declare Function viSetBuf Lib "VISA32.DLL" Alias "#267" (ByVal vi As
Long, ByVal mask As Integer, ByVal bufSize As Long) As Long

Declare Function viFlush Lib "VISA32.DLL" Alias "#268" (ByVal vi As
Long, ByVal mask As Integer) As Long

Declare Function viBufWrite Lib "VISA32.DLL" Alias "#202" (ByVal vi As
Long, ByVal Buffer As String, ByVal count As Long, retCount As Long) As
Long

Declare Function viBufRead Lib "VISA32.DLL" Alias "#203" (ByVal vi As
Long, ByVal Buffer As String, ByVal count As Long, retCount As Long) As
Long

Declare Function viVPrintf Lib "VISA32.DLL" Alias "#270" (ByVal vi As
Long, ByVal writeFmt As String, params As Any) As Long

Declare Function viVSPrintf Lib "VISA32.DLL" Alias "#205" (ByVal vi As
Long, ByVal Buffer As String, ByVal writeFmt As String, params As Any)
As Long

Declare Function viVScanf Lib "VISA32.DLL" Alias "#272" (ByVal vi As
Long, ByVal readFmt As String, params As Any) As Long

Declare Function viVSScanf Lib "VISA32.DLL" Alias "#207" (ByVal vi As
Long, ByVal Buffer As String, ByVal readFmt As String, params As Any) As
Long

Declare Function viVQueryf Lib "VISA32.DLL" Alias "#280" (ByVal vi As
Long, ByVal writeFmt As String, ByVal readFmt As String, params As Any)
As Long

' - Memory I/O Operations
-------------------------------------------------

Declare Function viIn8 Lib "VISA32.DLL" Alias "#273" (ByVal vi As Long,
ByVal accSpace As Integer, ByVal offset As Long, val8 As Byte) As Long

Declare Function viOut8 Lib "VISA32.DLL" Alias "#274" (ByVal vi As Long,
ByVal accSpace As Integer, ByVal offset As Long, ByVal val8 As Byte) As
Long

Declare Function viIn16 Lib "VISA32.DLL" Alias "#261" (ByVal vi As Long,
ByVal accSpace As Integer, ByVal offset As Long, val16 As Integer) As
Long

Declare Function viOut16 Lib "VISA32.DLL" Alias "#262" (ByVal vi As
Long, ByVal accSpace As Integer, ByVal offset As Long, ByVal val16 As
Integer) As Long

Declare Function viIn32 Lib "VISA32.DLL" Alias "#281" (ByVal vi As Long,
ByVal accSpace As Integer, ByVal offset As Long, val32 As Long) As Long

Declare Function viOut32 Lib "VISA32.DLL" Alias "#282" (ByVal vi As
Long, ByVal accSpace As Integer, ByVal offset As Long, ByVal val32 As
Long) As Long

Declare Function viMoveIn8 Lib "VISA32.DLL" Alias "#283" (ByVal vi As
Long, ByVal accSpace As Integer, ByVal offset As Long, ByVal length As
Long, buf8 As Byte) As Long

Declare Function viMoveOut8 Lib "VISA32.DLL" Alias "#284" (ByVal vi As
Long, ByVal accSpace As Integer, ByVal offset As Long, ByVal length As
Long, buf8 As Byte) As Long

Declare Function viMoveIn16 Lib "VISA32.DLL" Alias "#285" (ByVal vi As
Long, ByVal accSpace As Integer, ByVal offset As Long, ByVal length As
Long, buf16 As Integer) As Long

Declare Function viMoveOut16 Lib "VISA32.DLL" Alias "#286" (ByVal vi As
Long, ByVal accSpace As Integer, ByVal offset As Long, ByVal length As
Long, buf16 As Integer) As Long

Declare Function viMoveIn32 Lib "VISA32.DLL" Alias "#287" (ByVal vi As
Long, ByVal accSpace As Integer, ByVal offset As Long, ByVal length As
Long, buf32 As Long) As Long

Declare Function viMoveOut32 Lib "VISA32.DLL" Alias "#288" (ByVal vi As
Long, ByVal accSpace As Integer, ByVal offset As Long, ByVal length As
Long, buf32 As Long) As Long

Declare Function viMove Lib "VISA32.DLL" Alias "#200" (ByVal vi As Long,
ByVal srcSpace As Integer, ByVal srcOffset As Long, ByVal srcWidth As
Integer, ByVal destSpace As Integer, ByVal destOffset As Long, ByVal
destWidth As Integer, ByVal srcLength As Long) As Long

Declare Function viMapAddress Lib "VISA32.DLL" Alias "#263" (ByVal vi As
Long, ByVal mapSpace As Integer, ByVal mapOffset As Long, ByVal mapSize
As Long, ByVal accMode As Integer, ByVal suggested As Long, address As
Long) As Long

Declare Function viUnmapAddress Lib "VISA32.DLL" Alias "#264" (ByVal vi
As Long) As Long

Declare Sub viPeek8 Lib "VISA32.DLL" Alias "#275" (ByVal vi As Long,
ByVal address As Long, val8 As Byte)

Declare Sub viPoke8 Lib "VISA32.DLL" Alias "#276" (ByVal vi As Long,
ByVal address As Long, ByVal val8 As Byte)

Declare Sub viPeek16 Lib "VISA32.DLL" Alias "#265" (ByVal vi As Long,
ByVal address As Long, val16 As Integer)

Declare Sub viPoke16 Lib "VISA32.DLL" Alias "#266" (ByVal vi As Long,
ByVal address As Long, ByVal val16 As Integer)

Declare Sub viPeek32 Lib "VISA32.DLL" Alias "#289" (ByVal vi As Long,
ByVal address As Long, val32 As Long)

Declare Sub viPoke32 Lib "VISA32.DLL" Alias "#290" (ByVal vi As Long,
ByVal address As Long, ByVal val32 As Long)

' - Shared Memory Operations
----------------------------------------------

Declare Function viMemAlloc Lib "VISA32.DLL" Alias "#291" (ByVal vi As
Long, ByVal memSize As Long, offset As Long) As Long

Declare Function viMemFree Lib "VISA32.DLL" Alias "#292" (ByVal vi As
Long, ByVal offset As Long) As Long

' - Interface Specific Operations
-----------------------------------------

Declare Function viGpibControlREN Lib "VISA32.DLL" Alias "#208" (ByVal
vi As Long, ByVal mode As Integer) As Long

Declare Function viGpibControlATN Lib "VISA32.DLL" Alias "#210" (ByVal
vi As Long, ByVal mode As Integer) As Long

Declare Function viGpibSendIFC Lib "VISA32.DLL" Alias "#211" (ByVal vi
As Long) As Long

Declare Function viGpibCommand Lib "VISA32.DLL" Alias "#212" (ByVal vi
As Long, ByVal Buffer As String, ByVal count As Long, retCount As Long)
As Long

Declare Function viGpibPassControl Lib "VISA32.DLL" Alias "#213" (ByVal
vi As Long, ByVal primAddr As Integer, ByVal secAddr As Integer) As Long

Declare Function viVxiCommandQuery Lib "VISA32.DLL" Alias "#209" (ByVal
vi As Long, ByVal mode As Integer, ByVal devCmd As Long, devResponse As
Long) As Long

Declare Function viAssertUtilSignal Lib "VISA32.DLL" Alias "#214" (ByVal
vi As Long, ByVal line As Integer) As Long

Declare Function viAssertIntrSignal Lib "VISA32.DLL" Alias "#215" (ByVal
vi As Long, ByVal mode As Integer, ByVal statusID As Long) As Long

Declare Function viMapTrigger Lib "VISA32.DLL" Alias "#216" (ByVal vi As
Long, ByVal trigSrc As Integer, ByVal trigDest As Integer, ByVal mode As
Integer) As Long

Declare Function viUnmapTrigger Lib "VISA32.DLL" Alias "#217" (ByVal vi
As Long, ByVal trigSrc As Integer, ByVal trigDest As Integer) As Long

Declare Function viUsbControlOut Lib "VISA32.DLL" Alias "#293" (ByVal vi
As Long, ByVal bmRequestType As Integer, ByVal bRequest As Integer,
ByVal wValue As Integer, ByVal wIndex As Integer, ByVal wLength As
Integer, buf As Byte) As Long

Declare Function viUsbControlIn Lib "VISA32.DLL" Alias "#294" (ByVal vi
As Long, ByVal bmRequestType As Integer, ByVal bRequest As Integer,
ByVal wValue As Integer, ByVal wIndex As Integer, ByVal wLength As
Integer, buf As Byte, retCnt As Integer) As Long

' - Attributes
------------------------------------------------------------

Global Const VI_ATTR_RSRC_CLASS = &HBFFF0001&

Global Const VI_ATTR_RSRC_NAME = &HBFFF0002&

Global Const VI_ATTR_RSRC_IMPL_VERSION = &H3FFF0003&

Global Const VI_ATTR_RSRC_LOCK_STATE = &H3FFF0004&

Global Const VI_ATTR_MAX_QUEUE_LENGTH = &H3FFF0005&

Global Const VI_ATTR_USER_DATA = &H3FFF0007&

Global Const VI_ATTR_USER_DATA_32 = &H3FFF0007&

Global Const VI_ATTR_FDC_CHNL = &H3FFF000D&

Global Const VI_ATTR_FDC_MODE = &H3FFF000F&

Global Const VI_ATTR_FDC_GEN_SIGNAL_EN = &H3FFF0011&

Global Const VI_ATTR_FDC_USE_PAIR = &H3FFF0013&

Global Const VI_ATTR_SEND_END_EN = &H3FFF0016&

Global Const VI_ATTR_TERMCHAR = &H3FFF0018&

Global Const VI_ATTR_TMO_VALUE = &H3FFF001A&

Global Const VI_ATTR_GPIB_READDR_EN = &H3FFF001B&

Global Const VI_ATTR_IO_PROT = &H3FFF001C&

Global Const VI_ATTR_DMA_ALLOW_EN = &H3FFF001E&

Global Const VI_ATTR_ASRL_BAUD = &H3FFF0021&

Global Const VI_ATTR_ASRL_DATA_BITS = &H3FFF0022&

Global Const VI_ATTR_ASRL_PARITY = &H3FFF0023&

Global Const VI_ATTR_ASRL_STOP_BITS = &H3FFF0024&

Global Const VI_ATTR_ASRL_FLOW_CNTRL = &H3FFF0025&

Global Const VI_ATTR_RD_BUF_OPER_MODE = &H3FFF002A&

Global Const VI_ATTR_RD_BUF_SIZE = &H3FFF002B&

Global Const VI_ATTR_WR_BUF_OPER_MODE = &H3FFF002D&

Global Const VI_ATTR_WR_BUF_SIZE = &H3FFF002E&

Global Const VI_ATTR_SUPPRESS_END_EN = &H3FFF0036&

Global Const VI_ATTR_TERMCHAR_EN = &H3FFF0038&

Global Const VI_ATTR_DEST_ACCESS_PRIV = &H3FFF0039&

Global Const VI_ATTR_DEST_BYTE_ORDER = &H3FFF003A&

Global Const VI_ATTR_SRC_ACCESS_PRIV = &H3FFF003C&

Global Const VI_ATTR_SRC_BYTE_ORDER = &H3FFF003D&

Global Const VI_ATTR_SRC_INCREMENT = &H3FFF0040&

Global Const VI_ATTR_DEST_INCREMENT = &H3FFF0041&

Global Const VI_ATTR_WIN_ACCESS_PRIV = &H3FFF0045&

Global Const VI_ATTR_WIN_BYTE_ORDER = &H3FFF0047&

Global Const VI_ATTR_GPIB_ATN_STATE = &H3FFF0057&

Global Const VI_ATTR_GPIB_ADDR_STATE = &H3FFF005C&

Global Const VI_ATTR_GPIB_CIC_STATE = &H3FFF005E&

Global Const VI_ATTR_GPIB_NDAC_STATE = &H3FFF0062&

Global Const VI_ATTR_GPIB_SRQ_STATE = &H3FFF0067&

Global Const VI_ATTR_GPIB_SYS_CNTRL_STATE = &H3FFF0068&

Global Const VI_ATTR_GPIB_HS488_CBL_LEN = &H3FFF0069&

Global Const VI_ATTR_CMDR_LA = &H3FFF006B&

Global Const VI_ATTR_VXI_DEV_CLASS = &H3FFF006C&

Global Const VI_ATTR_MAINFRAME_LA = &H3FFF0070&

Global Const VI_ATTR_MANF_NAME = &HBFFF0072&

Global Const VI_ATTR_MODEL_NAME = &HBFFF0077&

Global Const VI_ATTR_VXI_VME_INTR_STATUS = &H3FFF008B&

Global Const VI_ATTR_VXI_TRIG_STATUS = &H3FFF008D&

Global Const VI_ATTR_VXI_VME_SYSFAIL_STATE = &H3FFF0094&

Global Const VI_ATTR_WIN_BASE_ADDR = &H3FFF0098&

Global Const VI_ATTR_WIN_BASE_ADDR_32 = &H3FFF0098&

Global Const VI_ATTR_WIN_SIZE = &H3FFF009A&

Global Const VI_ATTR_WIN_SIZE_32 = &H3FFF009A&

Global Const VI_ATTR_ASRL_AVAIL_NUM = &H3FFF00AC&

Global Const VI_ATTR_MEM_BASE = &H3FFF00AD&

Global Const VI_ATTR_MEM_BASE_32 = &H3FFF00AD&

Global Const VI_ATTR_ASRL_CTS_STATE = &H3FFF00AE&

Global Const VI_ATTR_ASRL_DCD_STATE = &H3FFF00AF&

Global Const VI_ATTR_ASRL_DSR_STATE = &H3FFF00B1&

Global Const VI_ATTR_ASRL_DTR_STATE = &H3FFF00B2&

Global Const VI_ATTR_ASRL_END_IN = &H3FFF00B3&

Global Const VI_ATTR_ASRL_END_OUT = &H3FFF00B4&

Global Const VI_ATTR_ASRL_REPLACE_CHAR = &H3FFF00BE&

Global Const VI_ATTR_ASRL_RI_STATE = &H3FFF00BF&

Global Const VI_ATTR_ASRL_RTS_STATE = &H3FFF00C0&

Global Const VI_ATTR_ASRL_XON_CHAR = &H3FFF00C1&

Global Const VI_ATTR_ASRL_XOFF_CHAR = &H3FFF00C2&

Global Const VI_ATTR_WIN_ACCESS = &H3FFF00C3&

Global Const VI_ATTR_RM_SESSION = &H3FFF00C4&

Global Const VI_ATTR_VXI_LA = &H3FFF00D5&

Global Const VI_ATTR_MANF_ID = &H3FFF00D9&

Global Const VI_ATTR_MEM_SIZE = &H3FFF00DD&

Global Const VI_ATTR_MEM_SIZE_32 = &H3FFF00DD&

Global Const VI_ATTR_MEM_SPACE = &H3FFF00DE&

Global Const VI_ATTR_MODEL_CODE = &H3FFF00DF&

Global Const VI_ATTR_SLOT = &H3FFF00E8&

Global Const VI_ATTR_INTF_INST_NAME = &HBFFF00E9&

Global Const VI_ATTR_IMMEDIATE_SERV = &H3FFF0100&

Global Const VI_ATTR_INTF_PARENT_NUM = &H3FFF0101&

Global Const VI_ATTR_RSRC_SPEC_VERSION = &H3FFF0170&

Global Const VI_ATTR_INTF_TYPE = &H3FFF0171&

Global Const VI_ATTR_GPIB_PRIMARY_ADDR = &H3FFF0172&

Global Const VI_ATTR_GPIB_SECONDARY_ADDR = &H3FFF0173&

Global Const VI_ATTR_RSRC_MANF_NAME = &HBFFF0174&

Global Const VI_ATTR_RSRC_MANF_ID = &H3FFF0175&

Global Const VI_ATTR_INTF_NUM = &H3FFF0176&

Global Const VI_ATTR_TRIG_ID = &H3FFF0177&

Global Const VI_ATTR_GPIB_REN_STATE = &H3FFF0181&

Global Const VI_ATTR_GPIB_UNADDR_EN = &H3FFF0184&

Global Const VI_ATTR_DEV_STATUS_BYTE = &H3FFF0189&

Global Const VI_ATTR_FILE_APPEND_EN = &H3FFF0192&

Global Const VI_ATTR_VXI_TRIG_SUPPORT = &H3FFF0194&

Global Const VI_ATTR_TCPIP_ADDR = &HBFFF0195&

Global Const VI_ATTR_TCPIP_HOSTNAME = &HBFFF0196&

Global Const VI_ATTR_TCPIP_PORT = &H3FFF0197&

Global Const VI_ATTR_TCPIP_DEVICE_NAME = &HBFFF0199&

Global Const VI_ATTR_TCPIP_NODELAY = &H3FFF019A&

Global Const VI_ATTR_TCPIP_KEEPALIVE = &H3FFF019B&

Global Const VI_ATTR_4882_COMPLIANT = &H3FFF019F&

Global Const VI_ATTR_USB_SERIAL_NUM = &HBFFF01A0&

Global Const VI_ATTR_USB_INTFC_NUM = &H3FFF01A1&

Global Const VI_ATTR_USB_PROTOCOL = &H3FFF01A7&

Global Const VI_ATTR_USB_MAX_INTR_SIZE = &H3FFF01AF&

Global Const VI_ATTR_PXI_DEV_NUM = &H3FFF0201&

Global Const VI_ATTR_PXI_FUNC_NUM = &H3FFF0202&

Global Const VI_ATTR_PXI_BUS_NUM = &H3FFF0205&

Global Const VI_ATTR_PXI_CHASSIS = &H3FFF0206&

Global Const VI_ATTR_PXI_SLOTPATH = &HBFFF0207&

Global Const VI_ATTR_PXI_SLOT_LBUS_LEFT = &H3FFF0208&

Global Const VI_ATTR_PXI_SLOT_LBUS_RIGHT = &H3FFF0209&

Global Const VI_ATTR_PXI_TRIG_BUS = &H3FFF020A&

Global Const VI_ATTR_PXI_STAR_TRIG_BUS = &H3FFF020B&

Global Const VI_ATTR_PXI_STAR_TRIG_LINE = &H3FFF020C&

Global Const VI_ATTR_PXI_MEM_TYPE_BAR0 = &H3FFF0211&

Global Const VI_ATTR_PXI_MEM_TYPE_BAR1 = &H3FFF0212&

Global Const VI_ATTR_PXI_MEM_TYPE_BAR2 = &H3FFF0213&

Global Const VI_ATTR_PXI_MEM_TYPE_BAR3 = &H3FFF0214&

Global Const VI_ATTR_PXI_MEM_TYPE_BAR4 = &H3FFF0215&

Global Const VI_ATTR_PXI_MEM_TYPE_BAR5 = &H3FFF0216&

Global Const VI_ATTR_PXI_MEM_BASE_BAR0 = &H3FFF0221&

Global Const VI_ATTR_PXI_MEM_BASE_BAR1 = &H3FFF0222&

Global Const VI_ATTR_PXI_MEM_BASE_BAR2 = &H3FFF0223&

Global Const VI_ATTR_PXI_MEM_BASE_BAR3 = &H3FFF0224&

Global Const VI_ATTR_PXI_MEM_BASE_BAR4 = &H3FFF0225&

Global Const VI_ATTR_PXI_MEM_BASE_BAR5 = &H3FFF0226&

Global Const VI_ATTR_PXI_MEM_SIZE_BAR0 = &H3FFF0231&

Global Const VI_ATTR_PXI_MEM_SIZE_BAR1 = &H3FFF0232&

Global Const VI_ATTR_PXI_MEM_SIZE_BAR2 = &H3FFF0233&

Global Const VI_ATTR_PXI_MEM_SIZE_BAR3 = &H3FFF0234&

Global Const VI_ATTR_PXI_MEM_SIZE_BAR4 = &H3FFF0235&

Global Const VI_ATTR_PXI_MEM_SIZE_BAR5 = &H3FFF0236&

Global Const VI_ATTR_PXI_IS_EXPRESS = &H3FFF0240&

Global Const VI_ATTR_PXI_SLOT_LWIDTH = &H3FFF0241&

Global Const VI_ATTR_PXI_MAX_LWIDTH = &H3FFF0242&

Global Const VI_ATTR_PXI_ACTUAL_LWIDTH = &H3FFF0243&

Global Const VI_ATTR_PXI_DSTAR_BUS = &H3FFF0244&

Global Const VI_ATTR_PXI_DSTAR_SET = &H3FFF0245&

Global Const VI_ATTR_PXI_ALLOW_WRITE_COMBINE = &H3FFF0246&

Global Const VI_ATTR_PXI_SLOT_WIDTH = &H3FFF0247&

Global Const VI_ATTR_PXI_SLOT_OFFSET = &H3FFF0248&

Global Const VI_ATTR_TCPIP_SERVER_CERT_ISSUER_NAME = &HBFFF0270&

Global Const VI_ATTR_TCPIP_SERVER_CERT_SUBJECT_NAME = &HBFFF0271&

Global Const VI_ATTR_TCPIP_SERVER_CERT_EXPIRATION_DATE = &HBFFF0272&

Global Const VI_ATTR_TCPIP_SERVER_CERT_IS_PERPETUAL = &H3FFF0273&

Global Const VI_ATTR_TCPIP_SASL_MECHANISM = &HBFFF0274&

Global Const VI_ATTR_TCPIP_TLS_CIPHER_SUITE = &HBFFF0275&

Global Const VI_ATTR_TCPIP_SERVER_CERT = &HBFFF0276&

Global Const VI_ATTR_TCPIP_SERVER_CERT_SIZE = &H3FFF0277&

Global Const VI_ATTR_TCPIP_HISLIP_OVERLAP_EN = &H3FFF0300&

Global Const VI_ATTR_TCPIP_HISLIP_VERSION = &H3FFF0301&

Global Const VI_ATTR_TCPIP_HISLIP_MAX_MESSAGE_KB = &H3FFF0302&

Global Const VI_ATTR_TCPIP_HISLIP_ENCRYPTION_EN = &H3FFF0304&

Global Const VI_ATTR_JOB_ID = &H3FFF4006&

Global Const VI_ATTR_EVENT_TYPE = &H3FFF4010&

Global Const VI_ATTR_SIGP_STATUS_ID = &H3FFF4011&

Global Const VI_ATTR_RECV_TRIG_ID = &H3FFF4012&

Global Const VI_ATTR_INTR_STATUS_ID = &H3FFF4023&

Global Const VI_ATTR_STATUS = &H3FFF4025&

Global Const VI_ATTR_RET_COUNT = &H3FFF4026&

Global Const VI_ATTR_RET_COUNT_32 = &H3FFF4026&

Global Const VI_ATTR_BUFFER = &H3FFF4027&

Global Const VI_ATTR_RECV_INTR_LEVEL = &H3FFF4041&

Global Const VI_ATTR_OPER_NAME = &HBFFF4042&

Global Const VI_ATTR_GPIB_RECV_CIC_STATE = &H3FFF4193&

Global Const VI_ATTR_RECV_TCPIP_ADDR = &HBFFF4198&

Global Const VI_ATTR_USB_RECV_INTR_SIZE = &H3FFF41B0&

Global Const VI_ATTR_USB_RECV_INTR_DATA = &HBFFF41B1&

' - Event Types
-----------------------------------------------------------

Global Const VI_EVENT_IO_COMPLETION = &H3FFF2009&

Global Const VI_EVENT_TRIG = &HBFFF200A&

Global Const VI_EVENT_SERVICE_REQ = &H3FFF200B&

Global Const VI_EVENT_CLEAR = &H3FFF200D&

Global Const VI_EVENT_EXCEPTION = &HBFFF200E&

Global Const VI_EVENT_GPIB_CIC = &H3FFF2012&

Global Const VI_EVENT_GPIB_TALK = &H3FFF2013&

Global Const VI_EVENT_GPIB_LISTEN = &H3FFF2014&

Global Const VI_EVENT_VXI_VME_SYSFAIL = &H3FFF201D&

Global Const VI_EVENT_VXI_VME_SYSRESET = &H3FFF201E&

Global Const VI_EVENT_VXI_SIGP = &H3FFF2020&

Global Const VI_EVENT_VXI_VME_INTR = &HBFFF2021&

Global Const VI_EVENT_TCPIP_CONNECT = &H3FFF2036&

Global Const VI_EVENT_USB_INTR = &H3FFF2037&

Global Const VI_EVENT_PXI_INTR = &H3FFF2022&

Global Const VI_ALL_ENABLED_EVENTS = &H3FFF7FFF&

' - Completion and Error Codes
--------------------------------------------

Global Const VI_SUCCESS = &H0&

Global Const VI_SUCCESS_EVENT_EN = &H3FFF0002&

Global Const VI_SUCCESS_EVENT_DIS = &H3FFF0003&

Global Const VI_SUCCESS_QUEUE_EMPTY = &H3FFF0004&

Global Const VI_SUCCESS_TERM_CHAR = &H3FFF0005&

Global Const VI_SUCCESS_MAX_CNT = &H3FFF0006&

Global Const VI_SUCCESS_DEV_NPRESENT = &H3FFF007D&

Global Const VI_SUCCESS_TRIG_MAPPED = &H3FFF007E&

Global Const VI_SUCCESS_QUEUE_NEMPTY = &H3FFF0080&

Global Const VI_SUCCESS_NCHAIN = &H3FFF0098&

Global Const VI_SUCCESS_NESTED_SHARED = &H3FFF0099&

Global Const VI_SUCCESS_NESTED_EXCLUSIVE = &H3FFF009A&

Global Const VI_SUCCESS_SYNC = &H3FFF009B&

Global Const VI_WARN_QUEUE_OVERFLOW = &H3FFF000C&

Global Const VI_WARN_CONFIG_NLOADED = &H3FFF0077&

Global Const VI_WARN_NULL_OBJECT = &H3FFF0082&

Global Const VI_WARN_NSUP_ATTR_STATE = &H3FFF0084&

Global Const VI_WARN_UNKNOWN_STATUS = &H3FFF0085&

Global Const VI_WARN_NSUP_BUF = &H3FFF0088&

Global Const VI_WARN_EXT_FUNC_NIMPL = &H3FFF00A9&

Global Const VI_WARN_SERVER_CERT_UNTRUSTED = &H3FFF00F0&

Global Const VI_WARN_SERVER_CERT_INV_SUBJECT = &H3FFF00F1&

Global Const VI_ERROR_SYSTEM_ERROR = &HBFFF0000&

Global Const VI_ERROR_INV_OBJECT = &HBFFF000E&

Global Const VI_ERROR_RSRC_LOCKED = &HBFFF000F&

Global Const VI_ERROR_INV_EXPR = &HBFFF0010&

Global Const VI_ERROR_RSRC_NFOUND = &HBFFF0011&

Global Const VI_ERROR_INV_RSRC_NAME = &HBFFF0012&

Global Const VI_ERROR_INV_ACC_MODE = &HBFFF0013&

Global Const VI_ERROR_TMO = &HBFFF0015&

Global Const VI_ERROR_CLOSING_FAILED = &HBFFF0016&

Global Const VI_ERROR_INV_DEGREE = &HBFFF001B&

Global Const VI_ERROR_INV_JOB_ID = &HBFFF001C&

Global Const VI_ERROR_NSUP_ATTR = &HBFFF001D&

Global Const VI_ERROR_NSUP_ATTR_STATE = &HBFFF001E&

Global Const VI_ERROR_ATTR_READONLY = &HBFFF001F&

Global Const VI_ERROR_INV_LOCK_TYPE = &HBFFF0020&

Global Const VI_ERROR_INV_ACCESS_KEY = &HBFFF0021&

Global Const VI_ERROR_INV_EVENT = &HBFFF0026&

Global Const VI_ERROR_INV_MECH = &HBFFF0027&

Global Const VI_ERROR_HNDLR_NINSTALLED = &HBFFF0028&

Global Const VI_ERROR_INV_HNDLR_REF = &HBFFF0029&

Global Const VI_ERROR_INV_CONTEXT = &HBFFF002A&

Global Const VI_ERROR_NENABLED = &HBFFF002F&

Global Const VI_ERROR_ABORT = &HBFFF0030&

Global Const VI_ERROR_RAW_WR_PROT_VIOL = &HBFFF0034&

Global Const VI_ERROR_RAW_RD_PROT_VIOL = &HBFFF0035&

Global Const VI_ERROR_OUTP_PROT_VIOL = &HBFFF0036&

Global Const VI_ERROR_INP_PROT_VIOL = &HBFFF0037&

Global Const VI_ERROR_BERR = &HBFFF0038&

Global Const VI_ERROR_IN_PROGRESS = &HBFFF0039&

Global Const VI_ERROR_INV_SETUP = &HBFFF003A&

Global Const VI_ERROR_QUEUE_ERROR = &HBFFF003B&

Global Const VI_ERROR_ALLOC = &HBFFF003C&

Global Const VI_ERROR_INV_MASK = &HBFFF003D&

Global Const VI_ERROR_IO = &HBFFF003E&

Global Const VI_ERROR_INV_FMT = &HBFFF003F&

Global Const VI_ERROR_NSUP_FMT = &HBFFF0041&

Global Const VI_ERROR_LINE_IN_USE = &HBFFF0042&

Global Const VI_ERROR_NSUP_MODE = &HBFFF0046&

Global Const VI_ERROR_SRQ_NOCCURRED = &HBFFF004A&

Global Const VI_ERROR_INV_SPACE = &HBFFF004E&

Global Const VI_ERROR_INV_OFFSET = &HBFFF0051&

Global Const VI_ERROR_INV_WIDTH = &HBFFF0052&

Global Const VI_ERROR_NSUP_OFFSET = &HBFFF0054&

Global Const VI_ERROR_NSUP_VAR_WIDTH = &HBFFF0055&

Global Const VI_ERROR_WINDOW_NMAPPED = &HBFFF0057&

Global Const VI_ERROR_RESP_PENDING = &HBFFF0059&

Global Const VI_ERROR_NLISTENERS = &HBFFF005F&

Global Const VI_ERROR_NCIC = &HBFFF0060&

Global Const VI_ERROR_NSYS_CNTLR = &HBFFF0061&

Global Const VI_ERROR_NSUP_OPER = &HBFFF0067&

Global Const VI_ERROR_INTR_PENDING = &HBFFF0068&

Global Const VI_ERROR_ASRL_PARITY = &HBFFF006A&

Global Const VI_ERROR_ASRL_FRAMING = &HBFFF006B&

Global Const VI_ERROR_ASRL_OVERRUN = &HBFFF006C&

Global Const VI_ERROR_TRIG_NMAPPED = &HBFFF006E&

Global Const VI_ERROR_NSUP_ALIGN_OFFSET = &HBFFF0070&

Global Const VI_ERROR_USER_BUF = &HBFFF0071&

Global Const VI_ERROR_RSRC_BUSY = &HBFFF0072&

Global Const VI_ERROR_NSUP_WIDTH = &HBFFF0076&

Global Const VI_ERROR_INV_PARAMETER = &HBFFF0078&

Global Const VI_ERROR_INV_PROT = &HBFFF0079&

Global Const VI_ERROR_INV_SIZE = &HBFFF007B&

Global Const VI_ERROR_WINDOW_MAPPED = &HBFFF0080&

Global Const VI_ERROR_NIMPL_OPER = &HBFFF0081&

Global Const VI_ERROR_INV_LENGTH = &HBFFF0083&

Global Const VI_ERROR_INV_MODE = &HBFFF0091&

Global Const VI_ERROR_SESN_NLOCKED = &HBFFF009C&

Global Const VI_ERROR_MEM_NSHARED = &HBFFF009D&

Global Const VI_ERROR_LIBRARY_NFOUND = &HBFFF009E&

Global Const VI_ERROR_NSUP_INTR = &HBFFF009F&

Global Const VI_ERROR_INV_LINE = &HBFFF00A0&

Global Const VI_ERROR_FILE_ACCESS = &HBFFF00A1&

Global Const VI_ERROR_FILE_IO = &HBFFF00A2&

Global Const VI_ERROR_NSUP_LINE = &HBFFF00A3&

Global Const VI_ERROR_NSUP_MECH = &HBFFF00A4&

Global Const VI_ERROR_INTF_NUM_NCONFIG = &HBFFF00A5&

Global Const VI_ERROR_CONN_LOST = &HBFFF00A6&

Global Const VI_ERROR_NPERMISSION = &HBFFF00A8&

Global Const VI_ERROR_SERVER_CERT = &HBFFF00B0&

Global Const VI_ERROR_SERVER_CERT_UNTRUSTED = &HBFFF00B1&

Global Const VI_ERROR_SERVER_CERT_EXPIRED = &HBFFF00B2&

Global Const VI_ERROR_SERVER_CERT_REVOKED = &HBFFF00B3&

Global Const VI_ERROR_SERVER_CERT_INV_SUBJECT = &HBFFF00B4&

' - Other VISA Definitions
------------------------------------------------

Global Const VI_FIND_BUFLEN = 256

Global Const VI_NULL = 0

Global Const VI_TRUE = 1

Global Const VI_FALSE = 0

Global Const VI_INTF_GPIB = 1

Global Const VI_INTF_VXI = 2

Global Const VI_INTF_GPIB_VXI = 3

Global Const VI_INTF_ASRL = 4

Global Const VI_INTF_PXI = 5

Global Const VI_INTF_TCPIP = 6

Global Const VI_INTF_USB = 7

Global Const VI_PROT_NORMAL = 1

Global Const VI_PROT_FDC = 2

Global Const VI_PROT_HS488 = 3

Global Const VI_PROT_4882_STRS = 4

Global Const VI_PROT_USBTMC_VENDOR = 5

Global Const VI_FDC_NORMAL = 1

Global Const VI_FDC_STREAM = 2

Global Const VI_LOCAL_SPACE = 0

Global Const VI_A16_SPACE = 1

Global Const VI_A24_SPACE = 2

Global Const VI_A32_SPACE = 3

Global Const VI_A64_SPACE = 4

Global Const VI_PXI_ALLOC_SPACE = 9

Global Const VI_PXI_CFG_SPACE = 10

Global Const VI_PXI_BAR0_SPACE = 11

Global Const VI_PXI_BAR1_SPACE = 12

Global Const VI_PXI_BAR2_SPACE = 13

Global Const VI_PXI_BAR3_SPACE = 14

Global Const VI_PXI_BAR4_SPACE = 15

Global Const VI_PXI_BAR5_SPACE = 16

Global Const VI_OPAQUE_SPACE = &HFFFF

Global Const VI_UNKNOWN_LA = -1

Global Const VI_UNKNOWN_SLOT = -1

Global Const VI_UNKNOWN_LEVEL = -1

Global Const VI_UNKNOWN_CHASSIS = -1

Global Const VI_QUEUE = 1

Global Const VI_ALL_MECH = &HFFFF

Global Const VI_TRIG_ALL = -2

Global Const VI_TRIG_SW = -1

Global Const VI_TRIG_TTL0 = 0

Global Const VI_TRIG_TTL1 = 1

Global Const VI_TRIG_TTL2 = 2

Global Const VI_TRIG_TTL3 = 3

Global Const VI_TRIG_TTL4 = 4

Global Const VI_TRIG_TTL5 = 5

Global Const VI_TRIG_TTL6 = 6

Global Const VI_TRIG_TTL7 = 7

Global Const VI_TRIG_ECL0 = 8

Global Const VI_TRIG_ECL1 = 9

Global Const VI_TRIG_PANEL_IN = 27

Global Const VI_TRIG_PANEL_OUT = 28

Global Const VI_TRIG_PROT_DEFAULT = 0

Global Const VI_TRIG_PROT_ON = 1

Global Const VI_TRIG_PROT_OFF = 2

Global Const VI_TRIG_PROT_SYNC = 5

Global Const VI_TRIG_PROT_RESERVE = 6

Global Const VI_TRIG_PROT_UNRESERVE = 7

Global Const VI_READ_BUF = 1

Global Const VI_WRITE_BUF = 2

Global Const VI_READ_BUF_DISCARD = 4

Global Const VI_WRITE_BUF_DISCARD = 8

Global Const VI_IO_IN_BUF = 16

Global Const VI_IO_OUT_BUF = 32

Global Const VI_IO_IN_BUF_DISCARD = 64

Global Const VI_IO_OUT_BUF_DISCARD = 128

Global Const VI_FLUSH_ON_ACCESS = 1

Global Const VI_FLUSH_WHEN_FULL = 2

Global Const VI_FLUSH_DISABLE = 3

Global Const VI_NMAPPED = 1

Global Const VI_USE_OPERS = 2

Global Const VI_DEREF_ADDR = 3

Global Const VI_TMO_IMMEDIATE = &H0&

Global Const VI_TMO_INFINITE = &HFFFFFFFF&

Global Const VI_NO_LOCK = 0

Global Const VI_EXCLUSIVE_LOCK = 1

Global Const VI_SHARED_LOCK = 2

Global Const VI_LOAD_CONFIG = 4

Global Const VI_NO_SEC_ADDR = &HFFFF

Global Const VI_ASRL_PAR_NONE = 0

Global Const VI_ASRL_PAR_ODD = 1

Global Const VI_ASRL_PAR_EVEN = 2

Global Const VI_ASRL_PAR_MARK = 3

Global Const VI_ASRL_PAR_SPACE = 4

Global Const VI_ASRL_STOP_ONE = 10

Global Const VI_ASRL_STOP_ONE5 = 15

Global Const VI_ASRL_STOP_TWO = 20

Global Const VI_ASRL_FLOW_NONE = 0

Global Const VI_ASRL_FLOW_XON_XOFF = 1

Global Const VI_ASRL_FLOW_RTS_CTS = 2

Global Const VI_ASRL_FLOW_DTR_DSR = 4

Global Const VI_ASRL_END_NONE = 0

Global Const VI_ASRL_END_LAST_BIT = 1

Global Const VI_ASRL_END_TERMCHAR = 2

Global Const VI_ASRL_END_BREAK = 3

Global Const VI_STATE_ASSERTED = 1

Global Const VI_STATE_UNASSERTED = 0

Global Const VI_STATE_UNKNOWN = -1

Global Const VI_BIG_ENDIAN = 0

Global Const VI_LITTLE_ENDIAN = 1

Global Const VI_DATA_PRIV = 0

Global Const VI_DATA_NPRIV = 1

Global Const VI_PROG_PRIV = 2

Global Const VI_PROG_NPRIV = 3

Global Const VI_BLCK_PRIV = 4

Global Const VI_BLCK_NPRIV = 5

Global Const VI_D64_PRIV = 6

Global Const VI_D64_NPRIV = 7

Global Const VI_WIDTH_8 = 1

Global Const VI_WIDTH_16 = 2

Global Const VI_WIDTH_32 = 4

Global Const VI_WIDTH_64 = 8

Global Const VI_GPIB_REN_DEASSERT = 0

Global Const VI_GPIB_REN_ASSERT = 1

Global Const VI_GPIB_REN_DEASSERT_GTL = 2

Global Const VI_GPIB_REN_ASSERT_ADDRESS = 3

Global Const VI_GPIB_REN_ASSERT_LLO = 4

Global Const VI_GPIB_REN_ASSERT_ADDRESS_LLO = 5

Global Const VI_GPIB_REN_ADDRESS_GTL = 6

Global Const VI_GPIB_ATN_DEASSERT = 0

Global Const VI_GPIB_ATN_ASSERT = 1

Global Const VI_GPIB_ATN_DEASSERT_HANDSHAKE = 2

Global Const VI_GPIB_ATN_ASSERT_IMMEDIATE = 3

Global Const VI_GPIB_HS488_DISABLED = 0

Global Const VI_GPIB_HS488_NIMPL = -1

Global Const VI_GPIB_UNADDRESSED = 0

Global Const VI_GPIB_TALKER = 1

Global Const VI_GPIB_LISTENER = 2

Global Const VI_VXI_CMD16 = &H0200

Global Const VI_VXI_CMD16_RESP16 = &H0202

Global Const VI_VXI_RESP16 = &H0002

Global Const VI_VXI_CMD32 = &H0400

Global Const VI_VXI_CMD32_RESP16 = &H0402

Global Const VI_VXI_CMD32_RESP32 = &H0404

Global Const VI_VXI_RESP32 = &H0004

Global Const VI_ASSERT_SIGNAL = -1

Global Const VI_ASSERT_USE_ASSIGNED = 0

Global Const VI_ASSERT_IRQ1 = 1

Global Const VI_ASSERT_IRQ2 = 2

Global Const VI_ASSERT_IRQ3 = 3

Global Const VI_ASSERT_IRQ4 = 4

Global Const VI_ASSERT_IRQ5 = 5

Global Const VI_ASSERT_IRQ6 = 6

Global Const VI_ASSERT_IRQ7 = 7

Global Const VI_UTIL_ASSERT_SYSRESET = 1

Global Const VI_UTIL_ASSERT_SYSFAIL = 2

Global Const VI_UTIL_DEASSERT_SYSFAIL = 3

Global Const VI_VXI_CLASS_MEMORY = 0

Global Const VI_VXI_CLASS_EXTENDED = 1

Global Const VI_VXI_CLASS_MESSAGE = 2

Global Const VI_VXI_CLASS_REGISTER = 3

Global Const VI_VXI_CLASS_OTHER = 4

Global Const VI_PXI_ADDR_NONE = 0

Global Const VI_PXI_ADDR_MEM = 1

Global Const VI_PXI_ADDR_IO = 2

Global Const VI_PXI_ADDR_CFG = 3

Global Const VI_UNKNOWN_TRIG = -1

Global Const VI_PXI_LBUS_STAR_TRIG_BUS_0 = 1000

Global Const VI_PXI_LBUS_STAR_TRIG_BUS_1 = 1001

Global Const VI_PXI_LBUS_STAR_TRIG_BUS_2 = 1002

Global Const VI_PXI_LBUS_STAR_TRIG_BUS_3 = 1003

Global Const VI_PXI_LBUS_STAR_TRIG_BUS_4 = 1004

Global Const VI_PXI_LBUS_STAR_TRIG_BUS_5 = 1005

Global Const VI_PXI_LBUS_STAR_TRIG_BUS_6 = 1006

Global Const VI_PXI_LBUS_STAR_TRIG_BUS_7 = 1007

Global Const VI_PXI_LBUS_STAR_TRIG_BUS_8 = 1008

Global Const VI_PXI_LBUS_STAR_TRIG_BUS_9 = 1009

Global Const VI_PXI_STAR_TRIG_CONTROLLER = 1413

' - Backward Compatibility Macros
-----------------------------------------

Global Const VI_ERROR_INV_SESSION = &HBFFF000E&

Global Const VI_INFINITE = &HFFFFFFFF&

Global Const VI_NORMAL = 1

Global Const VI_FDC = 2

Global Const VI_HS488 = 3

Global Const VI_ASRL488 = 4

Global Const VI_ASRL_IN_BUF = 16

Global Const VI_ASRL_OUT_BUF = 32

Global Const VI_ASRL_IN_BUF_DISCARD = 64

Global Const VI_ASRL_OUT_BUF_DISCARD = 128

## A.4 Contents of visa32.def File  [a.4-contents-of-visa32.def-file]

This file reflects a preferred implementation of the specifications
given in this document.

> LIBRARY VISA32
>
> EXPORTS
>
> viGetDefaultRM @128
>
> viOpenDefaultRM @141
>
> viFindRsrc @129
>
> viFindNext @130
>
> viOpen @131
>
> viClose @132
>
> viGetAttribute @133
>
> viSetAttribute @134
>
> viStatusDesc @142
>
> viTerminate @143
>
> viLock @144
>
> viUnlock @145
>
> viEnableEvent @135
>
> viDisableEvent @136
>
> viDiscardEvents @137
>
> viWaitOnEvent @138
>
> viInstallHandler @139
>
> viUninstallHandler @140
>
> viParseRsrc @146
>
> viParseRsrcEx @147
>
> viMove @200
>
> viMoveAsync @201
>
> viBufWrite @202
>
> viBufRead @203
>
> viSPrintf @204
>
> viVSPrintf @205
>
> viSScanf @206
>
> viVSScanf @207
>
> viGpibControlREN @208
>
> viVxiCommandQuery @209
>
> viGpibControlATN @210
>
> viGpibSendIFC @211
>
> viGpibCommand @212
>
> viGpibPassControl @213
>
> viAssertUtilSignal @214
>
> viAssertIntrSignal @215
>
> viMapTrigger @216
>
> viUnmapTrigger @217
>
> viWriteFromFile @218
>
> viReadToFile @219
>
> viIn64 @220
>
> viOut64 @221
>
> viIn8Ex @222
>
> viOut8Ex @223
>
> viIn16Ex @224
>
> viOut16Ex @225
>
> viIn32Ex @226
>
> viOut32Ex @227
>
> viIn64Ex @228
>
> viOut64Ex @229
>
> viMoveIn64 @230
>
> viMoveOut64 @231
>
> viMoveIn8Ex @232
>
> viMoveOut8Ex @233
>
> viMoveIn16Ex @234
>
> viMoveOut16Ex @235
>
> viMoveIn32Ex @236
>
> viMoveOut32Ex @237
>
> viMoveIn64Ex @238
>
> viMoveOut64Ex @239
>
> viMoveEx @240
>
> viMoveAsyncEx @241
>
> viMapAddressEx @242
>
> viMemAllocEx @243
>
> viMemFreeEx @244
>
> viPeek64 @245
>
> viPoke64 @246
>
> viRead @256
>
> viReadAsync @277
>
> viWrite @257
>
> viWriteAsync @278
>
> viAssertTrigger @258
>
> viReadSTB @259
>
> viClear @260
>
> viSetBuf @267
>
> viFlush @268
>
> viPrintf @269
>
> viVPrintf @270
>
> viScanf @271
>
> viVScanf @272
>
> viQueryf @279
>
> viVQueryf @280
>
> viIn8 @273
>
> viOut8 @274
>
> viIn16 @261
>
> viOut16 @262
>
> viIn32 @281
>
> viOut32 @282
>
> viMoveIn8 @283
>
> viMoveOut8 @284
>
> viMoveIn16 @285
>
> viMoveOut16 @286
>
> viMoveIn32 @287
>
> viMoveOut32 @288
>
> viMapAddress @263
>
> viUnmapAddress @264
>
> viPeek8 @275
>
> viPoke8 @276
>
> viPeek16 @265
>
> viPoke16 @266
>
> viPeek32 @289
>
> viPoke32 @290
>
> viMemAlloc @291
>
> viMemFree @292
>
> viUsbControlOut @293
>
> viUsbControlIn @294
>
> viPxiReserveTriggers @295

## A.5 Contents of visa64.def File  [a.5-contents-of-visa64.def-file]

This file reflects a preferred implementation of the specifications
given in this document.

> LIBRARY VISA64
>
> EXPORTS
>
> viGetDefaultRM @128
>
> viOpenDefaultRM @141
>
> viFindRsrc @129
>
> viFindNext @130
>
> viOpen @131
>
> viClose @132
>
> viGetAttribute @133
>
> viSetAttribute @134
>
> viStatusDesc @142
>
> viTerminate @143
>
> viLock @144
>
> viUnlock @145
>
> viEnableEvent @135
>
> viDisableEvent @136
>
> viDiscardEvents @137
>
> viWaitOnEvent @138
>
> viInstallHandler @139
>
> viUninstallHandler @140
>
> viParseRsrc @146
>
> viParseRsrcEx @147
>
> viMove @200
>
> viMoveAsync @201
>
> viBufWrite @202
>
> viBufRead @203
>
> viSPrintf @204
>
> viVSPrintf @205
>
> viSScanf @206
>
> viVSScanf @207
>
> viGpibControlREN @208
>
> viVxiCommandQuery @209
>
> viGpibControlATN @210
>
> viGpibSendIFC @211
>
> viGpibCommand @212
>
> viGpibPassControl @213
>
> viAssertUtilSignal @214
>
> viAssertIntrSignal @215
>
> viMapTrigger @216
>
> viUnmapTrigger @217
>
> viWriteFromFile @218
>
> viReadToFile @219
>
> viIn64 @220
>
> viOut64 @221
>
> viIn8Ex @222
>
> viOut8Ex @223
>
> viIn16Ex @224
>
> viOut16Ex @225
>
> viIn32Ex @226
>
> viOut32Ex @227
>
> viIn64Ex @228
>
> viOut64Ex @229
>
> viMoveIn64 @230
>
> viMoveOut64 @231
>
> viMoveIn8Ex @232
>
> viMoveOut8Ex @233
>
> viMoveIn16Ex @234
>
> viMoveOut16Ex @235
>
> viMoveIn32Ex @236
>
> viMoveOut32Ex @237
>
> viMoveIn64Ex @238
>
> viMoveOut64Ex @239
>
> viMoveEx @240
>
> viMoveAsyncEx @241
>
> viMapAddressEx @242
>
> viMemAllocEx @243
>
> viMemFreeEx @244
>
> viPeek64 @245
>
> viPoke64 @246
>
> viRead @256
>
> viReadAsync @277
>
> viWrite @257
>
> viWriteAsync @278
>
> viAssertTrigger @258
>
> viReadSTB @259
>
> viClear @260
>
> viSetBuf @267
>
> viFlush @268
>
> viPrintf @269
>
> viVPrintf @270
>
> viScanf @271
>
> viVScanf @272
>
> viQueryf @279
>
> viVQueryf @280
>
> viIn8 @273
>
> viOut8 @274
>
> viIn16 @261
>
> viOut16 @262
>
> viIn32 @281
>
> viOut32 @282
>
> viMoveIn8 @283
>
> viMoveOut8 @284
>
> viMoveIn16 @285
>
> viMoveOut16 @286
>
> viMoveIn32 @287
>
> viMoveOut32 @288
>
> viMapAddress @263
>
> viUnmapAddress @264
>
> viPeek8 @275
>
> viPoke8 @276
>
> viPeek16 @265
>
> viPoke16 @266
>
> viPeek32 @289
>
> viPoke32 @290
>
> viMemAlloc @291
>
> viMemFree @292
>
> viUsbControlOut @293
>
> viUsbControlIn @294
>
> viPxiReserveTriggers @295
